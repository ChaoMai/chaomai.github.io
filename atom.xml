<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Building Things</title>
  <subtitle>Just want to know how it works!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chaomai.github.io/"/>
  <updated>2016-03-05T05:07:58.305Z</updated>
  <id>http://chaomai.github.io/</id>
  
  <author>
    <name>Chao Mai</name>
    <email>loneymai@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ Copy Elision</title>
    <link href="http://chaomai.github.io/2016/03/05/2016-2016-03-05-cpp-copy-elision/"/>
    <id>http://chaomai.github.io/2016/03/05/2016-2016-03-05-cpp-copy-elision/</id>
    <published>2016-03-05T05:03:30.000Z</published>
    <updated>2016-03-05T05:07:58.305Z</updated>
    
    <content type="html">&lt;p&gt;在写代码是发现拷贝构造函数有时候没有调用，想起C++ Primer中提到过&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the compiler can omit calls to the copy constructor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后来查到是发生了copy elision。&lt;/p&gt;
&lt;p&gt;首先有那么一个类定义，其中静态成员c是对象编号。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; C &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  C() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name_ = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ++c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt; &amp;lt;&amp;lt; name_ &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  C(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; name) : name_(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt; &amp;lt;&amp;lt; name_ &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  C(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; C &amp;amp;rhs) : name_(c++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;copy from c&quot;&lt;/span&gt; &amp;lt;&amp;lt; rhs.name_ &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, c&quot;&lt;/span&gt; &amp;lt;&amp;lt; name_ &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; &amp;lt;&amp;lt; __func__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  C &amp;amp;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;=(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; C &amp;amp;rhs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;copy assign from c&quot;&lt;/span&gt; &amp;lt;&amp;lt; rhs.name_ &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;, c&quot;&lt;/span&gt; &amp;lt;&amp;lt; name_ &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; name_ = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; C::c = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后是有下面的几个函数定义和调用，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(C c)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;C &lt;span class=&quot;title&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tmp = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;C &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; C(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;C &lt;span class=&quot;title&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(c1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(C(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C c = f();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上三个f的调用分别输出什么？&lt;/p&gt;
&lt;p&gt;下面是结果，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c1: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy from c1, c10000: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c10001: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy assign from c10000, c10001: operator=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c10002: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy assign from c2, c10002: operator=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c10003: C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个没什么好说的，首先用&lt;code&gt;c1&lt;/code&gt;对形参&lt;code&gt;c&lt;/code&gt;做拷贝初始化，接着&lt;code&gt;tmp&lt;/code&gt;进行默认初始化，然后用拷贝赋值，将&lt;code&gt;c&lt;/code&gt;赋值给&lt;code&gt;tmp&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;第二个的结果就有点怪了，为什么&lt;code&gt;C(2)&lt;/code&gt;得到的临时对象直接进行了赋值，而不首先初始化形参&lt;code&gt;c&lt;/code&gt;？而第三个，为什么返回的临时对象一次拷贝都没发生？&lt;/p&gt;
&lt;p&gt;因为在这两种情况中发生了copy elision（&lt;a href=&quot;http://stackoverflow.com/questions/12953127/what-are-copy-elision-and-return-value-optimization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1&lt;/a&gt;，&lt;a href=&quot;http://stackoverflow.com/questions/8451212/passing-temporary-object-as-parameter-by-value-is-copy-constructor-called&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Copy_elision&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3&lt;/a&gt;）（&lt;a href=&quot;http://cstdlib.com/tech/2014/07/12/nrvo-and-copy-elision/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Return_value_optimization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2&lt;/a&gt;）。&lt;strong&gt;Copy elision&lt;/strong&gt;是一种优化手段，满足特定条件时会发生，当传入的参数是rvalue的时候，无需进行额外的拷贝，直接使用源对象。&lt;strong&gt;RVO&lt;/strong&gt;，全称叫return value optimization，编译器会让调用函数在其栈上分配空间，被调函数返回值处的临时对象会在这块内存上构造，进而避免了return时临时对象的拷贝，是copy elision常见形式。根据返回的对象是否是临时的，有&lt;strong&gt;named return value optimization&lt;/strong&gt;和&lt;strong&gt;return value optimization,&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Copy elision和rvo即使在有可观察的到的side-effects时，也会发生，是&lt;a href=&quot;https://en.wikipedia.org/wiki/As-if_rule&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;As-if rule&lt;/a&gt;的例外中的一种。Dave Abrahams写过pass by value的一系列&lt;a href=&quot;https://web.archive.org/web/20140205194657/http://cpp-next.com/archive/2009/08/want-speed-pass-by-value/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;。Ayman B. Shoukry在&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms364057(v=vs.80&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;.aspx#nrvo_cpp05_topic3)讨论了nrvo的局限（multiple return points和conditional initialization）。&lt;/p&gt;
&lt;p&gt;clang++和g++可以用&lt;code&gt;-fno-elide-constructors&lt;/code&gt;控制是否开启优化。关闭优化后，输出的结果就和期待的一致了，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c1: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy from c1, c10000: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c10001: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy assign from c10000, c10001: operator=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy from c2, c10002: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c10003: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy assign from c10002, c10003: operator=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c10004: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy from c10004, c10005: C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy from c10005, c10006: C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;stackoverflow的这个&lt;a href=&quot;http://stackoverflow.com/questions/12953127/what-are-copy-elision-and-return-value-optimization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;答案&lt;/a&gt;，给出了Standard reference和发生copy elision以及return value optimization常见的例子，下面是搬运例子，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nrvo&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Thing &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ~Thing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Thing&amp;amp;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Thing &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t; &lt;span class=&quot;comment&quot;&gt;// optimization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Thing t2 = f();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;rvo&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Thing &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ~Thing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Thing&amp;amp;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Thing &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Thing(); &lt;span class=&quot;comment&quot;&gt;// optimization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Thing t2 = f();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;pass a temporary object by value&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Thing &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ~Thing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Thing&amp;amp;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Thing t)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// optimization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(Thing());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;exception is thrown and caught by value&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Thing&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Thing&amp;amp;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Thing c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; c; &lt;span class=&quot;comment&quot;&gt;// optimization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(Thing c) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在写代码是发现拷贝构造函数有时候没有调用，想起C++ Primer中提到过&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the compiler can omit calls to the copy constructor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后来查到是
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Single Number</title>
    <link href="http://chaomai.github.io/2016/02/16/2016-2016-02-16-single-number/"/>
    <id>http://chaomai.github.io/2016/02/16/2016-2016-02-16-single-number/</id>
    <published>2016-02-16T11:59:44.000Z</published>
    <updated>2016-02-16T12:03:46.621Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Single-Number-I&quot;&gt;&lt;a href=&quot;#Single-Number-I&quot; class=&quot;headerlink&quot; title=&quot;Single Number I&quot;&gt;&lt;/a&gt;Single Number I&lt;/h1&gt;&lt;p&gt;问题：给定一个数组，除了其中一个数出现一次，其他数都出现了两次，找到这个数。&lt;/p&gt;
&lt;p&gt;最简单的办法用莫过于用map统计每个数出现的次数，但这除了需要遍历数组外，还需要遍历map，且需要O(n)空间。&lt;/p&gt;
&lt;p&gt;使用异或操作更为方便，根据&lt;code&gt;a xor a = 0&lt;/code&gt;和&lt;code&gt;a xor 0 = a&lt;/code&gt;，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;singleNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; n : nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret ^= n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成对的数字进行xor后是0，最后ret便是只出现一次的那个数字。&lt;/p&gt;
&lt;h1 id=&quot;Single-Number-II&quot;&gt;&lt;a href=&quot;#Single-Number-II&quot; class=&quot;headerlink&quot; title=&quot;Single Number II&quot;&gt;&lt;/a&gt;Single Number II&lt;/h1&gt;&lt;h2 id=&quot;方法1&quot;&gt;&lt;a href=&quot;#方法1&quot; class=&quot;headerlink&quot; title=&quot;方法1&quot;&gt;&lt;/a&gt;方法1&lt;/h2&gt;&lt;p&gt;问题：给定一个数组，除了其中一个数出现一次，其他数都出现了三次，找到这个数。&lt;/p&gt;
&lt;p&gt;此时I的xor方法不可用，因为出现次数是奇数次。&lt;/p&gt;
&lt;p&gt;考虑每个数的二进制表示，但凡这个数出现了三次，那么二进制表示中，如果某个bit有1，则这个1也在该bit上出现了三次。统计所有数字每个bit上1出现的次数，最后mod 3，余数就是那个数相应bit上的值。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2    2    2    11   11   11   12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0010 0010 0010 1011 1011 1011 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              ----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;count 1 for each bit,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bit index: 3 2 1 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;count:     4 0 6 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mod 3:     1 0 0 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下是代码，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;singleNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; count(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; n : nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j != count.size(); ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((n &amp;gt;&amp;gt; j) &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count[&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt; - j] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i != count.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result |= (count[&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt; - i] % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;&amp;lt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码是遍历每个数，统计每个数中bit为1的数目。还可以遍历每个bit，统计所有数字该bit上1的数目，这样可以合并两个for。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;singleNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; count(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i != count.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; n : nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      count[&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt; - i] += (n &amp;gt;&amp;gt; i) &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result |= (count[&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt; - i] % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;&amp;lt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;方法2&quot;&gt;&lt;a href=&quot;#方法2&quot; class=&quot;headerlink&quot; title=&quot;方法2&quot;&gt;&lt;/a&gt;方法2&lt;/h2&gt;&lt;p&gt;但是上述方法需要O(n)的空间。在这个&lt;a href=&quot;https://leetcode.com/discuss/857/constant-space-solution&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;discuss&lt;/a&gt;中看到了更好的方法，结合例子能明白做了什么，但是无法理解这样位操作的idea是如何想出来的。。。最后在另一个&lt;a href=&quot;(http://traceformula.blogspot.com/2015/08/single-number-ii-how-to-come-up-with.html&quot;&gt;blog&lt;/a&gt;)和另一个&lt;a href=&quot;https://leetcode.com/discuss/81165/explanation-manipulation-method-might-easier-understand&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;disscus&lt;/a&gt;中找到了另一个方法，用了卡诺图。&lt;/p&gt;
&lt;p&gt;在上面的代码中，每个bit的计数器&lt;code&gt;count[31 - i]&lt;/code&gt;值为多少是无所谓的，最终需要的只是&lt;code&gt;count[31 - i] % 3&lt;/code&gt;的结果。每当计数器为3，可以把它重置为0，即0 (00) -&amp;gt; 1 (01) -&amp;gt; 2 (10) -&amp;gt; 0 (00)，因此可以使用一个Two Bit Counter来表示状态的转换，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;对于数字的每个bit b，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;old_two, old_one b -&amp;gt; two, one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0        0       0    0    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0        1       0    0    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1        0       0    1    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0        0       1    0    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0        1       1    1    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1        0       1    0    0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上图变为卡诺图，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;two:                       one:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     old_two old_one       old_two old_one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     00 01 10              00 01 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b 0   0  0  1         b 0   0  1  0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1   0  1  0           1   1  0  0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以得到，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;two = (old_two &amp;amp; ~old_one &amp;amp; ~b) | (~old_two &amp;amp; old_one &amp;amp; b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;one = (~old_two &amp;amp; old_one &amp;amp; ~b) | (~old_two &amp;amp; ~old_one &amp;amp; b)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由上面的式子可得，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;singleNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; count(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i != count.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; two = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; one = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; old_two, old_one;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; n : nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      old_two = two;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      old_one = one;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = (n &amp;gt;&amp;gt; i) &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      two = (old_two &amp;amp; ~old_one &amp;amp; ~b) | (~old_two &amp;amp; old_one &amp;amp; b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      one = (~old_two &amp;amp; old_one &amp;amp; ~b) | (~old_two &amp;amp; ~old_one &amp;amp; b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result |= (one &amp;lt;&amp;lt; i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着发现blog里面实际上是对每个数字使用了上面的公式，而不是对数字的每个bit。观察上面的状态转换图和代码，对每个bit进行计算的时候，two和one始终都是在使用最后一个bit，没有进位的情况，如果多个bit同时计算，没有相互影响，不会有问题，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;singleNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; two = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; one = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; n : nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; old_two = two;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; old_one = one;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    two = (old_two &amp;amp; ~old_one &amp;amp; ~n) | (~old_two &amp;amp; old_one &amp;amp; n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    one = (~old_two &amp;amp; old_one &amp;amp; ~n) | (~old_two &amp;amp; ~old_one &amp;amp; n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; one;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的公式还可简化，计算two时，由于&lt;code&gt;old_two = two&lt;/code&gt;且&lt;code&gt;old_one = one&lt;/code&gt;，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;two = (two &amp;amp; ~one &amp;amp; ~b) | (~two &amp;amp; one &amp;amp; b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    = one &amp;amp; (two ^ b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;one = (~old_two &amp;amp; one &amp;amp; ~b) | (~old_two &amp;amp; ~one &amp;amp; b)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对one还可以简化，在状态转换表中用11代替old_two和old_one的10，进而在式子中消除old_two（&lt;code&gt;one = two | (one ^ b)&lt;/code&gt;）。还有，如果使用了不同的状态转换表示，最后的结果也会有所差异。&lt;/p&gt;
&lt;h1 id=&quot;Single-Number-III&quot;&gt;&lt;a href=&quot;#Single-Number-III&quot; class=&quot;headerlink&quot; title=&quot;Single Number III&quot;&gt;&lt;/a&gt;Single Number III&lt;/h1&gt;&lt;p&gt;问题：给定一个数组，除了其中两个数分别出现一次，其他数都出现了两次，找到这两个数。&lt;/p&gt;
&lt;p&gt;用I的方法来做的话，ret是那两个数的xor，因此现在需要从ret中区分出两个数。&lt;/p&gt;
&lt;p&gt;假设有如下数组，且ret中只有第3个bit被置为1，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[a, b, c, b, d, a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ret = c ^ d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果ret中某一bit出现了1，那么这两个数中，对应的bit必然是一个为1，另一个为0。根据该bit是否为1，可以把原数组分为两组，c和d不会在同一个组里，有下面两种情况，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. 某个组里只有c或d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[c]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[a, b, d, b, a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c = c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a ^ b ^ d ^ b ^ a = d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[a b c b a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[d]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a ^ b ^ c ^ b ^ a = a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d = d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 每个组除了c或d，还有其他数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[a c a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[b d b]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a ^ c ^ a = c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b ^ d ^ b = d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论是情况1或2，如果某个组除了c或d，还有其他数，那么这些数必定是成对出现的。接下来把两个组的数分别xor即可，两个xor的结果就是c和d。&lt;/p&gt;
&lt;p&gt;上述例子是假设了ret中只有一个bit被置为1，如果ret中有多个bit为1，则只需要根据其中的一个bit来分组，因此需要从ret中提取出一个为1的bit。下面提取最后一个为1的bit，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;last_bit_one = r &amp;amp; ~(r - 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若ret为1010010，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ret           1010010&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r- 1          1010001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;~(r - 1)      0101110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r &amp;amp; ~(r - 1)  0000010&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; singleNumber(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; n : nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r ^= n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; last_bit_one = r &amp;amp; ~(r - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; res(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; n : nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((last_bit_one &amp;amp; n) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] ^= n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] ^= n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h1&gt;&lt;h2 id=&quot;I&quot;&gt;&lt;a href=&quot;#I&quot; class=&quot;headerlink&quot; title=&quot;I&quot;&gt;&lt;/a&gt;I&lt;/h2&gt;&lt;p&gt;问题：给定一个数组，除了其中一个数出现两次，其他数都出现了三次，找到这个数。&lt;/p&gt;
&lt;p&gt;类似Single Number II，如果用vector对值为1的bit进行计数，那么最后mod 3，如果余数为2，那么该bit就是那个数字的相应bit，代码改为&lt;code&gt;result |= (count[31 - i] % 3 == 2) &amp;lt;&amp;lt; i;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果是使用第二个方法，直接返回two即可。&lt;/p&gt;
&lt;h2 id=&quot;II&quot;&gt;&lt;a href=&quot;#II&quot; class=&quot;headerlink&quot; title=&quot;II&quot;&gt;&lt;/a&gt;II&lt;/h2&gt;&lt;p&gt;问题：给定一个数组，除了其中一个数出现l次，其他数都出现了k次，找到这个数。&lt;/p&gt;
&lt;h3 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.com/discuss/81165/explanation-manipulation-method-might-easier-understand&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My own explanation of bit manipulation method, might be easier to understand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.com/discuss/857/constant-space-solution&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Constant space solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/daijinqiao/p/3352893.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;leetcode Single Number II - 位运算处理数组中的数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/22952651/explain-using-xor-to-find-two-non-duplicate-integers-in-an-array&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Explain using xor to find two non-duplicate integers in an array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://traceformula.blogspot.com/2015/08/single-number-ii-how-to-come-up-with.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Single Number II : How to come up with Bit Manipulation Formula&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Single-Number-I&quot;&gt;&lt;a href=&quot;#Single-Number-I&quot; class=&quot;headerlink&quot; title=&quot;Single Number I&quot;&gt;&lt;/a&gt;Single Number I&lt;/h1&gt;&lt;p&gt;问题：给定一个数组，除了其中一个数出
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="algorithms" scheme="http://chaomai.github.io/categories/programming/algorithms/"/>
    
    
      <category term="bit manipulation" scheme="http://chaomai.github.io/tags/bit-manipulation/"/>
    
  </entry>
  
  <entry>
    <title>Home Is Our World</title>
    <link href="http://chaomai.github.io/2016/02/01/2016-2016-02-01-home-is-our-world/"/>
    <id>http://chaomai.github.io/2016/02/01/2016-2016-02-01-home-is-our-world/</id>
    <published>2016-02-01T14:48:59.000Z</published>
    <updated>2016-02-01T15:00:12.259Z</updated>
    
    <content type="html">&lt;p&gt;临近春节，想起了前两个月重温的游戏，HomeWorld。&lt;/p&gt;
&lt;p&gt;2008年，高中时，我首次接触到了HomeWorld 2，游戏的画面和操作深深的震撼我。这个游戏是首个完全的3D RTS、视角能够3D旋转、舰船可以在空间中任意移动，不限于一个平面、舰船精细的建模和纹理，这些让我很长时间都沉浸在游戏当中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/homeworld_hyper%20space%20jump.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;后来了解到这个游戏是一个系列，还有1999年发布的HomeWorld和2000的Homeworld: Cataclysm，而二代是2003年的，一代发布之初就夺得了多项重量级的大奖。由于从二代到一代画面和操作的落差有点大，最后没有把一代通关。对于Homeworld: Cataclysm，当时没有买到游戏cd，也找不到下载，这一作也没有玩，&lt;/p&gt;
&lt;p&gt;玩过二代以后，就一直关注着这个游戏的后续进展。在街边买过“HomeWorld 3”（其实是2代+高达Mod），发现Relic在2003年就公布了HomeWorld的源码以后，也在Linux下折腾过一代。&lt;/p&gt;
&lt;p&gt;一代和二代的开发团队是Relic，也叫水雷社，进入游戏时的水雷动画，至今还历历在目。Relic的第一个作品便是Homeworld，后续开发的游戏也基本都是RTS的。二代发布半年后，也就是2004年，THQ收购Sierra旗下的Relic，随之被收购的还有HomeWorld系列的知识产权。当时了解到这里才意识到，续作恐怕是没戏了。&lt;/p&gt;
&lt;p&gt;直到2013年事情出现了转机，THQ破产，旗下游戏的所有权被拍卖。Gearbox最终收购下HomeWorld系列，随后便宣布重制一代和二代，但没有重制Cataclysm的消息，说是源码丢了。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/homeworld_homeworld.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;去年末，重制版发布半年多，我入手了。时隔7年，终于是把一代通关，也重温了二代的战役。&lt;/p&gt;
&lt;h1 id=&quot;画面&quot;&gt;&lt;a href=&quot;#画面&quot; class=&quot;headerlink&quot; title=&quot;画面&quot;&gt;&lt;/a&gt;画面&lt;/h1&gt;&lt;p&gt;二代的重制版相比起原版，由于引擎就是二代所用的升级版，画面上的提升不算很大，新鲜感少些，提升最大的是一代。一代的重制可谓是非常出色，精细的模型、游戏开头的黑白动画重画、即时演算动画的内容也与原作一致。&lt;/p&gt;
&lt;h1 id=&quot;音乐和配音&quot;&gt;&lt;a href=&quot;#音乐和配音&quot; class=&quot;headerlink&quot; title=&quot;音乐和配音&quot;&gt;&lt;/a&gt;音乐和配音&lt;/h1&gt;&lt;p&gt;Paul Ruskay是HomeWorld系列的配乐的作曲者，他最值得瞩目的作品便是HomeWorld的配乐，带有中东气息的配乐和吟唱为Ruskay赢得了很多奖项。一代和二代的背景音乐都是相当不错的，很好的展现了在无垠的太空中的孤独和壮丽的奇观。&lt;/p&gt;
&lt;p&gt;还有一个不得不提的声音，从游戏伊始直至结束的旁白和Bentusi的配音都是由Campbell Lane完成的，他被很多玩家誉为The Last Bentusi，The Voice of Bentusi。旁白的厚重感和沧桑感为游戏增色不少，而Bentusi这一种族神秘和古老的特点，完全就是由配音体现的。不幸的是2014年初，老头子因肺癌去世。&lt;/p&gt;
&lt;p&gt;一代的主题曲Homeworld (The Ladder)是游戏的点睛之笔，主唱Anderson的填词很好的诠释了Hiigarans和他们返回家乡的历程。由于版权问题，重制版中并未包含。&lt;/p&gt;
&lt;h1 id=&quot;剧情&quot;&gt;&lt;a href=&quot;#剧情&quot; class=&quot;headerlink&quot; title=&quot;剧情&quot;&gt;&lt;/a&gt;剧情&lt;/h1&gt;&lt;p&gt;HomeWorld其实只有一个主题，回家。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/homeworld_path.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Peter Watts创作了一代和二代的剧情。一代，Hiigarans先被流放，而后拓荒者Kushan经历千山万水，重重阻难，最终回到家乡Hiigara的故事，而二代重夺Hiigara要逊色一些。&lt;/p&gt;
&lt;h1 id=&quot;You-are-here&quot;&gt;&lt;a href=&quot;#You-are-here&quot; class=&quot;headerlink&quot; title=&quot;You are here&quot;&gt;&lt;/a&gt;You are here&lt;/h1&gt;&lt;p&gt;隔了7年，重新再玩HomeWorld，我已经不像当时，被Kushan、受难的Hiigara和舍生取义的Bentusi打动。但游戏制作人员名单最后的一个画面打动了我，随着音乐结束，屏幕上的星星越来越多时，一个箭头指向了一个星星，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/homeworld_you%20are%20here.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这即代表了玩家多年的等待，也说出了在这浩瀚宇宙中，人类不过是沧海一粟。&lt;/p&gt;
&lt;p&gt;感谢Peter Watts、Paul Ruskay、Campbell Lane，感谢Relic、Sierra和Gearbox。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;临近春节，想起了前两个月重温的游戏，HomeWorld。&lt;/p&gt;
&lt;p&gt;2008年，高中时，我首次接触到了HomeWorld 2，游戏的画面和操作深深的震撼我。这个游戏是首个完全的3D RTS、视角能够3D旋转、舰船可以在空间中任意移动，不限于一个平面、舰船精细的建模和纹理
    
    </summary>
    
      <category term="game" scheme="http://chaomai.github.io/categories/game/"/>
    
    
      <category term="homeworld" scheme="http://chaomai.github.io/tags/homeworld/"/>
    
  </entry>
  
  <entry>
    <title>素数相关问题及算法</title>
    <link href="http://chaomai.github.io/2016/01/18/2016-2016-01-18-the-prime-and-realted-algorithms/"/>
    <id>http://chaomai.github.io/2016/01/18/2016-2016-01-18-the-prime-and-realted-algorithms/</id>
    <published>2016-01-18T07:38:59.000Z</published>
    <updated>2016-01-18T08:12:06.004Z</updated>
    
    <content type="html">&lt;h1 id=&quot;试除法&quot;&gt;&lt;a href=&quot;#试除法&quot; class=&quot;headerlink&quot; title=&quot;试除法&quot;&gt;&lt;/a&gt;试除法&lt;/h1&gt;&lt;p&gt;根据素数的定义，对于自然数$n$，只要能够找到除了1和它本身以外，能够整除该数的正整数，那么它就不是素数。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n % i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; i != n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;又因为，如果$d$是$n$的约数，那么$n=d \times n/d$，故$n/d$也是，且$\min{d, n/d} \leq \sqrt{n}$,&lt;/p&gt;
&lt;p&gt;因此只需要测试到$\sqrt{n}$即可。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i * i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// i won&#39;t equal to n, so i != n is unnecessary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n % i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述方法需要约$2^{n/2}/((n/2)\ln 2)$次测试。&lt;/p&gt;
&lt;h1 id=&quot;埃氏筛&quot;&gt;&lt;a href=&quot;#埃氏筛&quot; class=&quot;headerlink&quot; title=&quot;埃氏筛&quot;&gt;&lt;/a&gt;埃氏筛&lt;/h1&gt;&lt;p&gt;对于单个小整数，试除法尚可，但是如果要枚举$n$以内的素数，使用试除法就需要对$n$以内的所有自然数都做测试，效率太低。&lt;/p&gt;
&lt;p&gt;埃拉托斯特尼筛法，简称埃氏筛，从2开始，将每个素数的所有倍数标记为合数，如果这个$n$小于最后一个标出的素数的平方，那么所有小于$n$且未标记的都是素数。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&amp;gt; isPrime(n, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;isPrime[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = isPrime[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i * i &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isPrime[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i * j &amp;lt;= n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            isPrime[i * j] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ++j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ++i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;埃氏筛的时间复杂度为$O(n\log n \log n)$，但这个方法最大的问题在于，需要的内存随着$n$的增大而增大。&lt;/p&gt;
&lt;h1 id=&quot;整数分解&quot;&gt;&lt;a href=&quot;#整数分解&quot; class=&quot;headerlink&quot; title=&quot;整数分解&quot;&gt;&lt;/a&gt;整数分解&lt;/h1&gt;&lt;h2 id=&quot;试除法-1&quot;&gt;&lt;a href=&quot;#试除法-1&quot; class=&quot;headerlink&quot; title=&quot;试除法&quot;&gt;&lt;/a&gt;试除法&lt;/h2&gt;&lt;p&gt;分解整数，普通方法是用短除法，从最小的素数除起，知道结果为素数为止。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i * i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (n % i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n /= i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;既然是从最小的素数除起，上述代码在每次&lt;code&gt;++i&lt;/code&gt;后，为什么不检测&lt;code&gt;i&lt;/code&gt;是否为素数？&lt;/p&gt;
&lt;p&gt;原因是，内层循环相当于已经把当前&lt;code&gt;i&lt;/code&gt;的所有倍数去除了，类似埃氏筛，故下次取到的能够整除$n$的&lt;code&gt;i&lt;/code&gt;是素数。&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Trial_division&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Trial division&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sieve of Eratosthenes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://algorithm.yuanbin.me/zh-hans/basics_algorithm/math/prime.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Prime&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;试除法&quot;&gt;&lt;a href=&quot;#试除法&quot; class=&quot;headerlink&quot; title=&quot;试除法&quot;&gt;&lt;/a&gt;试除法&lt;/h1&gt;&lt;p&gt;根据素数的定义，对于自然数$n$，只要能够找到除了1和它本身以外，能够整除该数的正整数，那么它就不是素数。&lt;/p&gt;
&lt;figure 
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="algorithms" scheme="http://chaomai.github.io/categories/programming/algorithms/"/>
    
    
      <category term="prime" scheme="http://chaomai.github.io/tags/prime/"/>
    
  </entry>
  
  <entry>
    <title>C++虚函数</title>
    <link href="http://chaomai.github.io/2016/01/04/2016-2016-01-04-cpp-virtual-function/"/>
    <id>http://chaomai.github.io/2016/01/04/2016-2016-01-04-cpp-virtual-function/</id>
    <published>2016-01-04T13:03:55.000Z</published>
    <updated>2016-02-23T06:18:51.330Z</updated>
    
    <content type="html">&lt;p&gt;C++中有编译时多态和运行时多态，运行时多态是由虚函数实现的。虚函数是用过虚函数表（vftable，virtual function table）来实现的，这个表包含了这个类的虚函数地址，解决了继承、覆盖。当使用父类指针来操作一个子类对象的时候，通过子类对象的虚函数表指针（vfptr，virtual function table pointer）找到子类的vftable，进而找到应该调用的函数。&lt;/p&gt;
&lt;h1 id=&quot;虚函数表&quot;&gt;&lt;a href=&quot;#虚函数表&quot; class=&quot;headerlink&quot; title=&quot;虚函数表&quot;&gt;&lt;/a&gt;虚函数表&lt;/h1&gt;&lt;p&gt;当一个类声明了虚函数或者继承了带有虚函数的父类，这个类就会有自己的vftable。vftable的实现大都为一个函数指针数组，每个函数指针指向该类的一个虚函数，同时该类的每个对象都会包含一个vfptr，vfptr指向vftable。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base::a&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base::b&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base::c&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base::d&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义一个&lt;code&gt;Base&lt;/code&gt;类型对象，&lt;code&gt;Base b&lt;/code&gt;，&lt;code&gt;b&lt;/code&gt;的vfptr如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/cpp_virtual_function_base_b.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;address of vfptr: &lt;code&gt;&amp;amp;b&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;address of vftable: &lt;code&gt;*(int*)(&amp;amp;b)&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;address of the first function in vftable: &lt;code&gt;(int*)(*(int*)(&amp;amp;b))&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;the first function pointer: &lt;code&gt;(void(*)(void))*(int*)(*(int*)(&amp;amp;b))&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;the second function pointer: &lt;code&gt;(void(*)(void))*((int*)*(int*)(&amp;amp;b) + 1)&lt;/code&gt; or &lt;code&gt;(void(*)(void))*(int*)(*(int*)(&amp;amp;b) + 4)&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;the third function pointer: &lt;code&gt;(void(*)(void))*((int*)*(int*)(&amp;amp;b) + 2)&lt;/code&gt; or &lt;code&gt;(void(*)(void))*(int*)(*(int*)(&amp;amp;b) + 8)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;一般继承&quot;&gt;&lt;a href=&quot;#一般继承&quot; class=&quot;headerlink&quot; title=&quot;一般继承&quot;&gt;&lt;/a&gt;一般继承&lt;/h1&gt;&lt;h2 id=&quot;无虚函数override&quot;&gt;&lt;a href=&quot;#无虚函数override&quot; class=&quot;headerlink&quot; title=&quot;无虚函数override&quot;&gt;&lt;/a&gt;无虚函数override&lt;/h2&gt;&lt;p&gt;对于一般继承、无虚函数override的情况，虚函数按照声明顺序放在表中，父类的虚函数在子类的虚函数前。&lt;/p&gt;
&lt;h2 id=&quot;有虚函数override&quot;&gt;&lt;a href=&quot;#有虚函数override&quot; class=&quot;headerlink&quot; title=&quot;有虚函数override&quot;&gt;&lt;/a&gt;有虚函数override&lt;/h2&gt;&lt;p&gt;如果有覆盖，那么被覆盖的虚函数被替换为子类中的函数，没有被覆盖的虚函数不变。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Derived : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Base &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived::a&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived::ad&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived::bd&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived::cd&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义一个&lt;code&gt;Base&lt;/code&gt;类指针，&lt;code&gt;Base* bd = new Derived()&lt;/code&gt;，&lt;code&gt;bd&lt;/code&gt;的vfptr下如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/cpp_virtual_function_derived_bd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图并未列出在&lt;code&gt;Derived&lt;/code&gt;定义的三个函数，查看&lt;code&gt;bd&lt;/code&gt;处内存，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/cpp_virtual_function_derived_bd_mem.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;前12 byte是前面列出的，接下来的12 byte就是&lt;code&gt;Derived::ad()&lt;/code&gt;、&lt;code&gt;Derived::bd()&lt;/code&gt;和&lt;code&gt;Derived::cd()&lt;/code&gt;，可以通过&lt;code&gt;((void(*)(void))*((int*)*(int*)bd + 3))()&lt;/code&gt;等调用。&lt;/p&gt;
&lt;h1 id=&quot;多重继承&quot;&gt;&lt;a href=&quot;#多重继承&quot; class=&quot;headerlink&quot; title=&quot;多重继承&quot;&gt;&lt;/a&gt;多重继承&lt;/h1&gt;&lt;h2 id=&quot;无虚函数override-1&quot;&gt;&lt;a href=&quot;#无虚函数override-1&quot; class=&quot;headerlink&quot; title=&quot;无虚函数override&quot;&gt;&lt;/a&gt;无虚函数override&lt;/h2&gt;&lt;p&gt;对于没有虚函数覆盖的多重继承，每个父类都有自己的虚函数表，按照声明顺序，子类的成员函数被放到了第一个父类的表中。&lt;/p&gt;
&lt;h2 id=&quot;有虚函数override-1&quot;&gt;&lt;a href=&quot;#有虚函数override-1&quot; class=&quot;headerlink&quot; title=&quot;有虚函数override&quot;&gt;&lt;/a&gt;有虚函数override&lt;/h2&gt;&lt;p&gt;如果有虚函数覆盖，那么每个父类虚函数表中被覆盖的虚函数被替换为子类的函数指针。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Base1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base1::a&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base1::b&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base1::c&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base1::d&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Base2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base2::a&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base2::b&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base2::c&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Base2::d&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Derived : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Base, &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Base1, &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Base2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived::a&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived::ad&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived::bd&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived::cd&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义一个&lt;code&gt;Base&lt;/code&gt;类指针，&lt;code&gt;Base* bd = new Derived()&lt;/code&gt;，&lt;code&gt;bd&lt;/code&gt;的vfptr下如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/cpp_virtual_function_multi_derived_bd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;三个vfptr可分别由&lt;code&gt;(int*)*(int*)bd&lt;/code&gt;、&lt;code&gt;(int*)*((int*)bd+1)&lt;/code&gt;和&lt;code&gt;(int*)*((int*)bd+2)&lt;/code&gt;得到，或者以数组的方式&lt;code&gt;(int*)(((int*)bd)[0])&lt;/code&gt;、…。&lt;/p&gt;
&lt;h1 id=&quot;访问non-public函数&quot;&gt;&lt;a href=&quot;#访问non-public函数&quot; class=&quot;headerlink&quot; title=&quot;访问non-public函数&quot;&gt;&lt;/a&gt;访问non-public函数&lt;/h1&gt;&lt;p&gt;只要有类中定义了虚函数，那么一定有虚函数表。通过指针访问虚函数表的方式，就算虚函数是non-public的，也能够访问到。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Derived1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived1::ad&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived1::bd&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Derived1::cd&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Derived1* bd1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Derived1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pf = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(*)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;))*((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)*(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)bd1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pf();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;编译环境&quot;&gt;&lt;a href=&quot;#编译环境&quot; class=&quot;headerlink&quot; title=&quot;编译环境&quot;&gt;&lt;/a&gt;编译环境&lt;/h1&gt;&lt;p&gt;Visual Studio 2015, platform x86。在Visual Studio 2015、platform x86下, &lt;code&gt;sizeof(int) = 4&lt;/code&gt;, &lt;code&gt;sizeof(int*) = 4&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果是x64，则&lt;code&gt;sizeof(int*) = 8&lt;/code&gt;，那么无论是在LP64（Linux常用）下，还是在LLP64（Windows）下，&lt;code&gt;(int*)(*(int*)(&amp;amp;b))&lt;/code&gt;并不能得到vftable中第一个函数的正确地址，解引用截断了高4 byte，把高4 byte的值作为&lt;code&gt;int&lt;/code&gt;。如果vftable的正确地址是&lt;code&gt;0x00007ff6 1f5aaf08&lt;/code&gt;，那么&lt;code&gt;(int*)(*(int*)(&amp;amp;b))&lt;/code&gt;得到的是&lt;code&gt;0x00000000 1f5aaf08&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;与此同时，不同的编译器对vfptr和vftable可能有不同的实现方式，上述访问方法不一定能够在其他编译器中使用。&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.viva64.com/en/t/0012/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Data model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://glgjing.github.io/blog/2015/01/03/c-plus-plus-xu-han-shu-qian-xi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++虚函数浅析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/haoel/article/details/1948051&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++ 虚表解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rudy-yuan.net/archives/128/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;对陈皓博客《C++虚函数解析》的补充&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      C++中有编译时多态和运行时多态，运行时多态是由虚函数实现的。虚函数是用过虚函数表（vftable，virtual function table）来实现的，这个表包含了这个类的虚函数地址，解决了继承、覆盖。当使用父类指针来操作一个子类对象的时候，通过子类对象的虚函数表指针（vfptr，virtual function table pointer）找到子类的vftable，进而找到应该调用的函数。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>CKDTree(3)</title>
    <link href="http://chaomai.github.io/2015/12/13/2015-2015-12-13-ckd-3/"/>
    <id>http://chaomai.github.io/2015/12/13/2015-2015-12-13-ckd-3/</id>
    <published>2015-12-13T06:19:05.000Z</published>
    <updated>2015-12-12T06:39:34.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Basic-Idea&quot;&gt;&lt;a href=&quot;#Basic-Idea&quot; class=&quot;headerlink&quot; title=&quot;Basic Idea&quot;&gt;&lt;/a&gt;Basic Idea&lt;/h1&gt;&lt;p&gt;使用的方法同样来自Trevor Brown。在他的论文，Range Queries in Non-blocking k-ary Search Trees中，阐述了如何实现range query。&lt;/p&gt;
&lt;p&gt;由于进行range query时，需要tree局部的一个constant view，因此snapshot是一个合适的工具。&lt;/p&gt;
&lt;p&gt;在update操作中，这里方法比先前的方法多了一个操作：每个leaf都带有一个&lt;code&gt;dirty&lt;/code&gt; field。每次进行update时，就把old leaf的&lt;code&gt;dirty&lt;/code&gt;设为dirty（实现的时候，是把update info放到&lt;code&gt;dirty&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;进行snapshot的时候，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把所有leaf都放到一个list，&lt;code&gt;snap&lt;/code&gt;里面，&lt;/li&gt;
&lt;li&gt;检测&lt;code&gt;snap&lt;/code&gt;中每个leaf的&lt;code&gt;dirty&lt;/code&gt;。如果发现&lt;code&gt;dirty&lt;/code&gt;已被设置为update info，那么就help update info，并重新开始snapshot。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Range Queries in Non-blocking k-ary Search Trees, Trevor Brown, Hillel Avni&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      这篇是实现concurrent KDTree snapshot的第3个方法，也是打算写的最后一个方法。使用的方法来自的Range Queries in Non-blocking k-ary Search Trees。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
      <category term="snapshot" scheme="http://chaomai.github.io/tags/snapshot/"/>
    
  </entry>
  
  <entry>
    <title>Notes of Range Queries in Non-Blocking K-Ary Search Trees</title>
    <link href="http://chaomai.github.io/2015/12/12/2015-2015-12-12-notes-of-k-ary-range-query/"/>
    <id>http://chaomai.github.io/2015/12/12/2015-2015-12-12-notes-of-k-ary-range-query/</id>
    <published>2015-12-12T06:20:46.000Z</published>
    <updated>2015-12-12T06:18:44.170Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Approaches-to-Range-Queries&quot;&gt;&lt;a href=&quot;#Approaches-to-Range-Queries&quot; class=&quot;headerlink&quot; title=&quot;Approaches to Range Queries&quot;&gt;&lt;/a&gt;Approaches to Range Queries&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;STM&lt;/li&gt;
&lt;li&gt;Lock&lt;/li&gt;
&lt;li&gt;Persistent data structures&lt;/li&gt;
&lt;li&gt;Snapshot&lt;ul&gt;
&lt;li&gt;Ctrie&lt;/li&gt;
&lt;li&gt;Snap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Range-Query-in-k-ary-Search-Trees&quot;&gt;&lt;a href=&quot;#Range-Query-in-k-ary-Search-Trees&quot; class=&quot;headerlink&quot; title=&quot;Range Query in k-ary Search Trees&quot;&gt;&lt;/a&gt;Range Query in k-ary Search Trees&lt;/h1&gt;&lt;h2 id=&quot;dirty-field&quot;&gt;&lt;a href=&quot;#dirty-field&quot; class=&quot;headerlink&quot; title=&quot;dirty field&quot;&gt;&lt;/a&gt;&lt;code&gt;dirty&lt;/code&gt; field&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;dirty&lt;/code&gt; field is set to dirty when the leaf is affected by some update operations (&lt;code&gt;helpInsert&lt;/code&gt; and &lt;code&gt;helpMark&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;Validate&quot;&gt;&lt;a href=&quot;#Validate&quot; class=&quot;headerlink&quot; title=&quot;Validate&quot;&gt;&lt;/a&gt;&lt;code&gt;Validate&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;Validate&lt;/code&gt; check all leaves stored in &lt;code&gt;snap&lt;/code&gt;. If any &lt;code&gt;dirty&lt;/code&gt; field is true, than &lt;code&gt;Validate&lt;/code&gt; returns false.&lt;/p&gt;
&lt;h2 id=&quot;Range-Query&quot;&gt;&lt;a href=&quot;#Range-Query&quot; class=&quot;headerlink&quot; title=&quot;Range Query&quot;&gt;&lt;/a&gt;Range Query&lt;/h2&gt;&lt;p&gt;The abridged &lt;code&gt;RangeQuery&lt;/code&gt; follows few steps,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use DFS to populate &lt;code&gt;snap&lt;/code&gt; with all leaves that may contain a key in range.&lt;/li&gt;
&lt;li&gt;Invoke &lt;code&gt;Validate&lt;/code&gt; to check all the leaves stored in &lt;code&gt;snap&lt;/code&gt;. If &lt;code&gt;Validate&lt;/code&gt; returns false, than retry.&lt;/li&gt;
&lt;li&gt;Extract all keys in range from &lt;code&gt;snap&lt;/code&gt; and return.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Differences-between-snaphots-in-BST-and-range-query-in-k-ary-search-trees&quot;&gt;&lt;a href=&quot;#Differences-between-snaphots-in-BST-and-range-query-in-k-ary-search-trees&quot; class=&quot;headerlink&quot; title=&quot;Differences between snaphots in BST and range query in k-ary search trees&quot;&gt;&lt;/a&gt;Differences between snaphots in BST and range query in k-ary search trees&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;snapshots in BST&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;range query in k-ary search trees&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Efficiency&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;low (iterate all nodes while checking)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;high&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;global&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;partial&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Just personal opinion, may contain errors.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;Some-Doubts&quot;&gt;&lt;a href=&quot;#Some-Doubts&quot; class=&quot;headerlink&quot; title=&quot;Some Doubts&quot;&gt;&lt;/a&gt;Some Doubts&lt;/h1&gt;&lt;h2 id=&quot;Theorem-3-in-Proof&quot;&gt;&lt;a href=&quot;#Theorem-3-in-Proof&quot; class=&quot;headerlink&quot; title=&quot;Theorem 3 in Proof&quot;&gt;&lt;/a&gt;Theorem 3 in Proof&lt;/h2&gt;&lt;p&gt;In the paper,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Theorem 3. All operations are non-blocking.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After discussing this with Keren, both of us feel it should be a bug.&lt;/p&gt;
&lt;p&gt;But actually it’s correct.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My question:&lt;br&gt;If the update operations are always exist (insertion and deletion are frequently invoked), than &lt;code&gt;RangeQuery&lt;/code&gt; cannot return. So the &lt;code&gt;RangeQuery&lt;/code&gt; is actually blocked by these update operations.&lt;/p&gt;
&lt;p&gt;Answer from Brown:&lt;br&gt;However, your intuition about range queries blocking is not quite correct. What you are referring to is &lt;strong&gt;starvation&lt;/strong&gt;. &lt;strong&gt;Starvation can happen in any algorithm that is not wait-free.&lt;/strong&gt; In order to be non-blocking, the algorithm simply needs to guarantee that, if operations are performed infinitely often, then operations will succeed infinitely often. (I.e., the system, as a whole, makes progress, even if some thread(s) starve.) Equivalently, a non-blocking progress guarantee simply states that it is impossible for /all/ threads to block forever. In your example, the fact that a range query is blocked by updates is not a problem, because the updates make progress.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Non-blocking k-ary Search Trees, Trevor Brown, Joanna Helga&lt;/li&gt;
&lt;li&gt;Range Queries in Non-blocking k-ary Search Trees, Trevor Brown, Hillel Avni&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      这篇是k-ary的第二篇，为k-ary加入了range query，列举了range query的各种实现方法：STM，lock，Persistent data structures和snapshots，并说明各种方法的优劣，提出了range query的新方法。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Notes of Non-Blocking K-Ary Search Trees</title>
    <link href="http://chaomai.github.io/2015/11/30/2015-2015-11-30-notes-of-k-ary/"/>
    <id>http://chaomai.github.io/2015/11/30/2015-2015-11-30-notes-of-k-ary/</id>
    <published>2015-11-30T07:09:25.000Z</published>
    <updated>2015-11-30T08:33:19.523Z</updated>
    
    <content type="html">&lt;h1 id=&quot;About-k-ary-Search-Trees&quot;&gt;&lt;a href=&quot;#About-k-ary-Search-Trees&quot; class=&quot;headerlink&quot; title=&quot;About k-ary Search Trees&quot;&gt;&lt;/a&gt;About k-ary Search Trees&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;No duplicate key&lt;/li&gt;
&lt;li&gt;Leaf-oriented k-ST&lt;/li&gt;
&lt;li&gt;Each leaf has zero children and at most k - 1 keys&lt;/li&gt;
&lt;li&gt;Each internal node has exactly k children and k − 1 keys (in increasing order)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Non-blocking k-ary Search Trees需要平衡，tree的深度和每个internal node进行search和update时的work总量。&lt;/p&gt;
&lt;p&gt;大的k–&amp;gt;减少tree的depth，但是增加了每个internal node进行search和update时的work总量。&lt;/p&gt;
&lt;p&gt;k = 4的时候，在高contention和低contention的情况下，性能都是最好的。&lt;br&gt;高contention时，较少的小k减少了update时影响到的key的数目，增加了并行度；低contention时，较少的depth加快了search，加快了update。&lt;/p&gt;
&lt;h1 id=&quot;From-BST-to-k-ary-Search-Trees&quot;&gt;&lt;a href=&quot;#From-BST-to-k-ary-Search-Trees&quot; class=&quot;headerlink&quot; title=&quot;From BST to k-ary Search Trees&quot;&gt;&lt;/a&gt;From BST to k-ary Search Trees&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Insert: the BST’s insertion -&amp;gt; sprouting insertion&lt;/li&gt;
&lt;li&gt;Delete: the  BST’s deletion -&amp;gt; pruning deletion&lt;/li&gt;
&lt;li&gt;Coordination: extended from BST&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Data-Structure&quot;&gt;&lt;a href=&quot;#Data-Structure&quot; class=&quot;headerlink&quot; title=&quot;Data Structure&quot;&gt;&lt;/a&gt;Data Structure&lt;/h1&gt;&lt;h2 id=&quot;Nodes&quot;&gt;&lt;a href=&quot;#Nodes&quot; class=&quot;headerlink&quot; title=&quot;Nodes&quot;&gt;&lt;/a&gt;Nodes&lt;/h2&gt;&lt;p&gt;Each &lt;strong&gt;leaf&lt;/strong&gt; has zero children and &lt;strong&gt;at most&lt;/strong&gt; k − 1 keys (zero keys is permitted). Each &lt;strong&gt;internal node&lt;/strong&gt; has exactly k children and k − 1 keys. Inside each node, keys are maintained in &lt;strong&gt;increasing order&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Dummy-Nodes&quot;&gt;&lt;a href=&quot;#Dummy-Nodes&quot; class=&quot;headerlink&quot; title=&quot;Dummy Nodes&quot;&gt;&lt;/a&gt;Dummy Nodes&lt;/h2&gt;&lt;p&gt;Dummy nodes are used in BST to avoid special cases when there is no parent or grandparent to flag and mark. The following pruning deletion operation will meet similar problem. When perform pruning deletion, the leaf may &lt;em&gt;won’t have a parent or grandparent&lt;/em&gt;. To avoid dealing with that, &lt;strong&gt;dummy nodes&lt;/strong&gt; and &lt;strong&gt;empty leaves&lt;/strong&gt; used again when initializing the tree.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/k-ary_dummy.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dummy nodes: each have k − 1 keys valued $\infty$.&lt;/li&gt;
&lt;li&gt;Empty leaves: 2k - 1 empty keys in total.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Sequential-Operations&quot;&gt;&lt;a href=&quot;#Sequential-Operations&quot; class=&quot;headerlink&quot; title=&quot;Sequential Operations&quot;&gt;&lt;/a&gt;Sequential Operations&lt;/h1&gt;&lt;h2 id=&quot;Insertion&quot;&gt;&lt;a href=&quot;#Insertion&quot; class=&quot;headerlink&quot; title=&quot;Insertion&quot;&gt;&lt;/a&gt;Insertion&lt;/h2&gt;&lt;p&gt;Search for the key first.&lt;/p&gt;
&lt;h3 id=&quot;Sprouting-Insertion&quot;&gt;&lt;a href=&quot;#Sprouting-Insertion&quot; class=&quot;headerlink&quot; title=&quot;Sprouting Insertion&quot;&gt;&lt;/a&gt;Sprouting Insertion&lt;/h3&gt;&lt;p&gt;If the leaf is full, replaces the leaf by a &lt;em&gt;newly created&lt;/em&gt; subtree.&lt;/p&gt;
&lt;p&gt;The newly created subtree:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The k - 1 greatest keys among the original k - 1 keys and the new key.&lt;/li&gt;
&lt;li&gt;The children are k (the original k - 1 keys and the new key) &lt;em&gt;new&lt;/em&gt; nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Simple-Insertion&quot;&gt;&lt;a href=&quot;#Simple-Insertion&quot; class=&quot;headerlink&quot; title=&quot;Simple Insertion&quot;&gt;&lt;/a&gt;Simple Insertion&lt;/h3&gt;&lt;p&gt;If the leaf is full, replaces the leaf by a &lt;em&gt;newly&lt;/em&gt; leaf with k keys (the original k - 1 keys and the new key).&lt;/p&gt;
&lt;h2 id=&quot;Deletion&quot;&gt;&lt;a href=&quot;#Deletion&quot; class=&quot;headerlink&quot; title=&quot;Deletion&quot;&gt;&lt;/a&gt;Deletion&lt;/h2&gt;&lt;p&gt;First search for the key.&lt;/p&gt;
&lt;h3 id=&quot;Pruning-Deletion&quot;&gt;&lt;a href=&quot;#Pruning-Deletion&quot; class=&quot;headerlink&quot; title=&quot;Pruning Deletion&quot;&gt;&lt;/a&gt;Pruning Deletion&lt;/h3&gt;&lt;p&gt;If the leaf has one key &lt;strong&gt;and&lt;/strong&gt; the parent of leaf has &lt;em&gt;exactly two non-empty children&lt;/em&gt;, replace the parent with the sibling of leaf.&lt;/p&gt;
&lt;h3 id=&quot;Simple-Deletion&quot;&gt;&lt;a href=&quot;#Simple-Deletion&quot; class=&quot;headerlink&quot; title=&quot;Simple Deletion&quot;&gt;&lt;/a&gt;Simple Deletion&lt;/h3&gt;&lt;p&gt;If the leaf has more than one key &lt;strong&gt;or&lt;/strong&gt; the parent of leaf has more than two non-empty children, replace the leaf by a &lt;em&gt;new&lt;/em&gt; leaf with key removed.&lt;/p&gt;
&lt;h1 id=&quot;Coordination&quot;&gt;&lt;a href=&quot;#Coordination&quot; class=&quot;headerlink&quot; title=&quot;Coordination&quot;&gt;&lt;/a&gt;Coordination&lt;/h1&gt;&lt;p&gt;Interleaved execution between concurrent updates in some particular order may cause problems (of cause).&lt;/p&gt;
&lt;p&gt;The Coordination is similar to BST, but here the scheme is extended.&lt;/p&gt;
&lt;p&gt;The following &lt;code&gt;UpdateStep&lt;/code&gt; (&lt;code&gt;ReplaceFlag&lt;/code&gt;, &lt;code&gt;PruneFlag&lt;/code&gt; and &lt;code&gt;Mark&lt;/code&gt;) objects is just like lock.&lt;/p&gt;
&lt;h2 id=&quot;ReplaceFlag&quot;&gt;&lt;a href=&quot;#ReplaceFlag&quot; class=&quot;headerlink&quot; title=&quot;ReplaceFlag&quot;&gt;&lt;/a&gt;ReplaceFlag&lt;/h2&gt;&lt;p&gt;For both types of insertion and simple deletion.&lt;/p&gt;
&lt;h2 id=&quot;PruneFlag&quot;&gt;&lt;a href=&quot;#PruneFlag&quot; class=&quot;headerlink&quot; title=&quot;PruneFlag&quot;&gt;&lt;/a&gt;PruneFlag&lt;/h2&gt;&lt;p&gt;For pruning deletion.&lt;/p&gt;
&lt;h2 id=&quot;Mark&quot;&gt;&lt;a href=&quot;#Mark&quot; class=&quot;headerlink&quot; title=&quot;Mark&quot;&gt;&lt;/a&gt;Mark&lt;/h2&gt;&lt;p&gt;Before an internal node is to disappear from the tree, it must ﬁrst be marked. Once a internal node is marked, its child pointer will never be changed.&lt;/p&gt;
&lt;h2 id=&quot;Clean&quot;&gt;&lt;a href=&quot;#Clean&quot; class=&quot;headerlink&quot; title=&quot;Clean&quot;&gt;&lt;/a&gt;Clean&lt;/h2&gt;&lt;p&gt;Initial stat of the &lt;code&gt;pending&lt;/code&gt; filed in internal node.&lt;/p&gt;
&lt;h1 id=&quot;Help-Mechanism&quot;&gt;&lt;a href=&quot;#Help-Mechanism&quot; class=&quot;headerlink&quot; title=&quot;Help Mechanism&quot;&gt;&lt;/a&gt;Help Mechanism&lt;/h1&gt;&lt;p&gt;If an operation is unexpectedly delayed while holding access to a ﬂagged or marked node, the progress cannot be guaranteed. So helping mechanism is necessary. The method taken here is similar to the one in BST.&lt;/p&gt;
&lt;p&gt;But the helping &lt;strong&gt;should not be abused&lt;/strong&gt;. To avoid many &lt;em&gt;duplicate operation&lt;/em&gt;, the helping is used in limited cases.&lt;/p&gt;
&lt;h1 id=&quot;On-The-Whole&quot;&gt;&lt;a href=&quot;#On-The-Whole&quot; class=&quot;headerlink&quot; title=&quot;On The Whole&quot;&gt;&lt;/a&gt;On The Whole&lt;/h1&gt;&lt;p&gt;Just for clear the thought.&lt;/p&gt;
&lt;p&gt;The following picture isn’t presented in the paper. Because the idea in the paper is similar to BST. So it easy to imitate the original one in BST.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/k-ary_states.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ReplaceFlag&lt;/code&gt; is used in simple insertion, sprouting insertion and simple deletion. So the original notations, &lt;code&gt;ichild ...&lt;/code&gt;, &lt;code&gt;dchild ...&lt;/code&gt;, etc won’t apply.&lt;/p&gt;
&lt;h1 id=&quot;Differences-between-BST-and-k-ary-Search-Trees&quot;&gt;&lt;a href=&quot;#Differences-between-BST-and-k-ary-Search-Trees&quot; class=&quot;headerlink&quot; title=&quot;Differences between BST and k-ary Search Trees&quot;&gt;&lt;/a&gt;Differences between BST and k-ary Search Trees&lt;/h1&gt;&lt;h2 id=&quot;Deletion-1&quot;&gt;&lt;a href=&quot;#Deletion-1&quot; class=&quot;headerlink&quot; title=&quot;Deletion&quot;&gt;&lt;/a&gt;Deletion&lt;/h2&gt;&lt;p&gt;There two types of deletion in k-ary Search Trees. And a particular interleave of insertion and deletion would result in key lost.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/k-ary_deletion.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Suppose there are some nodes in k-ary search tree (see above figure) and two threads concurrently perform update.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread ti: insert d at b (the order doesn’t mater)&lt;/li&gt;
&lt;li&gt;Thread td: delete b&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following operation sequence is executed (direction of child isn’t mentioned, but it should be fairly easy to see),&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;td: &lt;code&gt;PruneFlag&lt;/code&gt; gp&lt;/li&gt;
&lt;li&gt;ti: &lt;code&gt;ReplaceFlag&lt;/code&gt; p&lt;br&gt;from now on, the p won’t be marked by td until ti finished.&lt;/li&gt;
&lt;li&gt;ti: Finish insertion and &lt;code&gt;Clean&lt;/code&gt; p&lt;/li&gt;
&lt;li&gt;td: Mark p&lt;/li&gt;
&lt;li&gt;td: Change the pointer in gp to s&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Consequence:&lt;/strong&gt; Insertion of key, d is lost. :(&lt;/p&gt;
&lt;p&gt;The problem is that pruning deletion changes the child of gp to the child of p without knowing the modification in the another child of p.&lt;/p&gt;
&lt;p&gt;Above problem won’t happen in BST’s deletion, &lt;em&gt;since the new node (internal node or leaf) is always built from scratch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So the &lt;code&gt;pending&lt;/code&gt; of p must be read before &lt;code&gt;PruneFlag&lt;/code&gt; set at gp and checked when performing mark cas. If any insertion occurred, the &lt;code&gt;pending&lt;/code&gt; of p will be bound to changed and deletion will perform backtracking cas and restart.&lt;/p&gt;
&lt;p&gt;BTY: In BST and k-ary search tree, the &lt;code&gt;pending&lt;/code&gt; of p is already  read by the end of search and the above prerequisites in implementation is &lt;strong&gt;already done&lt;/strong&gt;. &lt;em&gt;But it has special purpose and meaning here.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;Some-Doubts&quot;&gt;&lt;a href=&quot;#Some-Doubts&quot; class=&quot;headerlink&quot; title=&quot;Some Doubts&quot;&gt;&lt;/a&gt;Some Doubts&lt;/h1&gt;&lt;h2 id=&quot;CAS-and-CASet&quot;&gt;&lt;a href=&quot;#CAS-and-CASet&quot; class=&quot;headerlink&quot; title=&quot;CAS and CASet&quot;&gt;&lt;/a&gt;CAS and CASet&lt;/h2&gt;&lt;p&gt;In k-ary search trees, CASet (compare-and-set) is used to implement CAS.But the prerequisites is the algorithm doesn’t suffer from the ABA problem.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x.CAS(expect, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  result = read(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (result != expect) return result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (x.CASet(expect, value)) return expect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return read(x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The reason why these algorithms doesn’t suffer from ABA problem is quite clear for me. But what does the prerequisites (doesn’t suffer from the ABA) for?&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Non-blocking k-ary Search Trees, Trevor Brown, Joanna Helga&lt;/li&gt;
&lt;li&gt;Non-blocking Binary Search Trees, Faith Ellen, Panagiota Fatourou, Eric Ruppert, Franck van Breugel&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      Brown在Toronto大学读PhD期间写过2篇关于k-ary的文章，他读PhD期间的导师是Ellen，而Ellen正是写了Non-blocking Binary Search Trees的那位。这篇文章里看到了好几个methods或者ideas是extended from Non-blocking Binary Search Trees。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>CKDTree (2)</title>
    <link href="http://chaomai.github.io/2015/11/24/2015-2015-11-24-ckd-2/"/>
    <id>http://chaomai.github.io/2015/11/24/2015-2015-11-24-ckd-2/</id>
    <published>2015-11-24T07:17:25.000Z</published>
    <updated>2015-12-12T06:38:18.413Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Basic-Idea&quot;&gt;&lt;a href=&quot;#Basic-Idea&quot; class=&quot;headerlink&quot; title=&quot;Basic Idea&quot;&gt;&lt;/a&gt;Basic Idea&lt;/h1&gt;&lt;p&gt;这里使用的方法是Trevor Brown的non-blocking binary search tree的&lt;a href=&quot;http://www.cs.utoronto.ca/~tabrown/ksts/StaticDictionary5.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实现&lt;/a&gt;里面提到的，并没有在论文里说明。&lt;/p&gt;
&lt;p&gt;基本思想非常简单，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取并保存所有node；&lt;/li&gt;
&lt;li&gt;接着检查已保存的node与当前tree里的node是否都一样，发现不一样的，重新snapshot；&lt;/li&gt;
&lt;li&gt;基于已保存的node，构建一棵新的tree，返回snapshot。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里的snapshot和上一篇中的就有很大不同。上一篇的snapshot基本上可以算作是在调用&lt;code&gt;snapshot()&lt;/code&gt;的时候，tree的状态（特殊情况下需要retry）；而这里的必须保证，从第1步完成读取的时刻起，到第2步检查结束，都没有update发生，才能返回snapshot。&lt;/p&gt;
&lt;p&gt;要注意的是，在第1和2步中，需要保存和检查所有的node（internal node和leaf）。这不同于使用GCAS的snapshot，只update internal node，在某些时刻，某些leaf实际上是共享的。&lt;/p&gt;
&lt;h1 id=&quot;size-in-Snapshot&quot;&gt;&lt;a href=&quot;#size-in-Snapshot&quot; class=&quot;headerlink&quot; title=&quot;size in Snapshot&quot;&gt;&lt;/a&gt;&lt;code&gt;size&lt;/code&gt; in Snapshot&lt;/h1&gt;&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.utoronto.ca/~tabrown/ksts/StaticDictionary5.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cs.utoronto.ca/~tabrown/ksts/StaticDictionary5.java&lt;/a&gt;, Trevor Brown&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      这篇记录了另一种简单的方法来实现concurrent KDTree snapshot，当然简单是有代价的，那就是在snapshot的时候不允许并发的update（inset，delete）。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
      <category term="snapshot" scheme="http://chaomai.github.io/tags/snapshot/"/>
    
  </entry>
  
  <entry>
    <title>CKDTree (1)</title>
    <link href="http://chaomai.github.io/2015/11/20/2015-2015-11-20-ckd-1/"/>
    <id>http://chaomai.github.io/2015/11/20/2015-2015-11-20-ckd-1/</id>
    <published>2015-11-20T07:55:08.000Z</published>
    <updated>2015-11-20T08:01:47.646Z</updated>
    
    <content type="html">&lt;p&gt;Concurrent KDTree with Snapshots, implemented in Java. This article is about some details in implementation.&lt;/p&gt;
&lt;h1 id=&quot;Basic-Idea&quot;&gt;&lt;a href=&quot;#Basic-Idea&quot; class=&quot;headerlink&quot; title=&quot;Basic Idea&quot;&gt;&lt;/a&gt;Basic Idea&lt;/h1&gt;&lt;p&gt;The methods used in this structure is heavily based on ideas in CTrie (snapshot) and Non-blocking Binary Search Trees (search, insert and delete).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDCSS&lt;/li&gt;
&lt;li&gt;GCAS&lt;/li&gt;
&lt;li&gt;Mark and Flag&lt;/li&gt;
&lt;li&gt;Leaf-oriented tree&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Problems-and-Solutions-in-Implementation&quot;&gt;&lt;a href=&quot;#Problems-and-Solutions-in-Implementation&quot; class=&quot;headerlink&quot; title=&quot;Problems and Solutions in Implementation&quot;&gt;&lt;/a&gt;Problems and Solutions in Implementation&lt;/h1&gt;&lt;p&gt;下面是实现的时候遇到的问题和自己对一些细节的思考，有的已经在两篇论文里面有所记录，但是自己没注意，又踩坑了，还有的是这个结构的设计隐含的问题。&lt;/p&gt;
&lt;h2 id=&quot;Dummy-Nodes&quot;&gt;&lt;a href=&quot;#Dummy-Nodes&quot; class=&quot;headerlink&quot; title=&quot;Dummy Nodes&quot;&gt;&lt;/a&gt;Dummy Nodes&lt;/h2&gt;&lt;p&gt;由于Non-blocking Binary Search Trees中的insert操作是需要mark parent的，因此，对于一棵空的tree（有一个root），parent并不存在，insert无法适用于这样的情况。delete也有类似的问题。&lt;/p&gt;
&lt;p&gt;为了避免结点数目很少的时候需要考虑很多复杂的情况，Non-blocking Binary Search Trees里提到了使用两个key为$\infty_1$，$\infty_2$（其中$\infty_1 &amp;lt; \infty_2$）的Dummy nodes，$\infty_1 &amp;lt; \infty_2$这样的关系是为了保证Binary Search Trees的性质。&lt;/p&gt;
&lt;p&gt;由于Java中，无法使用&lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;来得到两个key，使得$\infty_1 &amp;lt; \infty_2$，所以就干脆不管他们的关系，root的左右child都使用&lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;作为key。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/ckd1_2015%2011%2018%2016%2042%20Office%20Lens.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样一来，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只有在insert第一个key或者delete最后一个key的时候需要操作leaf dummy node。&lt;/li&gt;
&lt;li&gt;除（1）以外，所有update都发生在上图三角形的sub tree里面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Right-Child-of-Root&quot;&gt;&lt;a href=&quot;#Right-Child-of-Root&quot; class=&quot;headerlink&quot; title=&quot;Right Child of Root&quot;&gt;&lt;/a&gt;Right Child of Root&lt;/h2&gt;&lt;p&gt;既然没有key会进入root的right child，那么为什么不把root的right child设置为&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不行，这个也是在写后续代码的时候发现的。进行&lt;code&gt;helpMark1&lt;/code&gt;和&lt;code&gt;helpMark2&lt;/code&gt;的时候，需要判断&lt;code&gt;GCAS&lt;/code&gt;处理grand parent哪边的child，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (info.p == info.gp.GCAS_READ_LEFT_CHILD(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  direction = Direction.LEFT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  direction = Direction.RIGHT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要delete的leaf是children of the left child of root，也就是说此时tree里面只有一个key。存在这么一种可能性，同时有多个thread来进行delete，其中一个thread已经成功进行了delete，其他某些的thread还没有执行上述代码。当开始执行以后，就会发现&lt;code&gt;p&lt;/code&gt;不等于&lt;code&gt;gp&lt;/code&gt;（即root）的left child，此时如果root的right为&lt;code&gt;null&lt;/code&gt;，那么就会出错。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;helpMark1&lt;/code&gt;和&lt;code&gt;helpMark2&lt;/code&gt;都包含上述操作，只是仅仅&lt;code&gt;helpMark1&lt;/code&gt;才会触发问题。&lt;/p&gt;
&lt;h2 id=&quot;Type-Test-in-helpMarked1&quot;&gt;&lt;a href=&quot;#Type-Test-in-helpMarked1&quot; class=&quot;headerlink&quot; title=&quot;Type Test in helpMarked1&quot;&gt;&lt;/a&gt;Type Test in &lt;code&gt;helpMarked1&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;当要delete的leaf，它的sibling是leaf时，&lt;code&gt;helpMarked1&lt;/code&gt;来处理这种的情况。&lt;/p&gt;
&lt;p&gt;在single thread的情况下，&lt;code&gt;helpDelete&lt;/code&gt;在判断sibling的类型以后，如果是leaf，那么&lt;code&gt;helpMarked1&lt;/code&gt;就会执行。&lt;/p&gt;
&lt;p&gt;在multithread的情况下，某个thread看到update信息以后就直接执行&lt;code&gt;helpMarked1&lt;/code&gt;，但是此时sibling的类型是不知道的。因为从update信息被发布，到&lt;code&gt;helpMarked1&lt;/code&gt;被执行，sibling可能早就被其他thread改变了，如果变为internal node，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Leaf&amp;lt;V&amp;gt; ns = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Leaf&amp;lt;&amp;gt;(sibling.key, ((Leaf&amp;lt;V&amp;gt;) sibling).value);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么上述代码就会报错。&lt;/p&gt;
&lt;h2 id=&quot;Mark-in-helpDelete&quot;&gt;&lt;a href=&quot;#Mark-in-helpDelete&quot; class=&quot;headerlink&quot; title=&quot;Mark in helpDelete&quot;&gt;&lt;/a&gt;Mark in &lt;code&gt;helpDelete&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Non-blocking Binary Search Trees提到marked的结点是不可更改的，实现的时候没有很在意，测试的时候就遇到了麻烦。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;helpDelete&lt;/code&gt;（1）首先mark parent，（2）read leaf的sibling，（3）根据sibling的类型来进行后续的操作。&lt;/p&gt;
&lt;p&gt;（1）和（2）的顺序是不能改的，这也是mark的意义所在。mark以后，&lt;code&gt;helpMarked1&lt;/code&gt;和&lt;code&gt;helpMarked2&lt;/code&gt;中还会再次读取sibling，并用于构造新的node，然后&lt;code&gt;GCAS&lt;/code&gt; grand parent的child。如果不能保证&lt;code&gt;helpDelete&lt;/code&gt;中leaf的sibling在后续的操作中不变，那么构造出的新node很可能就是错的。&lt;/p&gt;
&lt;h2 id=&quot;startGen-in-searchKey&quot;&gt;&lt;a href=&quot;#startGen-in-searchKey&quot; class=&quot;headerlink&quot; title=&quot;startGen in searchKey&quot;&gt;&lt;/a&gt;&lt;code&gt;startGen&lt;/code&gt; in &lt;code&gt;searchKey&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;这个结构使用了Ctrie里GCAS的idea，在search的时候来update从root到leaf的path。search使用的version number是在开始进行search前从root里read的。为什么不到每个node的时候就read一次version number？&lt;/p&gt;
&lt;p&gt;因为如果在search到某个内部的结点的时候，执行了snapshot操作，那么root的version number就变了。此时search中read root的version number，就会造成path的错误更新，上半部分是老的version number，下面有一条新的version number的分支。&lt;/p&gt;
&lt;h2 id=&quot;Retry-after-GCAS-in-searchKey&quot;&gt;&lt;a href=&quot;#Retry-after-GCAS-in-searchKey&quot; class=&quot;headerlink&quot; title=&quot;Retry after GCAS in searchKey&quot;&gt;&lt;/a&gt;Retry after &lt;code&gt;GCAS&lt;/code&gt; in &lt;code&gt;searchKey&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;searchKey&lt;/code&gt;中，如果发现要前往的branch是internal node，并且version低于&lt;code&gt;startGen&lt;/code&gt;，那么就需要创建那个internal node新版本的copy，然后把cur node的branch设置为那个新版的node。&lt;/p&gt;
&lt;p&gt;接下来，首先想到的是在cur node处重试（即下面代码里的&lt;code&gt;continue;&lt;/code&gt;），但是如果&lt;code&gt;continue&lt;/code&gt;了，那么&lt;code&gt;gp&lt;/code&gt;，&lt;code&gt;gpupdate&lt;/code&gt;和&lt;code&gt;depth&lt;/code&gt;就会被“提前”更新（cur没有往下走，它们却被更新了），尤其是&lt;code&gt;depth&lt;/code&gt;，可能被重复的加上了&lt;code&gt;p&lt;/code&gt;的&lt;code&gt;skippedDepth&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (cur &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; InternalNode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gpupdate = pupdate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  depth += p.skippedDepth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (keyCompare(key, cur.key, depth++) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (left &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; InternalNode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (left.gen != startGen) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; SearchRes.RESTART;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// continue;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效率低些，但是更为稳妥的办法就是完全重新开始，&lt;code&gt;return SearchRes.RESTART;&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;RDCSS&quot;&gt;&lt;a href=&quot;#RDCSS&quot; class=&quot;headerlink&quot; title=&quot;RDCSS&quot;&gt;&lt;/a&gt;RDCSS&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/ckd1_2015%2011%2019%2016%2026%20Office%20Lens.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;size-in-Snapshot&quot;&gt;&lt;a href=&quot;#size-in-Snapshot&quot; class=&quot;headerlink&quot; title=&quot;size in Snapshot&quot;&gt;&lt;/a&gt;&lt;code&gt;size&lt;/code&gt; in Snapshot&lt;/h2&gt;&lt;p&gt;未解决。&lt;/p&gt;
&lt;h2 id=&quot;Readonly-Iterator&quot;&gt;&lt;a href=&quot;#Readonly-Iterator&quot; class=&quot;headerlink&quot; title=&quot;Readonly Iterator&quot;&gt;&lt;/a&gt;Readonly Iterator&lt;/h2&gt;&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Concurrent Tries with Efficient Non-Blocking Snapshots, Aleksandar Prokopec, Nathan G. Bronson, Phil Bagwell, Martin Odersky&lt;/li&gt;
&lt;li&gt;Non-blocking Binary Search Trees, Faith Ellen, Panagiota Fatourou, Eric Ruppert, Franck van Breugel&lt;/li&gt;
&lt;li&gt;A Practical Multi-Word Compare-and-Swap Operation, Timothy L. Harris, Keir Fraser, Ian A. Pratt&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      Concurrent KDTree with Snapshots, implemented in Java. This article is about some details in implementation.
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
      <category term="snapshot" scheme="http://chaomai.github.io/tags/snapshot/"/>
    
  </entry>
  
  <entry>
    <title>RDCSS</title>
    <link href="http://chaomai.github.io/2015/10/23/2015-2015-10-23-rdcss/"/>
    <id>http://chaomai.github.io/2015/10/23/2015-2015-10-23-rdcss/</id>
    <published>2015-10-23T13:42:51.000Z</published>
    <updated>2015-11-30T07:51:58.816Z</updated>
    
    <content type="html">&lt;p&gt;RDCSS是Harris提出的一种实现double compare single swap方法，它的语义（也就是DCAS）如下，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/rdcss_semantic.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;The-CAS1-Approach&quot;&gt;&lt;a href=&quot;#The-CAS1-Approach&quot; class=&quot;headerlink&quot; title=&quot;The CAS1 Approach&quot;&gt;&lt;/a&gt;The CAS1 Approach&lt;/h1&gt;&lt;p&gt;下面使用CAS1（single word compare and swap）来实现RDCSS。&lt;/p&gt;
&lt;p&gt;这是descriptor和两个data section的示意图，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/rdcss_descriptor.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是RDCSS的伪代码，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/rdcss_implementation.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;C1：&lt;/strong&gt;首先尝试把a2变为descriptor d，如果CAS1成功，那么r == d-&amp;gt;o2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;H1：&lt;/strong&gt;这步主要是针对C1失败的。如果C1成功，r不是descriptor。如果C1失败，有两种原因（其实是一种，只是分开看），（1）a2的数据被其他thread改为其他的数据，（2）a2被其他thread改为descriptor，那就帮助其他thread完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;B1：&lt;/strong&gt;如果是H1（2），那么帮助其他thread完成以后，retry。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;if(r == d-&amp;gt;o2) Complete&lt;/code&gt;：&lt;/strong&gt;这步是针对C1成功的。如果C1成功，继续执行。&lt;br&gt;&lt;em&gt;在&lt;a href=&quot;http://cstheory.stackexchange.com/questions/7083/a-practical-multi-word-compare-and-swap-operation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A practical multi-word compare-and-swap operation - cstheory&lt;/a&gt;里，axel22大神问这步能不能在不改变RDCSS语义的情况下省略。回答是，如果省略**RDCSS的这个部分`if(… &amp;amp;&amp;amp; (&lt;/em&gt;a1 == o1)) &lt;em&gt;a2=n2`就不会执行**。或者运气好的话，其他thread帮助当前thread完成。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;return r&lt;/code&gt;：&lt;/strong&gt;返回a2里老的value，包括执行成功的情况和H1（1）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;C2的if进行比较以后，会不会有其他thread改变o1？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里是一直没有想明白的。在看了Ctrie的代码以后，发现在做snapshot的时候，里面的root，mainnode和这里的Data section，Control section是对应的。要是这里存在这个问题，那么Ctrie里也存在（会不会有其他thread改变root里mainnode的reference）。&lt;/p&gt;
&lt;p&gt;从Ctrie的角度来看，只要有thread在执行&lt;code&gt;RDCSS_Complete&lt;/code&gt;，那么root一定是&lt;code&gt;RDCSS_Descriptor&lt;/code&gt;。而任何thread想要更改root里mainnode，就必须首先read root。所以mainnode不会在某个thread正执行&lt;code&gt;RDCSS_Complete&lt;/code&gt;的时候被改变。&lt;br&gt;（在上一篇，Notes of Non-Blocking Snapshots Concurrent Tries的&lt;strong&gt;A detail in &lt;code&gt;RDCSS_Complete&lt;/code&gt;&lt;/strong&gt;部分，有详细的解释。）&lt;/p&gt;
&lt;p&gt;再回过头来看这里的RDCSS，这里的Data section会不会相当于就是一个guard，要更改Control section，就必须首先read Data section。这样，在某个thread执行&lt;code&gt;RDCSS_Complete&lt;/code&gt;的时候，其他thread直接去改变o1就是不可能的。（没有在这篇论文里面找到相关的说明，这里只是自己的理解。）&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;A Practical Multi-Word Compare-and-Swap Operation, Timothy L. Harris, Keir Fraser, Ian A. Pratt&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cstheory.stackexchange.com/questions/7083/a-practical-multi-word-compare-and-swap-operation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A practical multi-word compare-and-swap operationn - cstheory&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      RDCSS是Harris提出的一种实现double compare single swap方法，使用了single word compare and swap来实现。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
      <category term="dcas" scheme="http://chaomai.github.io/tags/dcas/"/>
    
  </entry>
  
  <entry>
    <title>Notes of Non-Blocking Snapshots Concurrent Tries</title>
    <link href="http://chaomai.github.io/2015/10/22/2015-2015-10-22-notes-of-non-blocking-snapshots-concurrent-tries/"/>
    <id>http://chaomai.github.io/2015/10/22/2015-2015-10-22-notes-of-non-blocking-snapshots-concurrent-tries/</id>
    <published>2015-10-22T14:15:12.000Z</published>
    <updated>2015-11-30T07:51:54.093Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Hash-tries&quot;&gt;&lt;a href=&quot;#Hash-tries&quot; class=&quot;headerlink&quot; title=&quot;Hash tries&quot;&gt;&lt;/a&gt;Hash tries&lt;/h1&gt;&lt;p&gt;Hash tries (Hash array mapped tries) are trees composed of internal nodes and leaves. Leaves store key-value bindings.&lt;/p&gt;
&lt;h1 id=&quot;Race&quot;&gt;&lt;a href=&quot;#Race&quot; class=&quot;headerlink&quot; title=&quot;Race&quot;&gt;&lt;/a&gt;Race&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/ctrie_conflict.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;T1要插入k5到C2，与此同时T2要插入k4到C1。T1成功的进行了CAS，但是T2进行的CAS操作是在老的C2上，最后导致k4丢失。&lt;/p&gt;
&lt;p&gt;这里的race类似于Non-blocking Binary Search Trees的情况，两个线程各自进行操作，就线程自己来看，所做的操作是正确的，但是相互不知道有race。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这个结构能否使用Non-blocking Binary Search Trees的方法（mark和flag）？&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;&lt;p&gt;引入各种中间结点。。。&lt;/p&gt;
&lt;h1 id=&quot;Snapshot&quot;&gt;&lt;a href=&quot;#Snapshot&quot; class=&quot;headerlink&quot; title=&quot;Snapshot&quot;&gt;&lt;/a&gt;Snapshot&lt;/h1&gt;&lt;p&gt;&lt;code&gt;size&lt;/code&gt;、&lt;code&gt;iterator&lt;/code&gt;和&lt;code&gt;clear&lt;/code&gt;不能简单的以lock-free的方式来实现，因为需要某一时刻的全局信息。基于atomic snapshot，这些操作可以高效和正确的得到结果。&lt;/p&gt;
&lt;p&gt;当一个snapshot被创建时，root I-node被复制，并被设置为新的generation。这个generation count可以由每个I-node保存。当某些update操作检测到它gen比root老，它就创建带有最新gen的那个I-node的copy，并根据需要update parent。snapshot创建后最终的效果就是，当首次访问（update）那个leaf的时候，从root到leaf，整个path都被update。&lt;/p&gt;
&lt;p&gt;这里用到的snapshot方法，我觉得本质上还是copy on write。&lt;/p&gt;
&lt;h2 id=&quot;Race-1&quot;&gt;&lt;a href=&quot;#Race-1&quot; class=&quot;headerlink&quot; title=&quot;Race&quot;&gt;&lt;/a&gt;Race&lt;/h2&gt;&lt;p&gt;创建snapshot的线程、读取了老的root且正在遍历并update的线程之间（插入操作的linearization point可能会先于snapshot的创建）。&lt;/p&gt;
&lt;h2 id=&quot;GCAS-generation-compare-and-swap&quot;&gt;&lt;a href=&quot;#GCAS-generation-compare-and-swap&quot; class=&quot;headerlink&quot; title=&quot;GCAS (generation-compare-and-swap)&quot;&gt;&lt;/a&gt;GCAS (generation-compare-and-swap)&lt;/h2&gt;&lt;p&gt;直接用CAS在这里并不可行，因为有gen，就需要同时比较新老数据，还有I-node和root的gen。&lt;/p&gt;
&lt;p&gt;GCAS类似CAS，不同的地方是加入了I-node和root结点gen的比较。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GCAS&lt;/span&gt;&lt;/span&gt;(in, old, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r = &lt;span class=&quot;type&quot;&gt;READ&lt;/span&gt;(in.main)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; r = old &amp;amp;&amp;amp; in.gen = &lt;span class=&quot;type&quot;&gt;READ&lt;/span&gt;(root).gen &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;type&quot;&gt;WRITE&lt;/span&gt;(in.main. n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体的操作是先不管gen的情况，把old Main node挂到new Main node的prev上，接着把new Main node挂到I-node，最后处理I-node下Main node的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/ctrie_gcas.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;现在的问题是怎么update从root到leaf的path？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当遍历时遇到一个I-node，如果gen &amp;lt; startgen，那么就创建它的C-node和这个C-node下面所有I-node的copy，这个C-node下面其他类型的node（S-node）不copy。这样就update了从root到leaf的path。&lt;/p&gt;
&lt;h2 id=&quot;RDCSS&quot;&gt;&lt;a href=&quot;#RDCSS&quot; class=&quot;headerlink&quot; title=&quot;RDCSS&quot;&gt;&lt;/a&gt;RDCSS&lt;/h2&gt;&lt;p&gt;&lt;em&gt;问题又来了，其他I-node可以被创建copy，但是第一个I-node，即root，它并没有在C-node下面，如何创建新gen的root？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;直接创建新gen root的copy，然后cas挂上去，这个方法并不好完成。因为只有当root和old I-node一致，且old I-node的main和old main一致（因为原文代码165行的地方，需要old main来构建新的I-node）时才行。&lt;/p&gt;
&lt;p&gt;这里使用的RDCSS源自Harris提出的方法，类似GCAS。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RDCSS&lt;/span&gt;&lt;/span&gt;(ov, ovmain, nv)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r = &lt;span class=&quot;type&quot;&gt;READ&lt;/span&gt;(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; r = ov &amp;amp;&amp;amp; &lt;span class=&quot;type&quot;&gt;GCAS_READ&lt;/span&gt;(ov.main) = ovmain &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;type&quot;&gt;WRITE&lt;/span&gt;(root, nv)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要注意的是：如果两个线程，一个GCAS对root I-node进行操作，另一个RDCSS对Ctrie的root成员进行操作，那么回导致死锁（&lt;strong&gt;为什么？与RDCSS中&lt;/strong&gt;（&lt;em&gt;C2的if进行比较以后，会不会有其他thread改变o1？&lt;/em&gt;）&lt;strong&gt;这个问题有关？&lt;/strong&gt;)。&lt;/p&gt;
&lt;p&gt;因此引入了ABORTABLE_READ。&lt;/p&gt;
&lt;h3 id=&quot;A-detail-in-RDCSS-Complete&quot;&gt;&lt;a href=&quot;#A-detail-in-RDCSS-Complete&quot; class=&quot;headerlink&quot; title=&quot;A detail in RDCSS_Complete&quot;&gt;&lt;/a&gt;A detail in &lt;code&gt;RDCSS_Complete&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在阅读源码的时候，想到这么一个问题，&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; oldmain = ov.gcasRead(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (oldmain eq exp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;CAS_ROOT&lt;/span&gt;(desc, nv)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;My previous doubt lies in line 711. The &lt;code&gt;oldmain&lt;/code&gt; is compared with &lt;code&gt;expectedmain&lt;/code&gt;. If they are reference to same main node, then do &lt;code&gt;CAS_ROOT&lt;/code&gt;.&lt;br&gt;Suppose thread A is executing &lt;code&gt;RDCSS_Complete&lt;/code&gt; and just finished line 710. Thread B is inserting a key value pair at the mainnode of root. What if thread B changes the &lt;code&gt;MainNode&lt;/code&gt; reference in the root into a new mainnode before thread A execute &lt;code&gt;CAS_ROOT&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;The doubt is unnecessary. Since thread A is executing &lt;code&gt;RDCSS_Complete&lt;/code&gt;, the root must be &lt;code&gt;RDCSS_Descriptor&lt;/code&gt;. If Thread B want to insert at the &lt;code&gt;MainNode&lt;/code&gt; of root, it will read root first, find it’s &lt;code&gt;RDCSS_Descriptor&lt;/code&gt; and call &lt;code&gt;RDCSS_Complete&lt;/code&gt; to help thread A first. So Thread B can’t change the &lt;code&gt;MainNode&lt;/code&gt; reference in the root directly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（与Aleksandar Prokopec邮件的内容，就是问题和自己的理解，这里只是做个整理，不翻译了，其实是懒。。。）&lt;/p&gt;
&lt;h2 id=&quot;Snashot&quot;&gt;&lt;a href=&quot;#Snashot&quot; class=&quot;headerlink&quot; title=&quot;Snashot&quot;&gt;&lt;/a&gt;Snashot&lt;/h2&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snapshot&lt;/span&gt;&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r = &lt;span class=&quot;type&quot;&gt;RDCSS_READ&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	expmain = &lt;span class=&quot;type&quot;&gt;GCAS_READ&lt;/span&gt;(r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;RDCSS&lt;/span&gt;(r, expmain, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;INode&lt;/span&gt;(expmain, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Gen&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Ctrie&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			root = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;INode&lt;/span&gt;(expmain, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Gen&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			readonly = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; snapshot()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;snapshot()&lt;/code&gt;以后，实际上是产生了两个新的root I-node，其中一个替换Ctrie自己的root，另一个用于构成返回Ctrie，这个返回的Ctrie就是所需的snapshot。&lt;/p&gt;
&lt;p&gt;从上面伪代码来看，可能会产生怀疑的是，&lt;code&gt;snapshot()&lt;/code&gt;刚刚完成时，两个root I-node都是reference到同一个C-node。&lt;em&gt;如果某个线程更改了root下的C-node，那snapshot中root下的C-node也被改，snapshot还有什么意思？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;snapshot的中的东西不会被更改，具体的原因如下，注意看版本号，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/ctrie_snapshot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;换句话说，就是当没有update或access时，Ctrie和snapshot共享结点；但是如果Ctrie发生update或access，从root到访问位置的path就被copy和update了，snapshot里的不变。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snapshot&lt;/span&gt;&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r = &lt;span class=&quot;type&quot;&gt;RDCSS_READ&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	expmain = &lt;span class=&quot;type&quot;&gt;GCAS_READ&lt;/span&gt;(r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;RDCSS&lt;/span&gt;(r, expmain, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;INode&lt;/span&gt;(expmain, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Gen&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Ctrie&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			root = r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			readonly = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; snapshot()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于当计算snapshot的size或进行iterate时，snapshot是不变的，因此update涉及到的node是不必要的开销，因此使用旧的root，且把readonly设为true来构造snapshot。&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Concurrent Tries with Efficient Non-Blocking Snapshots, Aleksandar Prokopec, Nathan G. Bronson, Phil Bagwell, Martin Odersky&lt;/li&gt;
&lt;li&gt;Non-blocking Binary Search Trees, Faith Ellen, Panagiota Fatourou, Eric Ruppert, Franck van Breugel&lt;/li&gt;
&lt;li&gt;A Practical Multi-Word Compare-and-Swap Operation, Timothy L. Harris, Keir Fraser, Ian A. Pratt&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      Hash trie的并发会存在操作丢失的情况，类似Non-blocking Binary Search Trees里的情况，这里引入了中间结点来解决。同时文章还提出了一种snapshot的方法，这种方法对于tree很有用。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
      <category term="snapshot" scheme="http://chaomai.github.io/tags/snapshot/"/>
    
  </entry>
  
  <entry>
    <title>Miscellaneous Material About Concurrency</title>
    <link href="http://chaomai.github.io/2015/10/12/2015-2015-10-12-miscellaneous-material-about-concurrency/"/>
    <id>http://chaomai.github.io/2015/10/12/2015-2015-10-12-miscellaneous-material-about-concurrency/</id>
    <published>2015-10-12T13:43:54.000Z</published>
    <updated>2015-11-30T07:51:50.103Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Cuckoo-hashing&quot;&gt;&lt;a href=&quot;#Cuckoo-hashing&quot; class=&quot;headerlink&quot; title=&quot;Cuckoo hashing&quot;&gt;&lt;/a&gt;Cuckoo hashing&lt;/h1&gt;&lt;p&gt;Cuckoo hashing是Rasmus Pagh, Flemming Friche Rodler在2001年提出的，在hash table中用于解决hash collision的一种方法，是一种开放寻址法的hash table。&lt;/p&gt;
&lt;p&gt;Cuckoo hashing维护了两个hash table，$T_1$和$T_2$，使用两个hash function，$h_1$和$h_2$。每个key存储在$T_1$的$h_1(x)$或者$T_2$的$h_2(x)$，但不会同时存储在两个地方。&lt;/p&gt;
&lt;p&gt;由于使用了两个hash table，Cuckoo hashing保证了在最坏情况下，lookup和delete也能有$O(1)$的时间，insert的期望时间是$O(1)$。&lt;/p&gt;
&lt;p&gt;原始的cuckoo hashing并不支持并发读写，同时对于每个inset和lookup需要多个内存引用。Bin Fan, David G. Andersen, Michael Kaminsky在2013年提出了Concurrent Cuckoo hashing，用optimistic version，使得cuckoo hashing在保证原有空间高效性的情况下，支持多个reader和一个writer的并发访问；同时使用了针对每个key的short summary，提高了hash table操作中cache的局部性；还优化了insert操作，提高了吞吐率。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Rasmus Pagh, Flemming Friche Rodler. Cuckoo Hashing[J]. Algorithms, 2001, 51(2).&lt;/li&gt;
&lt;li&gt;Bin Fan, David G. Andersen, Michael Kaminsky. MemC3: Compact and Concurrent MemCache with Dumber Caching and Smarter Hashing[C]. Networked Systems Design and Implementation, 2013: 371-384.&lt;/li&gt;
&lt;li&gt;Xiaozhou Li, David G. Andersen, Michael Kaminsky, Michael J. Freedman. Algorithmic improvements for fast concurrent Cuckoo hashing[C]. Proceedings of the Ninth European Conference on Computer Systems, 2014, 27.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Hopscotch-hashing&quot;&gt;&lt;a href=&quot;#Hopscotch-hashing&quot; class=&quot;headerlink&quot; title=&quot;Hopscotch hashing&quot;&gt;&lt;/a&gt;Hopscotch hashing&lt;/h1&gt;&lt;p&gt;Hopscotch hashing是Maurice Herlihy, Nir Shavit, Moran Tzafrir在2008年提出的，在hash table中用于解决hash collision的一种方法，是一种开放寻址法的hash table，结合了linear探测、链式hash和cuckoo hash的优点。&lt;/p&gt;
&lt;p&gt;它使用了一个hash function，$h$和hopscotch方法。hash table的每个项都包含一个hop-information，一个$H$-bit的一个bitmap（$H$是常数，通常是一个word），被hash到table里的每个item，x总会在$h(x)$或者下$H-1$个位置被找到。&lt;/p&gt;
&lt;p&gt;它的insert，remove和contains的期望时间都是常数时间。&lt;/p&gt;
&lt;p&gt;Hopscotch hashing在设计之初就考虑到了并发，使用了lock和time stamp的方式来保证了并发安全性。&lt;/p&gt;
&lt;h2 id=&quot;Reference-1&quot;&gt;&lt;a href=&quot;#Reference-1&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Maurice Herlihy, Nir Shavit, Moran Tzafrir. Hopscotch Hashing[C]. Proceedings of the 22nd international symposium on Distributed Computing, 2008: 350-364.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;spinlock&quot;&gt;&lt;a href=&quot;#spinlock&quot; class=&quot;headerlink&quot; title=&quot;spinlock&quot;&gt;&lt;/a&gt;spinlock&lt;/h1&gt;&lt;p&gt;spinlock是一种同步机制，它会导致线程进入忙等待，不断检查锁是否可用，并尝试获取锁。&lt;/p&gt;
&lt;p&gt;它避免了操作系统进行调度时的开销。&lt;/p&gt;
&lt;p&gt;由于spinlock是忙等待，因此在多处理器上使用才有意义。spinlock在锁可能耽搁一小段时间的情况下，很高效。因为这个原因，操作系统的内核中经常使用spinlock。&lt;/p&gt;
&lt;h2 id=&quot;Reference-2&quot;&gt;&lt;a href=&quot;#Reference-2&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Maurice Herlihy, Nir Shavit. The Art of Multiprocessor Programming Revised Reprint [M]. Elsevier, 2012.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;rwlock&quot;&gt;&lt;a href=&quot;#rwlock&quot; class=&quot;headerlink&quot; title=&quot;rwlock&quot;&gt;&lt;/a&gt;rwlock&lt;/h1&gt;&lt;p&gt;Readers-writer lock是一种同步原语。在访问共享对象时，对于仅有reader的情况，是完全不需要同步的，但如果有writer，就需要同步。当一个wirter范围共享数据的时候，其他所有的writer和reader都会被阻塞，直到这个writer结束访问。&lt;/p&gt;
&lt;p&gt;在共享数据更新很少，读取很多的情况下，Readers-writer lock会拥有很高的效率。&lt;/p&gt;
&lt;h2 id=&quot;Reference-3&quot;&gt;&lt;a href=&quot;#Reference-3&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Maurice Herlihy, Nir Shavit. The Art of Multiprocessor Programming Revised Reprint [M]. Elsevier, 2012.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;RCU&quot;&gt;&lt;a href=&quot;#RCU&quot; class=&quot;headerlink&quot; title=&quot;RCU&quot;&gt;&lt;/a&gt;RCU&lt;/h1&gt;&lt;p&gt;RCU是一种同步机制，在Linux内核中有广泛的用途，Linux内核2.5.43版本就开始使用RCU，截至2014年，已经使用了超过9000个RCU API。它允许reader和writer并发的访问共享数据，支持一个writer和多个reader之间的并发。通过维护多个版本的数据，RCU保证了reader读取到的数据的一致性，还保证在reader完成读取前，被访问的数据不会被释放。&lt;/p&gt;
&lt;p&gt;RCU有3个基本机制，用于insert的Publish-Subscribe机制、用于delete的Wait For Pre-Existing RCU Readers to Complete机制和允许reader容忍并发insert和delete的Maintain Multiple Versions of Recently Updated Objects机制。&lt;/p&gt;
&lt;h2 id=&quot;Reference-4&quot;&gt;&lt;a href=&quot;#Reference-4&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Paul E. McKenney, John D. Slingwine. Read-Copy Update: Using Execution History to Solve Concurrency Problems[C]. Parallel and Distributed Computing and Systems, 1998: 509–518.&lt;/li&gt;
&lt;li&gt;Paul E. McKenney, Jonathan Walpole. Introducing technology into the Linux kernel: a case study[C]. Special Interest Group on Operating Systems, 2008, 42(5): 4–17.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;CPU-with-HTM-from-Intel-and-IBM&quot;&gt;&lt;a href=&quot;#CPU-with-HTM-from-Intel-and-IBM&quot; class=&quot;headerlink&quot; title=&quot;CPU with HTM from Intel and IBM&quot;&gt;&lt;/a&gt;CPU with HTM from Intel and IBM&lt;/h1&gt;&lt;h2 id=&quot;Intel&quot;&gt;&lt;a href=&quot;#Intel&quot; class=&quot;headerlink&quot; title=&quot;Intel&quot;&gt;&lt;/a&gt;Intel&lt;/h2&gt;&lt;p&gt;Transactional Synchronization Extensions（TSX）是x86架构指令集的扩展，这个扩展加入了Hardware Transactional Memory（HTM）的支持。&lt;/p&gt;
&lt;p&gt;在2013年6月，Intel推出了基于Haswell微架构的处理器。Haswell处理器成为了主流处理器中首次引入Transactional Memory的处理器，在这一系列的处理器中，型号低于45xx，R系列和K系列的不支持TSX。&lt;/p&gt;
&lt;h2 id=&quot;IBM&quot;&gt;&lt;a href=&quot;#IBM&quot; class=&quot;headerlink&quot; title=&quot;IBM&quot;&gt;&lt;/a&gt;IBM&lt;/h2&gt;&lt;h3 id=&quot;Power8&quot;&gt;&lt;a href=&quot;#Power8&quot; class=&quot;headerlink&quot; title=&quot;Power8&quot;&gt;&lt;/a&gt;Power8&lt;/h3&gt;&lt;p&gt;IBM在2013年8月的Hot Chips会议上推出了Power8。Power8是基于Power架构的超标量体系结构对称多处理器家族。Power8加入了Hardware Transactional Memory的支持。&lt;/p&gt;
&lt;h3 id=&quot;Blue-Gene&quot;&gt;&lt;a href=&quot;#Blue-Gene&quot; class=&quot;headerlink&quot; title=&quot;Blue Gene&quot;&gt;&lt;/a&gt;Blue Gene&lt;/h3&gt;&lt;p&gt;Blue Gene是IBM的一个项目，目标是设计计算速度能够达到PFLOPS级别的，同时低能耗的超级计算机。这个项目产生了3代的超级计算机，Blue Gene/L，Blue Gene/P和Blue Gene/Q。其中Blue Gene/Q支持Transactional Memory。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      简单记录了一些关于并发的资料（hash table，spinlock，rwlock和CPU对HTM的支持）。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Notes of Non-Blocking Binary Search Trees</title>
    <link href="http://chaomai.github.io/2015/10/04/2015-2015-10-04-notes-of-non-blocking-binary-search-trees/"/>
    <id>http://chaomai.github.io/2015/10/04/2015-2015-10-04-notes-of-non-blocking-binary-search-trees/</id>
    <published>2015-10-04T09:21:49.000Z</published>
    <updated>2015-11-20T15:34:04.936Z</updated>
    
    <content type="html">&lt;h1 id=&quot;specification&quot;&gt;&lt;a href=&quot;#specification&quot; class=&quot;headerlink&quot; title=&quot;specification&quot;&gt;&lt;/a&gt;specification&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;no duplicate key&lt;/li&gt;
&lt;li&gt;deleting non-existent key leads to return false&lt;/li&gt;
&lt;li&gt;&lt;p&gt;leaf-oriented BST&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;all keys currently in the dictionary are &lt;strong&gt;stored in the leaves of the tree.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Internal nodes of the tree are used to direct a Find operation along the path to the correct leaf.&lt;/li&gt;
&lt;li&gt;The keys stored in internal nodes may or may&lt;br&gt;not be in the dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;features&quot;&gt;&lt;a href=&quot;#features&quot; class=&quot;headerlink&quot; title=&quot;features&quot;&gt;&lt;/a&gt;features&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;non-blocking&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linearizable&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;for every execution, one can assign a linearization point to each completed operation and some of the uncompleted operations &lt;strong&gt;so that the linearization point of each operation occurs after the operation starts and before it ends&lt;/strong&gt;, and the results of these operations are the same &lt;em&gt;as if they had been performed sequentially, in the order of their linearization points.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;basic-idea&quot;&gt;&lt;a href=&quot;#basic-idea&quot; class=&quot;headerlink&quot; title=&quot;basic idea&quot;&gt;&lt;/a&gt;basic idea&lt;/h1&gt;&lt;p&gt;类似Harris’ Linked List里面的做法，这里是mark the parent of the leaf before&lt;br&gt;splicing that parent out of the tree。一旦被标记，那么其指向子结点的指针将不能被改变。&lt;/p&gt;
&lt;h1 id=&quot;problems&quot;&gt;&lt;a href=&quot;#problems&quot; class=&quot;headerlink&quot; title=&quot;problems&quot;&gt;&lt;/a&gt;problems&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/non-block-bst_problems.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图中，两个线程分别delete C和E，两个concurrent operation同时看到了BST以后，接下来的操作是，&lt;em&gt;基于各自看到的的BST来进行的&lt;/em&gt;，它们彼此并不知道对方进行了什么操作，最后导致E并没有被deleted，其中一个操作丢失了。&lt;/p&gt;
&lt;p&gt;解决这个需要对parent的child pointer进行mark，但是要mark的pointer是存在两个不同的word（left and right child pointer）里面的，不能够用一个cas来同时mark。&lt;/p&gt;
&lt;h1 id=&quot;solutions&quot;&gt;&lt;a href=&quot;#solutions&quot; class=&quot;headerlink&quot; title=&quot;solutions&quot;&gt;&lt;/a&gt;solutions&lt;/h1&gt;&lt;p&gt;using a separate state &lt;strong&gt;ﬁeld of the node&lt;/strong&gt; to mark or flag，而不是mark那个pointer。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mark: node marked is unchangeable。&lt;/li&gt;
&lt;li&gt;flag: indicate that an update is trying to change a child pointer of the node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mark和flag类似于加锁。&lt;/p&gt;
&lt;h2 id=&quot;insert和delete&quot;&gt;&lt;a href=&quot;#insert和delete&quot; class=&quot;headerlink&quot; title=&quot;insert和delete&quot;&gt;&lt;/a&gt;insert和delete&lt;/h2&gt;&lt;h3 id=&quot;insert&quot;&gt;&lt;a href=&quot;#insert&quot; class=&quot;headerlink&quot; title=&quot;insert&quot;&gt;&lt;/a&gt;insert&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/non-block-bst_insert.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Insert (C):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ﬂag node D’s parent, node B,&lt;/li&gt;
&lt;li&gt;change the appropriate child pointer of node B,&lt;/li&gt;
&lt;li&gt;unﬂag node B.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;delete&quot;&gt;&lt;a href=&quot;#delete&quot; class=&quot;headerlink&quot; title=&quot;delete&quot;&gt;&lt;/a&gt;delete&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/non-block-bst_delete.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Delete (C):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ﬂag C’s grandparent, node B,&lt;/li&gt;
&lt;li&gt;mark C’s parent, node D,&lt;/li&gt;
&lt;li&gt;change the appropriate child pointer of B,&lt;/li&gt;
&lt;li&gt;unﬂag node B.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;insert在完成第一步以后，在insert进行后续操作时，其他线程将不能够block insert。delete类似的，在完成第一二步以后也是。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/non-block-bst_delete2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是delete在完成第一步以后，第二步mark有可能失败，比如insert把将要删除的node换为新的三个node。in which case the ﬂag is no longer on the node whose child pointer must be changed to accomplish the deletion.&lt;/p&gt;
&lt;p&gt;如果mark失败，delete会remove flag，重新开始。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/non-block-bst_state.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;some-details-in-implementation&quot;&gt;&lt;a href=&quot;#some-details-in-implementation&quot; class=&quot;headerlink&quot; title=&quot;some details in implementation&quot;&gt;&lt;/a&gt;some details in implementation&lt;/h1&gt;&lt;h2 id=&quot;helping-mechanism&quot;&gt;&lt;a href=&quot;#helping-mechanism&quot; class=&quot;headerlink&quot; title=&quot;helping mechanism&quot;&gt;&lt;/a&gt;helping mechanism&lt;/h2&gt;&lt;h3 id=&quot;method&quot;&gt;&lt;a href=&quot;#method&quot; class=&quot;headerlink&quot; title=&quot;method&quot;&gt;&lt;/a&gt;method&lt;/h3&gt;&lt;p&gt;类似Barnes的方法，将线程拥有lock换成操作拥有lock（marked or flagged）。一个操作在处理tree的同时，还保存了它在holding lock的时候要进行的操作，其他线程遇到lock，就帮助它完成，使得lock最终release。&lt;/p&gt;
&lt;p&gt;为了避免helping mechanism带来的性能下降（多个线程会尝试进行同一个操作），这里用了保守的策略： a process P helps another process’s operation &lt;strong&gt;only if the other operation is preventing P’s own progress&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;implementation&quot;&gt;&lt;a href=&quot;#implementation&quot; class=&quot;headerlink&quot; title=&quot;implementation&quot;&gt;&lt;/a&gt;implementation&lt;/h3&gt;&lt;p&gt;线程之间是无法自动感知对方的存在的，也就是说实现helping mechanism，需要a data structure that is shared between threads holds the operating information。&lt;/p&gt;
&lt;h2 id=&quot;dummy-keys&quot;&gt;&lt;a href=&quot;#dummy-keys&quot; class=&quot;headerlink&quot; title=&quot;dummy keys&quot;&gt;&lt;/a&gt;dummy keys&lt;/h2&gt;&lt;p&gt;在delete时，需要flag grandparent和mark parent，如果BST的key少于4个，必然就会有一个leaf没有grandparent，那么在delete就需要考虑很多例外的情况（insert类似）。&lt;/p&gt;
&lt;p&gt;为了避免这些特殊情况，下面引入两个特殊值$\infty_1$和$\infty_2$，使得BST在没有key的时候，也存在3个node。这两个dummy keys是不允许删除的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/non-block-bst_dummy_keys.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;summary&quot;&gt;&lt;a href=&quot;#summary&quot; class=&quot;headerlink&quot; title=&quot;summary&quot;&gt;&lt;/a&gt;summary&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Excellent tutorial&lt;/strong&gt; about helping mechanism!!!&lt;/li&gt;
&lt;li&gt;在树上面进行并发操作的时候，这篇论文中描述的问题其实大都是存在的，因此论文中的方法可以考虑用到其他树型结构上面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;references&quot;&gt;&lt;a href=&quot;#references&quot; class=&quot;headerlink&quot; title=&quot;references&quot;&gt;&lt;/a&gt;references&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Non-blocking Binary Search Trees, Faith Ellen, Panagiota Fatourou, Eric Ruppert, Franck van Breugel&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      使用了mark标记结点的方式，解决了single word cas无法同时操作multi-word的问题，同时使用外部树减少了操作影响到的结点的数目，还有就是Excellent tutorial about helping mechanism!
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Notes of Read-Log-Update a Lightweight Synchronization Mechanism for Concurrent Programming</title>
    <link href="http://chaomai.github.io/2015/09/26/2015-2015-09-26-notes-of-rlu/"/>
    <id>http://chaomai.github.io/2015/09/26/2015-2015-09-26-notes-of-rlu/</id>
    <published>2015-09-26T05:34:55.000Z</published>
    <updated>2015-11-30T07:51:34.996Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;RCU, this barrier-based mechanism, allows for simple epoch-based reclamation of the old copies, and the mechanism as a whole eliminates many of the atomic read-modify-write instructions, memory barriers, and cache misses that are so expensive on modern multicore systems.&lt;/p&gt;
&lt;h2 id=&quot;About-RLU&quot;&gt;&lt;a href=&quot;#About-RLU&quot; class=&quot;headerlink&quot; title=&quot;About RLU&quot;&gt;&lt;/a&gt;About RLU&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Novel extension of RCU framework that support read-only traverals concurrently with multiple updates.&lt;/li&gt;
&lt;li&gt;In a semi-automated way.&lt;/li&gt;
&lt;li&gt;Removes from the programmer the burder of handcrafting the concurrent copy management using only single pointer manipulations.&lt;/li&gt;
&lt;li&gt;Can be API-compatible with RCU.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;About-Implementation-of-RLU&quot;&gt;&lt;a href=&quot;#About-Implementation-of-RLU&quot; class=&quot;headerlink&quot; title=&quot;About Implementation of RLU&quot;&gt;&lt;/a&gt;About Implementation of RLU&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Clock-based logging mechanism.&lt;/li&gt;
&lt;li&gt;Object-level write-log per thread.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Algorithms&quot;&gt;&lt;a href=&quot;#Algorithms&quot; class=&quot;headerlink&quot; title=&quot;Algorithms&quot;&gt;&lt;/a&gt;Algorithms&lt;/h1&gt;&lt;h2 id=&quot;Idea&quot;&gt;&lt;a href=&quot;#Idea&quot; class=&quot;headerlink&quot; title=&quot;Idea&quot;&gt;&lt;/a&gt;Idea&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// For all operations:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   +--------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |all operations|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   +------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------v-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|read the global clock|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       +--v--+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       |start|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       +-----+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// For writer:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              +------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              +--+            |writer|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |               +---+--+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |                   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |                   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     +-------------v-------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     | copy the object into a its own              |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modification&amp;lt;-+     |thread wirte-&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; and lock the original object|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     +-------------+-------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |                   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |                   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |      +------------v-------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |      |manipulate the object copy|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              +---+  +--------------+-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              +---+    +------------v------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |        |increments the write clock and global clock|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |        +------------+------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |      +--------------v----------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |      |splits operations into two sets|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |      +--------------+----------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      commit&amp;lt;-+                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     +---------------v-----------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     |wait &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; old operations to finish|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     +---------------+-----------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     +---------------v--------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     |   write back the &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; objects       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     |from the writer-&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; into the memory,|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     |  overwriting the old objects,      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |     |      release the locks             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              +---+ +------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The writer’s modifications are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hidden from concurrent reads,&lt;/li&gt;
&lt;li&gt;avoid conflicts with concurrent writes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the following figure, &lt;strong&gt;the order of updating new value&lt;/strong&gt;, 23, at write-clock and global-clock is important. Because all new object copies of the write-log become visible at once to all concurrent RLU protected section &lt;strong&gt;after the increment of global clock&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/rlu_readers%20and%20writer.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Many of the lock mentioned is not really calling &lt;code&gt;pthread_mutex_lock()&lt;/code&gt; but just performing a update at a specific filed in data.&lt;/p&gt;
&lt;h2 id=&quot;Synchronizing-Write-Operations&quot;&gt;&lt;a href=&quot;#Synchronizing-Write-Operations&quot; class=&quot;headerlink&quot; title=&quot;Synchronizing Write Operations&quot;&gt;&lt;/a&gt;Synchronizing Write Operations&lt;/h2&gt;&lt;p&gt;Two approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Execute writers serially.&lt;/li&gt;
&lt;li&gt;Fine-grained locks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Execute-Writers-Serially&quot;&gt;&lt;a href=&quot;#Execute-Writers-Serially&quot; class=&quot;headerlink&quot; title=&quot;Execute Writers Serially&quot;&gt;&lt;/a&gt;Execute Writers Serially&lt;/h3&gt;&lt;p&gt;Using a global lock for each writer is simplicity of the code and the concurrency that does exist between read-only and write operations.&lt;/p&gt;
&lt;p&gt;But the drawback is a lack of scalability.&lt;/p&gt;
&lt;h3 id=&quot;Fine-grained-Locks&quot;&gt;&lt;a href=&quot;#Fine-grained-Locks&quot; class=&quot;headerlink&quot; title=&quot;Fine-grained Locks&quot;&gt;&lt;/a&gt;Fine-grained Locks&lt;/h3&gt;&lt;p&gt;Each object that a writer modifies is logged and locked (as shown in the former figure) by the RLU mechanism.&lt;/p&gt;
&lt;h2 id=&quot;Fine-grained-Locking-Using-RLU&quot;&gt;&lt;a href=&quot;#Fine-grained-Locking-Using-RLU&quot; class=&quot;headerlink&quot; title=&quot;Fine-grained Locking Using RLU&quot;&gt;&lt;/a&gt;Fine-grained Locking Using RLU&lt;/h2&gt;&lt;p&gt;RLU locks can be used as a fine-grained locking mechanism.&lt;/p&gt;
&lt;p&gt;For standard lock, it is necessary to execute post-lock customized verifications to ensure that the state of the object is still the same as it was before locking. This action is unnecessary for RLU locks.&lt;/p&gt;
&lt;h2 id=&quot;Data-Structures&quot;&gt;&lt;a href=&quot;#Data-Structures&quot; class=&quot;headerlink&quot; title=&quot;Data Structures&quot;&gt;&lt;/a&gt;Data Structures&lt;/h2&gt;&lt;p&gt;Global:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a global clock&lt;/li&gt;
&lt;li&gt;a global array of threads&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thread:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two write-logs: new object copies&lt;ul&gt;
&lt;li&gt;header:&lt;ul&gt;
&lt;li&gt;a thread indentifier&lt;/li&gt;
&lt;li&gt;a pointer: point to the actual object&lt;/li&gt;
&lt;li&gt;the object size&lt;/li&gt;
&lt;li&gt;a special pointer value that indicates this is a copy (constant)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;a run counter: the thread is active or not&lt;/li&gt;
&lt;li&gt;a local clock: stealing mechanism&lt;/li&gt;
&lt;li&gt;write clock for each thread: stealing mechanism&lt;ul&gt;
&lt;li&gt;write clock of a thread is initially $\infty$ and write clock is updated first (than global clock), so stealing from a thread is only possible when is updates the write clock during the commit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Object header:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a pointer: points to the copy of this object in a write-log&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The actually code is the way of much more complex than previously mentioned. But these code are also nice course of programming in C.&lt;/p&gt;
&lt;h1 id=&quot;RLU-Deferring&quot;&gt;&lt;a href=&quot;#RLU-Deferring&quot; class=&quot;headerlink&quot; title=&quot;RLU Deferring&quot;&gt;&lt;/a&gt;RLU Deferring&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+----------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|writer saves the current write-&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|and generates &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the next|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|writer                            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------+------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          | &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a writer tries to lock an object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          | that is already locked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------v---------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|writer sends a &lt;span class=&quot;string&quot;&gt;&quot;sync request&quot;&lt;/span&gt; to     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|the conflicting thread to force it to|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|release it locks                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|(global-clock++ -&amp;gt; rlu sync -&amp;gt;       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| write back -&amp;gt; unlock                |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Read-Log-Update: A Lightweight Synchronization Mechanism for Concurrent Programming, Alexander Matveev, Nir Shavit, Pascal Felber, Patrick Marlier&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      今年SOSP的文章，提出了Read-Log-Update，使用了Clock-based logging mechanism和Object-level write-log per thread，解决了RCU不能有多个writer等缺陷。其中的RLU Deferring减少了synchronize调用的次数，提高了cache hit。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>RCU</title>
    <link href="http://chaomai.github.io/2015/09/25/2015-2015-09-25-rcu/"/>
    <id>http://chaomai.github.io/2015/09/25/2015-2015-09-25-rcu/</id>
    <published>2015-09-25T11:00:58.000Z</published>
    <updated>2015-09-26T05:47:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Brief-Introduction&quot;&gt;&lt;a href=&quot;#Brief-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Brief Introduction&quot;&gt;&lt;/a&gt;Brief Introduction&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;a &lt;strong&gt;synchronization mechanism&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;allowing read to occur concurrently with updates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;supports concurrency between a &lt;strong&gt;single updater and multiple readers&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ensures that reads are coherent by maintaining multiple versions of objects and ensuring that they are not freed up until all pre-existing read-side critical sections complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;defines and uses efficient and scalable mechanisms for publishing and reading new versions of an object, and also for deferring the collection of old versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;read-side primitives have zero overhead in non-preemptable kernels.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Fundamental-Mechanisms&quot;&gt;&lt;a href=&quot;#Fundamental-Mechanisms&quot; class=&quot;headerlink&quot; title=&quot;Fundamental Mechanisms&quot;&gt;&lt;/a&gt;Fundamental Mechanisms&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Publish-Subscribe Mechanism (for insertion)&lt;/li&gt;
&lt;li&gt;Wait For Pre-Existing RCU Readers to Complete (for deletion)&lt;/li&gt;
&lt;li&gt;Maintain Multiple Versions of Recently Updated Objects (allow readers to tolerate concurrent insertions and deletions)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Publish-Subscribe-Mechanism-insertion&quot;&gt;&lt;a href=&quot;#Publish-Subscribe-Mechanism-insertion&quot; class=&quot;headerlink&quot; title=&quot;Publish-Subscribe Mechanism (insertion)&quot;&gt;&lt;/a&gt;Publish-Subscribe Mechanism (insertion)&lt;/h2&gt;&lt;p&gt;RCU uses what can be thought of as a publish-subscribe mechanism to provide &lt;em&gt;the ability to safely scan data, even though that data is being modified concurrently.&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// not good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; foo *gp = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* . . . */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = kmalloc(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(*p), GFP_KERNEL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gp = p;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Problem-1-rcu-assign-pointer&quot;&gt;&lt;a href=&quot;#Problem-1-rcu-assign-pointer&quot; class=&quot;headerlink&quot; title=&quot;Problem 1 - rcu_assign_pointer()&quot;&gt;&lt;/a&gt;Problem 1 - &lt;code&gt;rcu_assign_pointer()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The &lt;strong&gt;memory reordering&lt;/strong&gt; in updater may cause that concurrent readers could see the uninitialized values (&lt;code&gt;gp&lt;/code&gt;). And this requires to use &lt;strong&gt;memory barriers (hard)&lt;/strong&gt; to keep things ordered.&lt;/p&gt;
&lt;p&gt;The primitive, &lt;code&gt;rcu_assign_pointer()&lt;/code&gt;, encapsulates these memory barriers.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rcu_assign_pointer()&lt;/code&gt; would &lt;strong&gt;publish&lt;/strong&gt; the new structure, forcing both the compiler and the CPU to execute the assignment to &lt;code&gt;gp&lt;/code&gt; after the assignments to the fields referenced by &lt;code&gt;p&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// gp = p;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rcu_assign_pointer(gp, p);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Problem-2-rcu-dereference&quot;&gt;&lt;a href=&quot;#Problem-2-rcu-dereference&quot; class=&quot;headerlink&quot; title=&quot;Problem 2 - rcu_dereference()&quot;&gt;&lt;/a&gt;Problem 2 - &lt;code&gt;rcu_dereference()&lt;/code&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// not good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = gp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (p != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  do_something_with(p-&amp;gt;a, p-&amp;gt;b, p-&amp;gt;c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Not only the updater but also the reader requires enforce ordering because of the &lt;strong&gt;value-speculation compiler optimizations&lt;/strong&gt; (the compiler guess the value p, access its filed, then fetch the actual value of p and check the guess) in the context of &lt;strong&gt;profile-driven optimization&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rcu_read_lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = rcu_dereference(gp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (p != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  do_something_with(p-&amp;gt;a, p-&amp;gt;b, p-&amp;gt;c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rcu_read_unlock();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;rcu_dereference()&lt;/code&gt; primitive can thus be thought of as &lt;strong&gt;subscribing&lt;/strong&gt; to a given value of the specified pointer, guaranteeing that subsequent dereference operations &lt;em&gt;will see any initialization that occurred before the corresponding publish (&lt;code&gt;rcu_assign_pointer()&lt;/code&gt;) operation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rcu_read_lock()&lt;/code&gt; and &lt;code&gt;rcu_read_unlock()&lt;/code&gt; calls are absolutely required: they define the extent of the &lt;strong&gt;RCU read-side critical section&lt;/strong&gt;. In non-&lt;code&gt;CONFIG_PREEMPT&lt;/code&gt; kernels, they generate absolutely no code.&lt;/p&gt;
&lt;h3 id=&quot;Special-RCU-Variants&quot;&gt;&lt;a href=&quot;#Special-RCU-Variants&quot; class=&quot;headerlink&quot; title=&quot;Special RCU Variants&quot;&gt;&lt;/a&gt;Special RCU Variants&lt;/h3&gt;&lt;p&gt;Special RCU variants of Linux’s list-manipulation API contains &lt;code&gt;rcu_assign_pointer()&lt;/code&gt; and &lt;code&gt;rcu_dereference()&lt;/code&gt; primitives.&lt;/p&gt;
&lt;p&gt;Doubly linked list in Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the circular &lt;code&gt;struct list_head&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the linear &lt;code&gt;struct hlist_head&lt;/code&gt;/&lt;code&gt;struct hlist_node&lt;/code&gt; pair&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;RCU-Publish-and-Subscribe-Primitives&quot;&gt;&lt;a href=&quot;#RCU-Publish-and-Subscribe-Primitives&quot; class=&quot;headerlink&quot; title=&quot;RCU Publish and Subscribe Primitives&quot;&gt;&lt;/a&gt;RCU Publish and Subscribe Primitives&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Publish&lt;/th&gt;
&lt;th&gt;Retract&lt;/th&gt;
&lt;th&gt;Subscribe&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pointers&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rcu_assign_pointer()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rcu_assign_pointer(..., NULL)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rcu_dereference()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lists&lt;/td&gt;
&lt;td&gt;&lt;code&gt;list_add_rcu()&lt;/code&gt; &lt;code&gt;list_add_tail_rcu()&lt;/code&gt; &lt;code&gt;list_replace_rcu()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;list_del_rcu()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;list_for_each_entry_rcu()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hlists&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hlist_add_after_rcu()&lt;/code&gt; &lt;code&gt;hlist_add_before_rcu()&lt;/code&gt; &lt;code&gt;hlist_add_head_rcu()&lt;/code&gt; &lt;code&gt;hlist_replace_rcu()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hlist_del_rcu()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hlist_for_each_entry_rcu()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;list_replace_rcu()&lt;/code&gt;, &lt;code&gt;list_del_rcu()&lt;/code&gt;, &lt;code&gt;hlist_replace_rcu()&lt;/code&gt;, and &lt;code&gt;hlist_del_rcu()&lt;/code&gt; introduce a new problem. When is it safe to free up the data element that was replaced or removed?&lt;/p&gt;
&lt;h2 id=&quot;Wait-For-Pre-Existing-RCU-Readers-to-Complete-deletion&quot;&gt;&lt;a href=&quot;#Wait-For-Pre-Existing-RCU-Readers-to-Complete-deletion&quot; class=&quot;headerlink&quot; title=&quot;Wait For Pre-Existing RCU Readers to Complete (deletion)&quot;&gt;&lt;/a&gt;Wait For Pre-Existing RCU Readers to Complete (deletion)&lt;/h2&gt;&lt;p&gt;RCU is a way of waiting for lots of (for example, 20,000) different things to finish without having to explicitly track each and every one of them.&lt;/p&gt;
&lt;h3 id=&quot;About-Waiting&quot;&gt;&lt;a href=&quot;#About-Waiting&quot; class=&quot;headerlink&quot; title=&quot;About Waiting&quot;&gt;&lt;/a&gt;About Waiting&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/rcu_waiting.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The things waited on RCU read-side critical sections, which can be &lt;strong&gt;nested, and may contain pretty much any code, as long as that code does not explicitly block or sleep &lt;/strong&gt;(&lt;strong&gt;SRCU&lt;/strong&gt; is a special case).&lt;/p&gt;
&lt;p&gt;When readers are not inside a read-side critical section, they are in a &lt;strong&gt;quiescent state&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A time period during which all such pre-existing readers complete is called a &lt;strong&gt;grace period&lt;/strong&gt;. (or a period of time during which every&lt;br&gt;thread goes through at least one quiescent state is called a&lt;br&gt;grace period.)&lt;/p&gt;
&lt;p&gt;If the section begins after the beginning of a given grace period, the execution of that section will extend beyond the end of that grace period. Because after the beginning of a given grace period, *new readers won’t hold a reference to old data.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; list_head &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LIST_HEAD(head);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* . . . */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = search(head, key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (p == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* Take appropriate action, unlock, and return. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;q = kmalloc(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(*p), GFP_KERNEL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// the following 4 lines gives RCU its name:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. while permitting concurrent reads,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. *q = *p copies,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3. q-&amp;gt;b = 2, q-&amp;gt;c = 3, list_replace_rcu(&amp;amp;p-&amp;gt;list, &amp;amp;q-&amp;gt;list) do an update.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*q = *p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;q-&amp;gt;b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;q-&amp;gt;c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// three main steps of the basic form of algorithms that use RCU to wait for readers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. make a change&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list_replace_rcu(&amp;amp;p-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;, &amp;amp;q-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. wait for all pre-existing RCU read-side critical sections to completely finish&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// the key observation here is that subsequent RCU read-side critical sections have no way to gain a reference to the newly removed element.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;synchronize_rcu();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3. clean up&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kfree(p);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;synchronize-rcu&quot;&gt;&lt;a href=&quot;#synchronize-rcu&quot; class=&quot;headerlink&quot; title=&quot;synchronize_rcu()&quot;&gt;&lt;/a&gt;&lt;code&gt;synchronize_rcu()&lt;/code&gt;&lt;/h3&gt;&lt;h4 id=&quot;The-Trick&quot;&gt;&lt;a href=&quot;#The-Trick&quot; class=&quot;headerlink&quot; title=&quot;The Trick&quot;&gt;&lt;/a&gt;The Trick&lt;/h4&gt;&lt;p&gt;The trick is that RCU read-side critical sections is &lt;strong&gt;not permitted to block or sleep&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If a given CPU executes a context switch, &lt;strong&gt;the completion&lt;/strong&gt; of any prior RCU read-side critical sections is guaranteed.&lt;/p&gt;
&lt;p&gt;I think there must be an mechanism that the given CPU can &lt;em&gt;detect the existence of all RCU read-side critical sections and complete them&lt;/em&gt; before the context switch.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// simplified synchronize_rcu()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for_each_online_cpu(cpu)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    run_on(cpu);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;for_each_online_cpu(cpu)&lt;/code&gt; loop through all CPU:&lt;br&gt;&lt;code&gt;run_on()&lt;/code&gt; switches the current thread to the specified CPU –&amp;gt; forces&lt;br&gt;a context switch on that CPU –&amp;gt; guarantee the completion&lt;/p&gt;
&lt;p&gt;Therefore, the completion of all prior RCU read-side critical sections are guaranteed.&lt;/p&gt;
&lt;p&gt;This approach works for for non-&lt;code&gt;CONFIG_PREEMPT&lt;/code&gt; and &lt;code&gt;CONFIG_PREEMPT&lt;/code&gt; kernels.&lt;/p&gt;
&lt;h2 id=&quot;Maintain-Multiple-Versions-of-Recently-Updated-Objects&quot;&gt;&lt;a href=&quot;#Maintain-Multiple-Versions-of-Recently-Updated-Objects&quot; class=&quot;headerlink&quot; title=&quot;Maintain Multiple Versions of Recently Updated Objects&quot;&gt;&lt;/a&gt;Maintain Multiple Versions of Recently Updated Objects&lt;/h2&gt;&lt;p&gt;The multiple versions of recently updated objects allow synchronization-free readers.&lt;/p&gt;
&lt;p&gt;While the reader remains in its RCU read-side critical section, the data referenced must remain intact. (The readers are not permitted to maintain references to element after exiting from their RCU read-side critical sections.)&lt;/p&gt;
&lt;p&gt;The multiple versions mentioned here doesn’t mean the RCU uses a version number. &lt;strong&gt;Versions exist logically&lt;/strong&gt;. Because readers do not synchronize directly with updaters, readers might run concurrently with this entire update (insert, delete, or replacement) process. For example, some readers &lt;em&gt;might reference to a old element and see the old version of the list&lt;/em&gt;, while other readers reference to a up-to-date element at same location.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/rcu_insert.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(The red border means that readers might be holding references to them.)&lt;/p&gt;
&lt;p&gt;After the &lt;code&gt;synchronize_rcu()&lt;/code&gt; returns, &lt;em&gt;a grace period will have elapsed&lt;/em&gt;, and so all reads that started before the &lt;code&gt;list_replace_rcu()&lt;/code&gt; will have completed. No readers will hold the reference to the old element. From the readers’ point of view, there is a single version of list.&lt;/p&gt;
&lt;h1 id=&quot;Limitation&quot;&gt;&lt;a href=&quot;#Limitation&quot; class=&quot;headerlink&quot; title=&quot;Limitation&quot;&gt;&lt;/a&gt;Limitation&lt;/h1&gt;&lt;h2 id=&quot;Single-Updater&quot;&gt;&lt;a href=&quot;#Single-Updater&quot; class=&quot;headerlink&quot; title=&quot;Single Updater&quot;&gt;&lt;/a&gt;Single Updater&lt;/h2&gt;&lt;p&gt;RCU permit concurrency between a single updater and multiple readers. &lt;em&gt;(I think its should caused by &lt;code&gt;synchronize_rcu()&lt;/code&gt;. I am not pretty sure for now because of being unaware of detailed design and implementation of RCU.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So RCU only allow the existence of two versions of the list. If we want to permit more than two version of the list, one way is using lock.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Note that this means that multiple concurrent deletions might be waiting in synchronize_rcu().&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spin_lock(&amp;amp;mylock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = search(head, key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (p == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spin_unlock(&amp;amp;mylock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list_del_rcu(&amp;amp;p-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spin_unlock(&amp;amp;mylock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronize_rcu();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kfree(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If a semaphore protecting the update is held across the grace period, then there can be at most two versions.&lt;/p&gt;
&lt;h2 id=&quot;Subtle-Priority-inversion-Scenario&quot;&gt;&lt;a href=&quot;#Subtle-Priority-inversion-Scenario&quot; class=&quot;headerlink&quot; title=&quot;Subtle Priority-inversion Scenario&quot;&gt;&lt;/a&gt;Subtle Priority-inversion Scenario&lt;/h2&gt;&lt;p&gt;Such as, a high-priority process blocked waiting for an RCU grace period to elapse can be blocked by low-priority RCU readers in -rt kernels. This can be solved by using RCU priority boosting or &lt;code&gt;call_rcu()&lt;/code&gt; instead of &lt;code&gt;synchronize_rcu()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Access-Old-Data-and-Inconsistencies&quot;&gt;&lt;a href=&quot;#Access-Old-Data-and-Inconsistencies&quot; class=&quot;headerlink&quot; title=&quot;Access Old Data and Inconsistencies&quot;&gt;&lt;/a&gt;Access Old Data and Inconsistencies&lt;/h2&gt;&lt;p&gt;RCU readers might access stale data, and might even see inconsistencies.&lt;/p&gt;
&lt;h1 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;a Reader-Writer Lock Replacement&lt;/li&gt;
&lt;li&gt;a Restricted Reference-Counting Mechanism&lt;/li&gt;
&lt;li&gt;a Bulk Reference-Counting Mechanism&lt;/li&gt;
&lt;li&gt;a Poor Man’s Garbage Collector&lt;/li&gt;
&lt;li&gt;a Way of Providing Existence Guarantees&lt;/li&gt;
&lt;li&gt;a Way of Waiting for Things to Finish&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Reader-Writer-Lock-Replacement&quot;&gt;&lt;a href=&quot;#Reader-Writer-Lock-Replacement&quot; class=&quot;headerlink&quot; title=&quot;Reader-Writer Lock Replacement&quot;&gt;&lt;/a&gt;Reader-Writer Lock Replacement&lt;/h2&gt;&lt;p&gt;Perhaps the most common use of RCU within the Linux kernel is as a replacement for reader-writer locking in &lt;strong&gt;read-intensive situations&lt;/strong&gt;. The key similarity between RCU and reader-writer locking is that &lt;em&gt;both have read-side critical sections that can execute in parallel&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Restricted-Reference-Counting-Mechanism&quot;&gt;&lt;a href=&quot;#Restricted-Reference-Counting-Mechanism&quot; class=&quot;headerlink&quot; title=&quot;Restricted Reference-Counting Mechanism&quot;&gt;&lt;/a&gt;Restricted Reference-Counting Mechanism&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rcu_read_lock();  &lt;span class=&quot;comment&quot;&gt;/* acquire reference. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = rcu_dereference(head);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* do something with p. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rcu_read_unlock();  &lt;span class=&quot;comment&quot;&gt;/* release reference. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spin_lock(&amp;amp;mylock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;head = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spin_unlock(&amp;amp;mylock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;synchronize_rcu();  &lt;span class=&quot;comment&quot;&gt;/* Wait for all references to be released. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kfree(p);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Well, it is pretty much like the replacement for reader-writer lock. The difference is the perspective of thinking about it.&lt;/p&gt;
&lt;p&gt;Again, the duration of read-side critical section matters here. The performance advantages of RCU are most pronounced for short duration.&lt;/p&gt;
&lt;h2 id=&quot;Bulk-Reference-Counting-Mechanism&quot;&gt;&lt;a href=&quot;#Bulk-Reference-Counting-Mechanism&quot; class=&quot;headerlink&quot; title=&quot;Bulk Reference-Counting Mechanism&quot;&gt;&lt;/a&gt;Bulk Reference-Counting Mechanism&lt;/h2&gt;&lt;p&gt;A single global reference counter for a large variety of data structures causes bouncing the cache line containing the reference count, and can degrade performance.&lt;/p&gt;
&lt;h2 id=&quot;Garbage-Collector&quot;&gt;&lt;a href=&quot;#Garbage-Collector&quot; class=&quot;headerlink&quot; title=&quot;Garbage Collector&quot;&gt;&lt;/a&gt;Garbage Collector&lt;/h2&gt;&lt;p&gt;OK, when I read about this section in the original article, I’m sure that I am the poor man. But they (RCU and Garbage Collector) has some differences.&lt;/p&gt;
&lt;p&gt; RCU requires that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;manually indicate when a given data structure is eligible to be collected.&lt;/li&gt;
&lt;li&gt;manually mark the RCU read-side critical sections where references might legitimately be held.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Providing-Existence-Guarantees&quot;&gt;&lt;a href=&quot;#Providing-Existence-Guarantees&quot; class=&quot;headerlink&quot; title=&quot;Providing Existence Guarantees&quot;&gt;&lt;/a&gt;Providing Existence Guarantees&lt;/h2&gt;&lt;p&gt;Since RCU protects data within the read-side critial section, the data is guaranteed to remain in existence for the duration of the read-side critial section.&lt;/p&gt;
&lt;h1 id=&quot;Implementation&quot;&gt;&lt;a href=&quot;#Implementation&quot; class=&quot;headerlink&quot; title=&quot;Implementation&quot;&gt;&lt;/a&gt;Implementation&lt;/h1&gt;&lt;h2 id=&quot;Kernel-Space&quot;&gt;&lt;a href=&quot;#Kernel-Space&quot; class=&quot;headerlink&quot; title=&quot;Kernel Space&quot;&gt;&lt;/a&gt;Kernel Space&lt;/h2&gt;&lt;p&gt;RCU was accepted into the Linux 2.5.43 kernel in 2002.&lt;/p&gt;
&lt;h2 id=&quot;User-Space&quot;&gt;&lt;a href=&quot;#User-Space&quot; class=&quot;headerlink&quot; title=&quot;User Space&quot;&gt;&lt;/a&gt;User Space&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://liburcu.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User-space RCU&lt;/a&gt; is widely applicable for general-purpose code but in general does not perform as well as the kernel implementation.&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://lwn.net/Articles/262464/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is RCU, Fundamentally?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lwn.net/Articles/263130/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is RCU? Part 2: Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lwn.net/Articles/264090/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RCU part 3: the RCU API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www2.rdrop.com/~paulmck/RCU/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RCU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codemacro.com/2015/04/19/rw_thread_gc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用RCU技术实现读写线程无锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lwn.net/Articles/609904/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The RCU API, 2014 Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lwn.net/Articles/253651/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The design of preemptible read-copy-update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www2.rdrop.com/~paulmck/RCU/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RCU by Paul McKenney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://liburcu.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Userspace RCU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/573424/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User-space RCU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read-Log-Update: A Lightweight Synchronization Mechanism for Concurrent Programming, Alexander Matveev, Nir Shavit, Pascal Felber, Patrick Marlier&lt;/li&gt;
&lt;li&gt;User-Level Implementations of Read-Copy Update, Mathieu Desnoyers, Paul E. McKenney, Alan S. Stern, Michel R. Dagenais and Jonathan Walpole&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      RCU is a synchronization mechanism, which is widely used in the Linux kernel.
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Char *(*(**foo[][8])())[]...</title>
    <link href="http://chaomai.github.io/2015/09/17/2015-2015-09-17-char-foo-8/"/>
    <id>http://chaomai.github.io/2015/09/17/2015-2015-09-17-char-foo-8/</id>
    <published>2015-09-16T16:06:18.000Z</published>
    <updated>2015-09-16T16:09:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;declaration&quot;&gt;&lt;a href=&quot;#declaration&quot; class=&quot;headerlink&quot; title=&quot;declaration&quot;&gt;&lt;/a&gt;declaration&lt;/h1&gt;&lt;p&gt;one &lt;strong&gt;basic type&lt;/strong&gt; + zero or more &lt;strong&gt;derived types&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;basic-type&quot;&gt;&lt;a href=&quot;#basic-type&quot; class=&quot;headerlink&quot; title=&quot;basic type&quot;&gt;&lt;/a&gt;basic type&lt;/h2&gt;&lt;p&gt;&lt;code&gt;char&lt;/code&gt;, &lt;code&gt;signed char&lt;/code&gt;, &lt;code&gt;unsigned char&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;unsigned short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;unsigned int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;unsigned long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;void&lt;/code&gt;, &lt;code&gt;struct tag&lt;/code&gt;, &lt;code&gt;union tag&lt;/code&gt;, &lt;code&gt;enum tag&lt;/code&gt;, &lt;code&gt;long long&lt;/code&gt;, &lt;code&gt;unsigned long long&lt;/code&gt;, &lt;code&gt;long double&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;derived-types&quot;&gt;&lt;a href=&quot;#derived-types&quot; class=&quot;headerlink&quot; title=&quot;derived types&quot;&gt;&lt;/a&gt;derived types&lt;/h2&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;: pointer to …   - always on the left side&lt;br&gt;&lt;code&gt;[]&lt;/code&gt;: array of …   - always on the left side&lt;br&gt;&lt;code&gt;()&lt;/code&gt;: function returning …   - always on the left side&lt;/p&gt;
&lt;h1 id=&quot;operator-precedence&quot;&gt;&lt;a href=&quot;#operator-precedence&quot; class=&quot;headerlink&quot; title=&quot;operator precedence&quot;&gt;&lt;/a&gt;operator precedence&lt;/h1&gt;&lt;p&gt;The &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt; have higher precedence than &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-rule-to-read-declaration&quot;&gt;&lt;a href=&quot;#the-rule-to-read-declaration&quot; class=&quot;headerlink&quot; title=&quot;the rule to read declaration&quot;&gt;&lt;/a&gt;the rule to read declaration&lt;/h2&gt;&lt;p&gt;There is a &lt;a href=&quot;http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“right-left” rule&lt;/a&gt;. I think the rule is based on the precedence.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/859634/c-pointer-to-array-array-of-pointers-disambiguation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C pointer to array/array of pointers disambiguation&lt;/a&gt; also mentioned &lt;em&gt;“go right when you can, go left when you must”&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;find-error-in-declaration&quot;&gt;&lt;a href=&quot;#find-error-in-declaration&quot; class=&quot;headerlink&quot; title=&quot;find error in declaration&quot;&gt;&lt;/a&gt;find error in declaration&lt;/h2&gt;&lt;p&gt;Since we can read complex declaration by applying the rule mentioned before, we also can find error in declaration with the knowledge of what is legal in C.&lt;/p&gt;
&lt;p&gt;Some illegal declarations,&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// array of functions?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error: &#39;a&#39; declared as array of functions of type &#39;int ()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[]();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a function returning function?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error: function cannot return function type &#39;int ()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// array of functions?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a function returning array of int?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error: function cannot return array type &#39;int []&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error: &#39;c&#39; declared as array of functions of type &#39;int ()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c[]()[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// array of functions?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// error: &#39;d&#39; declared as array of functions of type &#39;int ()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*d)[]();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;char-foo-8&quot;&gt;&lt;a href=&quot;#char-foo-8&quot; class=&quot;headerlink&quot; title=&quot;char *(*(**foo[][8])())[]&quot;&gt;&lt;/a&gt;&lt;code&gt;char *(*(**foo[][8])())[]&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;foo is array of array of 8 pointer to pointer to function returning pointer to array of pointer to char.&lt;/p&gt;
&lt;h1 id=&quot;summary&quot;&gt;&lt;a href=&quot;#summary&quot; class=&quot;headerlink&quot; title=&quot;summary&quot;&gt;&lt;/a&gt;summary&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;The key is the &lt;a href=&quot;http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“right-left” rule&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Be aware of what is legal in C.&lt;/li&gt;
&lt;li&gt;数组指针，指针数组。。。Well, the Chinese description is really ambiguous.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;references&quot;&gt;&lt;a href=&quot;#references&quot; class=&quot;headerlink&quot; title=&quot;references&quot;&gt;&lt;/a&gt;references&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://unixwiz.net/techtips/reading-cdecl.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reading C type declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The “right-left” rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/859634/c-pointer-to-array-array-of-pointers-disambiguation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C pointer to array/array of pointers disambiguation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      Understand complex declaration in C.
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="c" scheme="http://chaomai.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Notes of to Lock, Swap, or Elide: On the Interplay of Hardware Transactional Memory and Lock Free Indexing</title>
    <link href="http://chaomai.github.io/2015/09/05/2015-2015-09-05-notes-of-to-lock-swap-or-elide-on-the-interplay-of-hardware-transactional-memory-and-lock-free-indexing/"/>
    <id>http://chaomai.github.io/2015/09/05/2015-2015-09-05-notes-of-to-lock-swap-or-elide-on-the-interplay-of-hardware-transactional-memory-and-lock-free-indexing/</id>
    <published>2015-09-05T04:27:15.000Z</published>
    <updated>2015-09-26T05:50:45.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;解决了这么几个问题&quot;&gt;&lt;a href=&quot;#解决了这么几个问题&quot; class=&quot;headerlink&quot; title=&quot;解决了这么几个问题&quot;&gt;&lt;/a&gt;解决了这么几个问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Does HTM obviate the need for crafty lock-free index designs?&lt;br&gt;No.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How does HTM differ from lock-free index designs?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Given that lock-free designs are still relevant, can HTM help simplify lock-free design techniques while maintaining good performance?&lt;br&gt;Yes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;HTM&quot;&gt;&lt;a href=&quot;#HTM&quot; class=&quot;headerlink&quot; title=&quot;HTM&quot;&gt;&lt;/a&gt;HTM&lt;/h1&gt;&lt;h2 id=&quot;Transactional-memory&quot;&gt;&lt;a href=&quot;#Transactional-memory&quot; class=&quot;headerlink&quot; title=&quot;Transactional memory&quot;&gt;&lt;/a&gt;Transactional memory&lt;/h2&gt;&lt;p&gt;ease the burden (&lt;em&gt;a tedious and error prone task leading to deadlocks and race conditions&lt;/em&gt;) by delegating conflict detection and resolution from the developer to the system.&lt;/p&gt;
&lt;h2 id=&quot;Hardware-Transactional-Memory&quot;&gt;&lt;a href=&quot;#Hardware-Transactional-Memory&quot; class=&quot;headerlink&quot; title=&quot;Hardware Transactional Memory&quot;&gt;&lt;/a&gt;Hardware Transactional Memory&lt;/h2&gt;&lt;p&gt;a best-effort model, optimistic concurrency.&lt;/p&gt;
&lt;h3 id=&quot;Based-on-existing-features-in-CPU&quot;&gt;&lt;a href=&quot;#Based-on-existing-features-in-CPU&quot; class=&quot;headerlink&quot; title=&quot;Based on existing features in CPU&quot;&gt;&lt;/a&gt;Based on existing features in CPU&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;caches&lt;br&gt;store transaction buffers and provide isolation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cache coherence protocol&lt;br&gt;detect conflicting transactional accesses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Constraints&quot;&gt;&lt;a href=&quot;#Constraints&quot; class=&quot;headerlink&quot; title=&quot;Constraints&quot;&gt;&lt;/a&gt;Constraints&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;read and write set of a transaction must fit in cache in order for it to be executed&lt;br&gt;limitation of CPU.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;transaction duration&lt;br&gt;hardware events will abort a transaction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the work of conflict detection&lt;br&gt;it is usually done at the granularity of a cache line. This may lead to cases of false sharing where aborts occur due to threads accessing and modifying separate items on the same cache line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Solutions-lock-elision&quot;&gt;&lt;a href=&quot;#Solutions-lock-elision&quot; class=&quot;headerlink&quot; title=&quot;Solutions - lock elision&quot;&gt;&lt;/a&gt;Solutions - lock elision&lt;/h3&gt;&lt;p&gt;因为HTM是best-effort的，由于上述constraints的存在，transaction需要fallback path。&lt;/p&gt;
&lt;p&gt;最简单的一种，是transaction不成功的时候，就改用lock，这个技术叫做lock elision；它将一个lock保护的区域作为transaction来执行，仅当transaction 没有成功commit的时候，它才falls back为block on the lock。&lt;/p&gt;
&lt;p&gt;lock elision将MT作为一个fast path，slow path就是lock (a simple coarse grain locks).&lt;/p&gt;
&lt;p&gt;In lock elision, the lock word needs to be included in the read set of a transaction, so that the transaction aborts when another thread acquires the lock (thus causing a conflict). Hence, once a thread resorts to non-transactional execution by taking the lock, &lt;strong&gt;all other concurrently executing transactions will abort, stalling overall progress.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Intel-TSX&quot;&gt;&lt;a href=&quot;#Intel-TSX&quot; class=&quot;headerlink&quot; title=&quot;Intel TSX&quot;&gt;&lt;/a&gt;Intel TSX&lt;/h2&gt;&lt;p&gt;the support of transactional memory in Intel starts from Haswell.&lt;/p&gt;
&lt;p&gt;According to Intel, there is no guarantee that a transaction&lt;br&gt;will eventually succeed even if it is infinitely retried.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HLE&lt;br&gt;Hardware Lock Elision (HLE)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RTM&lt;br&gt;Restricted Transactional Memory (RTM)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cpp-btree-and-Bw-tree&quot;&gt;&lt;a href=&quot;#cpp-btree-and-Bw-tree&quot; class=&quot;headerlink&quot; title=&quot;cpp-btree and Bw-tree&quot;&gt;&lt;/a&gt;cpp-btree and Bw-tree&lt;/h2&gt;&lt;p&gt;cpp-btree&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;does not contain the fine-grained locking techniques and concurrency protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bw-tree&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a mapping table that maps logical page identifiers (LPIDs) to virtual addresses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lock-free updates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;delta record&lt;/li&gt;
&lt;li&gt;pages consolidation (to get search-optimized page)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Structure modifications&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;breaks an SMO into a sequence of atomic steps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;A-study-of-fundamental-differences-between-HTM-based-and-lock-free-index-designs&quot;&gt;&lt;a href=&quot;#A-study-of-fundamental-differences-between-HTM-based-and-lock-free-index-designs&quot; class=&quot;headerlink&quot; title=&quot;A study of fundamental differences between HTM-based and lock-free index designs&quot;&gt;&lt;/a&gt;A study of fundamental differences between HTM-based and lock-free index designs&lt;/h1&gt;&lt;h2 id=&quot;Experiment-1-Throughput&quot;&gt;&lt;a href=&quot;#Experiment-1-Throughput&quot; class=&quot;headerlink&quot; title=&quot;Experiment 1 - Throughput&quot;&gt;&lt;/a&gt;Experiment 1 - Throughput&lt;/h2&gt;&lt;h3 id=&quot;Results&quot;&gt;&lt;a href=&quot;#Results&quot; class=&quot;headerlink&quot; title=&quot;Results&quot;&gt;&lt;/a&gt;Results&lt;/h3&gt;&lt;p&gt;for read operation, HTM provides high throughput with little effort.&lt;/p&gt;
&lt;h2 id=&quot;Experiment-2-Effect-of-Key-and-Payload-Sizes&quot;&gt;&lt;a href=&quot;#Experiment-2-Effect-of-Key-and-Payload-Sizes&quot; class=&quot;headerlink&quot; title=&quot;Experiment 2 - Effect of Key and Payload Sizes&quot;&gt;&lt;/a&gt;Experiment 2 - Effect of Key and Payload Sizes&lt;/h2&gt;&lt;h3 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;p&gt;such a workload in experiment 1 &lt;strong&gt;do not hold in general&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;capacity limits &lt;em&gt;(for Haswell’s CPU)&lt;/em&gt;&lt;br&gt;L1 cache is 32KB. no transaction can write more than can fit in L1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;associativity &lt;em&gt;(for Haswell’s CPU)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hyper-threading &lt;em&gt;(for Haswell’s CPU)&lt;/em&gt;&lt;br&gt;L1 cache and other resources is shared among hardware threads.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;many of the properties that determine the HTM abort rate for a given tree may not be known until runtime. A tree’s key size, payload size, total size, and address access patterns all affect performance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Results-1&quot;&gt;&lt;a href=&quot;#Results-1&quot; class=&quot;headerlink&quot; title=&quot;Results&quot;&gt;&lt;/a&gt;Results&lt;/h3&gt;&lt;p&gt;even trees with relatively small keys and payloads cannot always parallelize. With Haswell’s HTM almost all transactions abort with payloads larger than a few kilobytes.&lt;/p&gt;
&lt;h2 id=&quot;Experiment-3-Highcontention-Performance&quot;&gt;&lt;a href=&quot;#Experiment-3-Highcontention-Performance&quot; class=&quot;headerlink&quot; title=&quot;Experiment 3 - Highcontention Performance&quot;&gt;&lt;/a&gt;Experiment 3 - Highcontention Performance&lt;/h2&gt;&lt;h3 id=&quot;Analysis-1&quot;&gt;&lt;a href=&quot;#Analysis-1&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;two other problematic ways&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;speculation is not free&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;lemming effect&lt;br&gt;When a transaction falls back and acquires the lock, &lt;strong&gt;all other transactions in the critical section&lt;/strong&gt; abort and cannot restart &lt;strong&gt;until the lock is released&lt;/strong&gt;. The effect is that execution is &lt;strong&gt;fully serialized&lt;/strong&gt; until the lock is released – even if the other transactions operate on non conflicting cache lines.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mitigate the lemming effect&lt;br&gt;have transactions retry more than once&lt;br&gt;&lt;em&gt;cost of retrying a contentious transaction &amp;lt; serializing execution&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Results-2&quot;&gt;&lt;a href=&quot;#Results-2&quot; class=&quot;headerlink&quot; title=&quot;Results&quot;&gt;&lt;/a&gt;Results&lt;/h3&gt;&lt;p&gt;&lt;em&gt;the workload skew: for the payload, the bigger the skew is, the latter it is updated at the end of a tree traversal operation, and the latter it is within the transaction.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The results show that as workload skew increases &lt;strong&gt;the performance of lock-elision drops sharply&lt;/strong&gt;. At some point lock-elision performs even &lt;strong&gt;worse than spin-locks&lt;/strong&gt;. Increasing the number of transactional attempts delays the performance cliff, and leads to a more graceful degradation of performance as skew increases.&lt;/p&gt;
&lt;h3 id=&quot;Optimal-Number-of-Transactional-Attempts&quot;&gt;&lt;a href=&quot;#Optimal-Number-of-Transactional-Attempts&quot; class=&quot;headerlink&quot; title=&quot;Optimal Number of Transactional Attempts&quot;&gt;&lt;/a&gt;Optimal Number of Transactional Attempts&lt;/h3&gt;&lt;p&gt;for a set of concurrent transactions, it may be possible that none of them commit: a situation worse than using a spinlock.&lt;/p&gt;
&lt;p&gt;The optimal number of transactional attempts depends on workloads and varies highly. chooses the number of transactional attempts dynamically depending on the workload.&lt;/p&gt;
&lt;h2 id=&quot;Lock-coupling&quot;&gt;&lt;a href=&quot;#Lock-coupling&quot; class=&quot;headerlink&quot; title=&quot;Lock-coupling&quot;&gt;&lt;/a&gt;Lock-coupling&lt;/h2&gt;&lt;p&gt;lock-coupling is one of the most widely used approaches to achieve efficient fine-grained locking on B-Trees.&lt;/p&gt;
&lt;p&gt;In lock-coupling a pair of locks are held as a worker traverses pages: one on a “source” page and another on a “target” page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/stm_lock%20coupling.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Because of restrictive support of lock-coupling in Haswell’s HTM interface, it is not possible on Haswell’s CPU.&lt;/p&gt;
&lt;h1 id=&quot;A-study-of-fundamental-differences-between-HTM-based-and-lock-free-index-designs-1&quot;&gt;&lt;a href=&quot;#A-study-of-fundamental-differences-between-HTM-based-and-lock-free-index-designs-1&quot; class=&quot;headerlink&quot; title=&quot;A study of fundamental differences between HTM-based and lock-free index designs&quot;&gt;&lt;/a&gt;A study of fundamental differences between HTM-based and lock-free index designs&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/stm_compare.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Experiment-1-Impact-of-concurrent-writers-on-readers&quot;&gt;&lt;a href=&quot;#Experiment-1-Impact-of-concurrent-writers-on-readers&quot; class=&quot;headerlink&quot; title=&quot;Experiment 1 - Impact of concurrent writers on readers&quot;&gt;&lt;/a&gt;Experiment 1 - Impact of concurrent writers on readers&lt;/h2&gt;&lt;h3 id=&quot;Results-3&quot;&gt;&lt;a href=&quot;#Results-3&quot; class=&quot;headerlink&quot; title=&quot;Results&quot;&gt;&lt;/a&gt;Results&lt;/h3&gt;&lt;p&gt;for high contention workloads the reader throughput that the cpp-btree can sustain begins to drop.&lt;/p&gt;
&lt;h2 id=&quot;The-Overheads-of-LockFreedom&quot;&gt;&lt;a href=&quot;#The-Overheads-of-LockFreedom&quot; class=&quot;headerlink&quot; title=&quot;The Overheads of LockFreedom&quot;&gt;&lt;/a&gt;The Overheads of LockFreedom&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a garbage-collection mechanism for memory safety&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epoch mechanism used in Bw-tree，类似引用计数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;additional indirection for atomic updates&lt;br&gt;&lt;em&gt;lockfreedom influences the in-memory layout of structures&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于某些数据结构，如：Bw-tree，每次访问必须间接的通过一个额外的memory来进行，这就无形中增加了overheads。&lt;/li&gt;
&lt;li&gt;额外的indirection同时还给内存分配带来压力。&lt;ul&gt;
&lt;li&gt;可能需要特别的或者lock-free的allocator。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cost of copy-on-write (when using paged copy-on-write semantics)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the cost may be influenced by page size, access skew, the uniformity of payload sizes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These costs are highly intertwined: tradeoffs for each influence the cost of the others&lt;/p&gt;
&lt;h1 id=&quot;A-study-of-how-HTM-can-help-lock-free-designs&quot;&gt;&lt;a href=&quot;#A-study-of-how-HTM-can-help-lock-free-designs&quot; class=&quot;headerlink&quot; title=&quot;A study of how HTM can help lock-free designs&quot;&gt;&lt;/a&gt;A study of how HTM can help lock-free designs&lt;/h1&gt;&lt;p&gt;it is very difficult to architect and build complex lock-free&lt;br&gt;data structures.&lt;/p&gt;
&lt;h2 id=&quot;MultiWord-CAS-using-HTM&quot;&gt;&lt;a href=&quot;#MultiWord-CAS-using-HTM&quot; class=&quot;headerlink&quot; title=&quot;MultiWord CAS using HTM&quot;&gt;&lt;/a&gt;MultiWord CAS using HTM&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MW-CAS同时操作的word数受限于L1 cache的大小。过多的word，则无法用HTM来实现MW-CAS。Bw-tree可以。&lt;/li&gt;
&lt;li&gt;MW-CAS是短时的transactions，也就是说不那么容易被interrupted。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/534758/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lock elision in the GNU C library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Transactional_Synchronization_Extensions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transactional Synchronization Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CPU Cache and Memory Ordering, 何登成&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecs.umass.edu/ece/koren/architecture/Cache/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;This is a basic Cache Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Computer Systems A Programmer’s Perspective, Randal E. Bryant, David R. O’Hallaron&lt;/li&gt;
&lt;li&gt;To Lock, Swap, or Elide: On the Interplay of Hardware Transactional Memory and Lock Free Indexing, Darko Makreshanski, Justin Levandoski, Ryan Stutsman&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      主要研究了HTM and lock-free indexing的相互影响。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>慢跑总结</title>
    <link href="http://chaomai.github.io/2015/09/05/2015-2015-09-05-running-summary/"/>
    <id>http://chaomai.github.io/2015/09/05/2015-2015-09-05-running-summary/</id>
    <published>2015-09-05T03:21:11.000Z</published>
    <updated>2015-09-25T11:07:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;摆臂方向不对，导致身体也左右转动，浪费能量&lt;/li&gt;
&lt;li&gt;长时间跑以后，腰部不能保证挺直&lt;/li&gt;
&lt;li&gt;推蹬时间点过早，导致身体腾空，浪费能量&lt;/li&gt;
&lt;li&gt;呼吸有问题，导致腹部痛&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;跑步注意&quot;&gt;&lt;a href=&quot;#跑步注意&quot; class=&quot;headerlink&quot; title=&quot;跑步注意&quot;&gt;&lt;/a&gt;跑步注意&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;轻松直立微前倾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两眼注视前下方&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;10m左右；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前摆至胸线，后摆至腰际&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;膝前提腿下摆向后下方推蹬&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;身体重心过了支撑点，再推蹬，否则身体会腾空；&lt;/li&gt;
&lt;li&gt;推蹬顺序：先大腿，后小腿，最后脚踝；&lt;/li&gt;
&lt;li&gt;避免脚尖落地，长时间跑小腿以及脚踝的负荷会太大；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;蹬踝前摆全脚掌落地&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;鼻为主口为辅自然顺畅为原则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;核心肌群训练&quot;&gt;&lt;a href=&quot;#核心肌群训练&quot; class=&quot;headerlink&quot; title=&quot;核心肌群训练&quot;&gt;&lt;/a&gt;核心肌群训练&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;抬头挺胸缩腹夹臀&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;训练方法&quot;&gt;&lt;a href=&quot;#训练方法&quot; class=&quot;headerlink&quot; title=&quot;训练方法&quot;&gt;&lt;/a&gt;训练方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Plank&lt;/li&gt;
&lt;li&gt;Side Plank&lt;/li&gt;
&lt;li&gt;Upward plank pose&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20693323?rf=21469986&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;正确的慢跑姿势是怎样的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_9bf935a90101l1id.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;跑者入门01：跑步姿势与呼吸&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tw.running.biji.co/index.php?q=news&amp;amp;act=info&amp;amp;id=443&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[長跑觀念] 第1講—運動前後伸展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://post.smzdm.com/xilie/27/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;系列：跑步装备介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      近期跑步的时候遇到的问题，以及一些注意事项的记录。
    
    </summary>
    
      <category term="life" scheme="http://chaomai.github.io/categories/life/"/>
    
    
      <category term="running" scheme="http://chaomai.github.io/tags/running/"/>
    
  </entry>
  
  <entry>
    <title>Harris&#39; Non-Blocking Linked-Lists</title>
    <link href="http://chaomai.github.io/2015/07/30/2015-2015-07-30-harris-non-blocking-linked-lists/"/>
    <id>http://chaomai.github.io/2015/07/30/2015-2015-07-30-harris-non-blocking-linked-lists/</id>
    <published>2015-07-30T15:30:59.000Z</published>
    <updated>2015-09-26T05:47:48.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;specification&quot;&gt;&lt;a href=&quot;#specification&quot; class=&quot;headerlink&quot; title=&quot;specification&quot;&gt;&lt;/a&gt;specification&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ordered（ascending）&lt;/li&gt;
&lt;li&gt;no duplicated key&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;features&quot;&gt;&lt;a href=&quot;#features&quot; class=&quot;headerlink&quot; title=&quot;features&quot;&gt;&lt;/a&gt;features&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;non-blocking&lt;/li&gt;
&lt;li&gt;linearizable&lt;/li&gt;
&lt;li&gt;compare-and-swap based&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;仅使用一个cas的缺陷&quot;&gt;&lt;a href=&quot;#仅使用一个cas的缺陷&quot; class=&quot;headerlink&quot; title=&quot;仅使用一个cas的缺陷&quot;&gt;&lt;/a&gt;仅使用一个cas的缺陷&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;insert&lt;br&gt;  &lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/harris_single_insert.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;delete&lt;br&gt;  &lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/harris_single_delete.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于只有一个insert或者一个delete的情况，没有问题会出现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert and delete&lt;br&gt;  &lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/harris_insert_and_delete.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是如果一个insert和一个delete同时进行，问题就会出现。删除30的时候，一个cas无法保证，也不能避免10和30之间的修改。&lt;/p&gt;
&lt;h1 id=&quot;解决方法：用两个cas&quot;&gt;&lt;a href=&quot;#解决方法：用两个cas&quot; class=&quot;headerlink&quot; title=&quot;解决方法：用两个cas&quot;&gt;&lt;/a&gt;解决方法：用两个cas&lt;/h1&gt;&lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;stage 1&lt;br&gt;  &lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/harris_logically_delete.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;  用一个cas mark将要被删除结点的next field（logically deleted）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stage 2&lt;br&gt;  &lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/harris_physically_delete.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;  另一个cas来进行删除结点（physically deleted）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stage 1结束以后，list的结构保持不变，mark以后的结点，避免了新节点insert到该结点的后面。&lt;/p&gt;
&lt;h1 id=&quot;algorithm&quot;&gt;&lt;a href=&quot;#algorithm&quot; class=&quot;headerlink&quot; title=&quot;algorithm&quot;&gt;&lt;/a&gt;algorithm&lt;/h1&gt;&lt;h2 id=&quot;marked-and-unmarked&quot;&gt;&lt;a href=&quot;#marked-and-unmarked&quot; class=&quot;headerlink&quot; title=&quot;marked and unmarked&quot;&gt;&lt;/a&gt;marked and unmarked&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A node is marked if and only if its next field is marked.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话是关键：论文中的mark，实际上是mark了要被删除结点的next指针，而不是要被删除的结点本身。&lt;br&gt;我觉得从另一个视角来看，mark的效果是，不允许改变&lt;strong&gt;要被删除结点的后继结点&lt;/strong&gt;。这点从避免前文提到的问题的角度来说，也应该是正确的理解。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get_marked_reference&lt;/code&gt;和&lt;code&gt;get_unmarked_reference&lt;/code&gt;是以copy的形式传入reference，mark或者unmark以后的并不是reference本身。&lt;/p&gt;
&lt;h2 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Node &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  key_type key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node *next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node *head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  node *tail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;search&quot;&gt;&lt;a href=&quot;#search&quot; class=&quot;headerlink&quot; title=&quot;search&quot;&gt;&lt;/a&gt;search&lt;/h2&gt;&lt;p&gt;满足这么几个要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;left_node.key &amp;lt; search_key &amp;lt;= right_node.key&lt;/li&gt;
&lt;li&gt;left_node and right_node are unmarked&lt;/li&gt;
&lt;li&gt;right_node is immediate successor（直接后继） of left_node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有这么几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到left_node和right_node&lt;/li&gt;
&lt;li&gt;检查是不是直接后继&lt;ul&gt;
&lt;li&gt;是，直接返回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移除left_node and right_node之间的一个或多个marked结点&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;insert&quot;&gt;&lt;a href=&quot;#insert&quot; class=&quot;headerlink&quot; title=&quot;insert&quot;&gt;&lt;/a&gt;insert&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;找到left_node和right_node&lt;/li&gt;
&lt;li&gt;cas插入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;delete&quot;&gt;&lt;a href=&quot;#delete&quot; class=&quot;headerlink&quot; title=&quot;delete&quot;&gt;&lt;/a&gt;delete&lt;/h2&gt;&lt;p&gt;如前文解决方法中描述的，分两个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stage 1:&lt;ul&gt;
&lt;li&gt;找到left_node和right_node&lt;/li&gt;
&lt;li&gt;logically delete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stage 2:&lt;ul&gt;
&lt;li&gt;physically delete&lt;ul&gt;
&lt;li&gt;cas删除&lt;/li&gt;
&lt;li&gt;或者search中删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;find&quot;&gt;&lt;a href=&quot;#find&quot; class=&quot;headerlink&quot; title=&quot;find&quot;&gt;&lt;/a&gt;find&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;找到left_node和right_node&lt;/li&gt;
&lt;li&gt;right_node == search_key&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;A Pragmatic Implementation of Non-Blocking Linked-lists, Timothy L. Harris.&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      Harris的这篇论文提出了一种新的non-blocking linked-list，不同于Valois使用auxiliary node，Harris在操作的时候进行了mark，解决了插入丢失的问题。论文中有详细的伪代码，清晰的描述了实现的细节。但要注意的是，实际实现必然涉及到内存回收，没有自动内存回收机制的语言会有点麻烦。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="data structures" scheme="http://chaomai.github.io/categories/programming/data-structures/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>C++ Concurrency in Action (5) - the C++ Memory Model and Operations on Atomic Types</title>
    <link href="http://chaomai.github.io/2015/07/18/2015-2015-07-18-cpp-concurrency-in-action-5/"/>
    <id>http://chaomai.github.io/2015/07/18/2015-2015-07-18-cpp-concurrency-in-action-5/</id>
    <published>2015-07-18T10:41:54.000Z</published>
    <updated>2016-02-23T06:18:03.586Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Memory-model-basics&quot;&gt;&lt;a href=&quot;#Memory-model-basics&quot; class=&quot;headerlink&quot; title=&quot;Memory model basics&quot;&gt;&lt;/a&gt;Memory model basics&lt;/h1&gt;&lt;p&gt;two aspects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the basic structural aspects;&lt;/li&gt;
&lt;li&gt;the concurrency aspects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Objects-and-memory-location&quot;&gt;&lt;a href=&quot;#Objects-and-memory-location&quot; class=&quot;headerlink&quot; title=&quot;Objects and memory location&quot;&gt;&lt;/a&gt;Objects and memory location&lt;/h2&gt;&lt;p&gt;C++程序中所有的数据都是由object组成，object是”a region of storage”。一个对象存储在一个或多个&lt;strong&gt;memory location&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;每个memory location，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要么是，一个标量的一个对象（或子对象）；&lt;/li&gt;
&lt;li&gt;要么是，相邻bit fields的序列。（虽然相邻的bit fields是不同对象，它们仍然算作相同的memory location，除非用长度为0的bit fields隔开。）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Modification-orders&quot;&gt;&lt;a href=&quot;#Modification-orders&quot; class=&quot;headerlink&quot; title=&quot;Modification orders&quot;&gt;&lt;/a&gt;Modification orders&lt;/h2&gt;&lt;p&gt;C++程序中的每个对象都定义了一个modification order，它由程序中的所有线程对这个对象的write组成， starting with the object’s initialization。&lt;/p&gt;
&lt;p&gt;在绝大多数情况下，这个order在每次运行的时候都是不同的，但对于一个给定的执行，所有的线程都必须agree on the order。如果不使用原子类型，你就必须提供有效的同步来使得这些线程都agree on the modification order of each variable。但是线程并没有必要agree on the relative order of separate objects。&lt;/p&gt;
&lt;h1 id=&quot;Atomic-Operations-and-types-in-C&quot;&gt;&lt;a href=&quot;#Atomic-Operations-and-types-in-C&quot; class=&quot;headerlink&quot; title=&quot;Atomic Operations and types in C++&quot;&gt;&lt;/a&gt;Atomic Operations and types in C++&lt;/h1&gt;&lt;p&gt;一个atomic operation是&lt;strong&gt;indivisible operation&lt;/strong&gt;，要么完成，要么不完成。&lt;/p&gt;
&lt;h2 id=&quot;The-standard-atomic-types&quot;&gt;&lt;a href=&quot;#The-standard-atomic-types&quot; class=&quot;headerlink&quot; title=&quot;The standard atomic types&quot;&gt;&lt;/a&gt;The standard atomic types&lt;/h2&gt;&lt;p&gt;&lt;code&gt;is_lock_free()&lt;/code&gt;：给定类型的操作是直接由atomic instructions完成，还是由编译器和库提供的内部锁完成。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::atomic_flag&lt;/code&gt;没有提供&lt;code&gt;is_lock_free()&lt;/code&gt;成员函数。因为在这个类型上的操作required to be lock-free，一旦有了这个lock-free的类型，就能够以它为基础，进而实现所有其他的atomic类型。&lt;/p&gt;
&lt;p&gt;在大多数平台上，所有内置类型的atomic变种都&lt;strong&gt;应该&lt;/strong&gt;是lock-free的，但这并不是必须的。&lt;/p&gt;
&lt;p&gt;要注意的是，由于历史的原因，在有的平台，atomic类型指的不一定是&lt;code&gt;std::atomic&amp;lt;&amp;gt;&lt;/code&gt;的specialization（如：&lt;code&gt;atomic_bool&lt;/code&gt;和&lt;code&gt;std::atomic&amp;lt;bool&amp;gt;&lt;/code&gt;）。如果混用，就可能导致不兼容的情况出现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The alternative names for the standard atomic types and their corresponding &lt;code&gt;std::atomic&amp;lt;&amp;gt;&lt;/code&gt; specializations.&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Atomic type&lt;/th&gt;
&lt;th&gt;Corresponding specialization&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;bool&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_char&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_schar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;signed char&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uchar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;unsigned char&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;unsigned&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_short&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;short&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_ushort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;unsigned short&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;long&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_ulong&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;unsigned long&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_llong&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;long long&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_ullong&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;unsigned long long&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_char16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;char16_t&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_char32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;char32_t&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_wchar_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::atomic&amp;lt;wchar_t&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;The standard atomic &lt;code&gt;typedefs&lt;/code&gt; and their corresponding built-in &lt;code&gt;typedefs&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Atomic &lt;code&gt;typedef&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;Corresponding Standard Library &lt;code&gt;typedef&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_least8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least8_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_least8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least8_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_least16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_least16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_least32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_least32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_least64_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_least64_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_least64_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_least64_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_fast8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast8_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_fast8_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast8_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_fast16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_fast16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast16_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_fast32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_fast32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_int_fast64_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int_fast64_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uint_fast64_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uint_fast64_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_intptr_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;intptr_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uintptr_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uintptr_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_size_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_ptrdiff_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ptrdiff_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_intmax_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;intmax_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_uintmax_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uintmax_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;要注意的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;标准的atomic类型&lt;strong&gt;不是copyable和assignable&lt;/strong&gt;的；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为这些操作总是涉及到两个对象，必须从一个中read，然后write到另一个，这是两个单独的操作，合起来不可能是atomic。因此就不被允许。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持assignment from和implicit conversion to对应的内置类型；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;赋值操作返回的并不是reference  to  the  object  it’s&lt;br&gt;assigned to，而是the value assigned。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为如果返回了reference  to atomic variable，那些使用这个变量的代码需要显示的&lt;code&gt;load()&lt;/code&gt;，实际使用到值的可能是其他线程已经修改过的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Memory-ordering&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个在atomic类型上的操作都有memory-ordering参数，来指定memory-ordering语义。不同的操作可传入不同的参数，操作分为三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Store&lt;/li&gt;
&lt;li&gt;Load&lt;/li&gt;
&lt;li&gt;Read-modify-write&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认是&lt;code&gt;memory_order_seq_cst&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Operations-on-std-atomic-flag&quot;&gt;&lt;a href=&quot;#Operations-on-std-atomic-flag&quot; class=&quot;headerlink&quot; title=&quot;Operations on std::atomic_flag&quot;&gt;&lt;/a&gt;Operations on &lt;code&gt;std::atomic_flag&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;代表一个boolean flag，只能是两种状态：set或clear，并且总是starts clear。&lt;/p&gt;
&lt;p&gt;必须用&lt;code&gt;ATOMIC_FLAG_INIT&lt;/code&gt;来初始化，&lt;code&gt;std::atomic_flag guard = ATOMIC_FLAG_INIT&lt;/code&gt;。这是唯一需要使用这样的特殊方式来初始化的类型，也是&lt;strong&gt;唯一一个&lt;/strong&gt;保证lock-free的。&lt;/p&gt;
&lt;p&gt;如果是&lt;code&gt;static&lt;/code&gt;，那么在首次操作flag的时候初始化。&lt;/p&gt;
&lt;p&gt;用于实现spinlock，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; spinlock_mutex &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::atomic_flag flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spinlock_mutex():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flag(ATOMIC_FLAG_INIT) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(flag.test_and_set(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::memory_order_acquire));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flag.clear(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::memory_order_release);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Operations-on-std-atomic-lt-bool-gt&quot;&gt;&lt;a href=&quot;#Operations-on-std-atomic-lt-bool-gt&quot; class=&quot;headerlink&quot; title=&quot;Operations on std::atomic&amp;lt;bool&amp;gt;&quot;&gt;&lt;/a&gt;Operations on &lt;code&gt;std::atomic&amp;lt;bool&amp;gt;&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;可用nonatomic bool来初始化，还可以向实例赋nonatomic bool值，&lt;strong&gt;&lt;code&gt;std::atomic&amp;lt;bool&amp;gt;&lt;/code&gt;可能不是lock-free的！&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::atomic&amp;lt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&amp;gt; b(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;write：&lt;code&gt;store()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;read-modify-write：&lt;code&gt;exchange()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;nonmodifying query：&lt;code&gt;load()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::atomic&amp;lt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&amp;gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; x=b.load(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::memory_order_acquire);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b.store(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x=b.exchange(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::memory_order_acq_rel);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;compare/exchange&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compare_exchange_weak()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compare_exchange_strong()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果失败，expected value或被更新为original value，都接受两个memory-ordering参数。&lt;/p&gt;
&lt;p&gt;有这么几个要注意的地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个failed compare/exchange是不会进行保存的，因此某些memory-ordering语义是不可用的（&lt;code&gt;memory_order_release&lt;/code&gt;和&lt;code&gt;memory_order_acq_rel&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;can’t supply stricter memory ordering for failure than for success。&lt;/li&gt;
&lt;li&gt;如果不为failure提供memory-ordering参数，则&lt;strong&gt;在满足1的情况下&lt;/strong&gt;，与success一致。&lt;/li&gt;
&lt;li&gt;如果都不提供，则使用默认的&lt;code&gt;memory_order_seq_cst&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;它们是read-modify-write operation。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;蛋疼的作者啊，很多地方扯到memory-ordering语义，但是总是说“leave to section 5.3…”&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Operations-on-std-atomic-lt-T-gt&quot;&gt;&lt;a href=&quot;#Operations-on-std-atomic-lt-T-gt&quot; class=&quot;headerlink&quot; title=&quot;Operations on std::atomic&amp;lt;T*&amp;gt;&quot;&gt;&lt;/a&gt;Operations on &lt;code&gt;std::atomic&amp;lt;T*&amp;gt;&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::atomic&amp;lt;bool&amp;gt;&lt;/code&gt;有的成员函数，这个也有。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::atomic&amp;lt;T*&amp;gt;&lt;/code&gt;还提供了pointer arithmetic operations，由&lt;code&gt;fetch_add()&lt;/code&gt;和&lt;code&gt;fetch_sub()&lt;/code&gt;实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;fetch_add()&lt;/code&gt;和&lt;code&gt;fetch_sub()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;也叫做&lt;em&gt;exchange-and-add&lt;/em&gt;，它们是atomic read-modify-write operation。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回的是原始的值，而不是add或sub后的值。&lt;/p&gt;
 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Foo&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo some_array[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::atomic&amp;lt;Foo*&amp;gt; p(some_array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo* x=p.fetch_add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert(x==some_array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert(p.load()==&amp;amp;some_array[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x=(p-=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert(x==&amp;amp;some_array[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert(p.load()==&amp;amp;some_array[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Operations-on-standard-atomic-integral-types&quot;&gt;&lt;a href=&quot;#Operations-on-standard-atomic-integral-types&quot; class=&quot;headerlink&quot; title=&quot;Operations on standard atomic integral types&quot;&gt;&lt;/a&gt;Operations on standard atomic integral types&lt;/h2&gt;&lt;p&gt;Only division, multiplication, and shift operators are missing。因为atomic integral types通常作为计数器或位域来使用，如果需要额外的操作，可以在loop中用&lt;code&gt;compare_exchange_weak()&lt;/code&gt;来实现。&lt;/p&gt;
&lt;h2 id=&quot;The-std-atomic-lt-gt-primary-class-template&quot;&gt;&lt;a href=&quot;#The-std-atomic-lt-gt-primary-class-template&quot; class=&quot;headerlink&quot; title=&quot;The std::atomic&amp;lt;&amp;gt; primary class template&quot;&gt;&lt;/a&gt;The &lt;code&gt;std::atomic&amp;lt;&amp;gt;&lt;/code&gt; primary class template&lt;/h2&gt;&lt;p&gt;要将user-defined type用于&lt;code&gt;std::atomic&amp;lt;&amp;gt;&lt;/code&gt;，UDT必须满足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;必须有trivial copy-assignment operator；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不能有任何的virtual函数或者virtual基类；&lt;/li&gt;
&lt;li&gt;必须使用编译器生成的copy-assignment operator。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个基类和非static数据成员必须有trivial copy-assignment operator；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这可以使得编译器将&lt;code&gt;memcpy()&lt;/code&gt;或等价的操作用于assignment operation。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个类型必须是bitwise equality comparable。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这里接着2，不仅要能够使用&lt;code&gt;memcpy()&lt;/code&gt;来copy，还要能使用&lt;code&gt;memcmp()&lt;/code&gt;来比较（以便compare/exchange能工作）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;为什么要满足？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;strong&gt;user-supplied&lt;/strong&gt; copy-assignment or comparison operators were permitted, this would &lt;strong&gt;require passing a reference to the protected data&lt;/strong&gt; as an argument &lt;strong&gt;to a user-supplied function&lt;/strong&gt;, thus violating the guideline.&lt;/li&gt;
&lt;li&gt;增大了编译器对&lt;code&gt;std::atomic&amp;lt;UDT&amp;gt;&lt;/code&gt;直接使用atomic instruction的可能，因为编译器可以把UDT看作a set of raw bytes。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;std::atomic&amp;lt;float&amp;gt; and std::atomic&amp;lt;double&amp;gt;&lt;/code&gt;？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为表示的不同，即使相等&lt;code&gt;compare_exchange_strong()&lt;/code&gt;也会fail。&lt;/p&gt;
&lt;h2 id=&quot;Free-functions-for-atomic-operations&quot;&gt;&lt;a href=&quot;#Free-functions-for-atomic-operations&quot; class=&quot;headerlink&quot; title=&quot;Free functions for atomic operations&quot;&gt;&lt;/a&gt;Free functions for atomic operations&lt;/h2&gt;&lt;p&gt;与原子类型的成员函数相对应，也有相应的非成员函数，大多数前面都会加上&lt;code&gt;atomic_&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要注意的地方有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用含有&lt;code&gt;_explict&lt;/code&gt;的版本来指定memory ordering；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有free functions的第一个参数类型都是pointer to atomic objcet(为了C-compatible)；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于CAS，要么不指定failure memory ordering，要么两个都要指定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于&lt;code&gt;std::atomic_flag&lt;/code&gt;只能，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::atomic_flag_test_and_set()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::atomic_flag_clear()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::atomic_flag_test_and_set_explicit()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::atomic_flag_clear_explicit()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;std::shared_ptr&amp;lt;&amp;gt;&lt;/code&gt;算是特殊，它非atomic type，但支持load, store, exchange and compare/exchange。这些free functions第一个参数接受&lt;code&gt;std::shared_ptr&amp;lt;&amp;gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24437396/stdatomic-flag-as-member-variable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;std::atomic_flag as member variable&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      The C++ memory model and operations on atomic types的笔记。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="cpp11" scheme="http://chaomai.github.io/tags/cpp11/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Notes of CS100.1x Introduction to Big Data With Apache Spark (1)</title>
    <link href="http://chaomai.github.io/2015/06/26/2015-2015-06-26-notes-of-cs100-1x-introduction-to-big-data-with-apache-spark-1/"/>
    <id>http://chaomai.github.io/2015/06/26/2015-2015-06-26-notes-of-cs100-1x-introduction-to-big-data-with-apache-spark-1/</id>
    <published>2015-06-26T09:15:43.000Z</published>
    <updated>2015-09-25T11:07:39.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Lecture-3-Big-Data-Hardware-Trends-and-Apache-Spark-and-Lecture-4-Spark-Essentials&quot;&gt;&lt;a href=&quot;#Lecture-3-Big-Data-Hardware-Trends-and-Apache-Spark-and-Lecture-4-Spark-Essentials&quot; class=&quot;headerlink&quot; title=&quot;Lecture 3: Big Data, Hardware Trends, and Apache Spark and Lecture 4: Spark Essentials&quot;&gt;&lt;/a&gt;Lecture 3: Big Data, Hardware Trends, and Apache Spark and Lecture 4: Spark Essentials&lt;/h2&gt;&lt;h3 id=&quot;The-Big-Data-Problem&quot;&gt;&lt;a href=&quot;#The-Big-Data-Problem&quot; class=&quot;headerlink&quot; title=&quot;The Big Data Problem&quot;&gt;&lt;/a&gt;The Big Data Problem&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Growing data sources&lt;/li&gt;
&lt;li&gt;Storage getting cheapper&lt;/li&gt;
&lt;li&gt;But stalling CPU and storage bottlenecks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Hardware-for-Big-Data&quot;&gt;&lt;a href=&quot;#Hardware-for-Big-Data&quot; class=&quot;headerlink&quot; title=&quot;Hardware for Big Data&quot;&gt;&lt;/a&gt;Hardware for Big Data&lt;/h3&gt;&lt;p&gt;Problems with cheap hardware&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Failures&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;li&gt;Uneven performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;What’s-Hard-About-Cluster-Computing&quot;&gt;&lt;a href=&quot;#What’s-Hard-About-Cluster-Computing&quot; class=&quot;headerlink&quot; title=&quot;What’s Hard About Cluster Computing&quot;&gt;&lt;/a&gt;What’s Hard About Cluster Computing&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Divide work across machines&lt;ul&gt;
&lt;li&gt;Must consider network, data locality&lt;/li&gt;
&lt;li&gt;Moving data may be veay expensive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deal with failures&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Spark-Essentials&quot;&gt;&lt;a href=&quot;#Spark-Essentials&quot; class=&quot;headerlink&quot; title=&quot;Spark Essentials&quot;&gt;&lt;/a&gt;Spark Essentials&lt;/h2&gt;&lt;h3 id=&quot;PySpark&quot;&gt;&lt;a href=&quot;#PySpark&quot; class=&quot;headerlink&quot; title=&quot;PySpark&quot;&gt;&lt;/a&gt;PySpark&lt;/h3&gt;&lt;p&gt;A Spark program consists of two programs, a driver program&lt;br&gt;and a workers program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Drivers program: runs on the driver machine.&lt;/li&gt;
&lt;li&gt;Worker programs: run on cluster nodes&lt;br&gt;or in local threads.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDDs are distributed across the workers.&lt;/p&gt;
&lt;h3 id=&quot;RDD&quot;&gt;&lt;a href=&quot;#RDD&quot; class=&quot;headerlink&quot; title=&quot;RDD&quot;&gt;&lt;/a&gt;RDD&lt;/h3&gt;&lt;p&gt;An RDD is immutable, so once it is created, it cannot be changed.&lt;/p&gt;
&lt;p&gt;types of operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;transformations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lazily evaluated.&lt;/li&gt;
&lt;li&gt;A transformed RDD is executed only when an action runs on it.&lt;/li&gt;
&lt;li&gt;can also persist, or cache RDDs in memory or on disk.&lt;br&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;actions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cause Spark to execute the recipe to transform the source data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Spark-Programming-Model&quot;&gt;&lt;a href=&quot;#Spark-Programming-Model&quot; class=&quot;headerlink&quot; title=&quot;Spark Programming Model&quot;&gt;&lt;/a&gt;Spark Programming Model&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lines = sc.textFile(&lt;span class=&quot;string&quot;&gt;&quot;...&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments = lines.filter(isComment)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; lines.count(), comments.count()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;comments.count()&lt;/code&gt; is going to cause Spark to re-compute lines. reread all of the data from that text file again, sum within the partition the number of lines, so the number of elements, and then combine those sums in the driver.&lt;/p&gt;
&lt;h3 id=&quot;Caching-RDDS&quot;&gt;&lt;a href=&quot;#Caching-RDDS&quot; class=&quot;headerlink&quot; title=&quot;Caching RDDS&quot;&gt;&lt;/a&gt;Caching RDDS&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lines = sc.textFile(&lt;span class=&quot;string&quot;&gt;&quot;...&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lines.cache()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments = lines.filter(isComment)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; lines.count(), comments.count()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;create the comments RDD directly, instead of reading from disk.&lt;/p&gt;
&lt;h3 id=&quot;Spark-Program-Lifecycle&quot;&gt;&lt;a href=&quot;#Spark-Program-Lifecycle&quot; class=&quot;headerlink&quot; title=&quot;Spark Program Lifecycle&quot;&gt;&lt;/a&gt;Spark Program Lifecycle&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;create RDDs from some external data source or parallelize a collection in your driver program.&lt;/li&gt;
&lt;li&gt;lazily transform these RDDs into new RDDs.&lt;/li&gt;
&lt;li&gt;cache some of those RDDs for future reuse.&lt;/li&gt;
&lt;li&gt;perform actions to execute parallel computation and to produce results.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Spark-Broadcast-Variables&quot;&gt;&lt;a href=&quot;#Spark-Broadcast-Variables&quot; class=&quot;headerlink&quot; title=&quot;Spark Broadcast Variables&quot;&gt;&lt;/a&gt;Spark Broadcast Variables&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;broadcast_var = sc.broadcast([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;broadcast_var.value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Keep a read-only variable cached at a worker and will be reused every time we need to access it instead of constructing another closure.&lt;/p&gt;
&lt;h3 id=&quot;Spark-Accumulators&quot;&gt;&lt;a href=&quot;#Spark-Accumulators&quot; class=&quot;headerlink&quot; title=&quot;Spark Accumulators&quot;&gt;&lt;/a&gt;Spark Accumulators&lt;/h3&gt;&lt;p&gt;could only be added to by an associative operation. They’re used to very efficiently implement parallel counters and sums, and only the driver can read an accumulator’s values, not the tasks.&lt;/p&gt;
&lt;p&gt;can be used in actions or transformations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;actions: each tasks update to the accumulator is guaranteed by spark to &lt;strong&gt;only be applied once&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;transformations: no guarantee.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;support the types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;integers&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;custom types&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;About-pySpark&quot;&gt;&lt;a href=&quot;#About-pySpark&quot; class=&quot;headerlink&quot; title=&quot;About pySpark&quot;&gt;&lt;/a&gt;About pySpark&lt;/h2&gt;&lt;h3 id=&quot;Spark-Context&quot;&gt;&lt;a href=&quot;#Spark-Context&quot; class=&quot;headerlink&quot; title=&quot;Spark Context&quot;&gt;&lt;/a&gt;Spark Context&lt;/h3&gt;&lt;p&gt;When running Spark, you start a new Spark application by creating a SparkContext. When the SparkContext is created, it asks the master for some cores to use to do work. The master sets these cores aside just for you; they &lt;strong&gt;won’t be used for other applications&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Driver programs access Spark through a SparkContext object, which represents &lt;strong&gt;a connection to a computing cluster&lt;/strong&gt;. A Spark context object (sc) is the main entry point for Spark functionality. A Spark context can be used to create Resilient Distributed Datasets (RDDs) on a cluster.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://spark-mooc.github.io/web-assets/images/executors.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Resilient-Distributed-Datasets-RDDs&quot;&gt;&lt;a href=&quot;#Resilient-Distributed-Datasets-RDDs&quot; class=&quot;headerlink&quot; title=&quot;Resilient Distributed Datasets (RDDs)&quot;&gt;&lt;/a&gt;Resilient Distributed Datasets (RDDs)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://spark-mooc.github.io/web-assets/images/partitions.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map()&quot;&gt;&lt;/a&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;When you run &lt;code&gt;map()&lt;/code&gt; on a dataset, a &lt;strong&gt;single stage of tasks&lt;/strong&gt; is launched. A stage is &lt;em&gt;a group of tasks that all perform the same computation, but on different input data&lt;/em&gt;. &lt;strong&gt;One task is launched for each partition&lt;/strong&gt;. A task is &lt;em&gt;a unit of execution that runs on a single machine&lt;/em&gt;. When we run &lt;code&gt;map(f)&lt;/code&gt; within a partition, a new task applies f to all of the entries in a particular partition, and outputs a new partition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://spark-mooc.github.io/web-assets/images/map.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When applying the &lt;code&gt;map()&lt;/code&gt; transformation, each item in the parent RDD will map to one element in the new RDD.&lt;/p&gt;
&lt;h3 id=&quot;collect&quot;&gt;&lt;a href=&quot;#collect&quot; class=&quot;headerlink&quot; title=&quot;collect()&quot;&gt;&lt;/a&gt;&lt;code&gt;collect()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;the data returned to the driver &lt;strong&gt;must fit into the driver’s available memory&lt;/strong&gt;. If not, the driver will crash.&lt;/p&gt;
&lt;h3 id=&quot;first-and-take&quot;&gt;&lt;a href=&quot;#first-and-take&quot; class=&quot;headerlink&quot; title=&quot;first() and take()&quot;&gt;&lt;/a&gt;&lt;code&gt;first()&lt;/code&gt; and &lt;code&gt;take()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;first()&lt;/code&gt; and &lt;code&gt;take()&lt;/code&gt; actions, the elements that are returned depend on how the RDD is partitioned.&lt;/p&gt;
&lt;h3 id=&quot;takeOrdered&quot;&gt;&lt;a href=&quot;#takeOrdered&quot; class=&quot;headerlink&quot; title=&quot;takeOrdered()&quot;&gt;&lt;/a&gt;&lt;code&gt;takeOrdered()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The key advantage of using &lt;code&gt;takeOrdered()&lt;/code&gt; instead of &lt;code&gt;first()&lt;/code&gt; or &lt;code&gt;take()&lt;/code&gt; is that &lt;code&gt;takeOrdered()&lt;/code&gt; returns a &lt;strong&gt;deterministic result&lt;/strong&gt;, while the other two actions may return different results, &lt;em&gt;depending on the number of partitions or execution environment&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;takeOrdered()&lt;/code&gt; returns the list sorted in &lt;strong&gt;ascending order&lt;/strong&gt;. The &lt;code&gt;top()&lt;/code&gt; action is similar to &lt;code&gt;takeOrdered()&lt;/code&gt; except that it returns the list in &lt;strong&gt;descending order&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;reduce&quot;&gt;&lt;a href=&quot;#reduce&quot; class=&quot;headerlink&quot; title=&quot;reduce()&quot;&gt;&lt;/a&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;reduces the elements of a RDD to a single value by applying a function that takes two parameters and returns a single value.&lt;/p&gt;
&lt;p&gt;The function should be &lt;strong&gt;commutative and associative（可交换和可结合）&lt;/strong&gt;, as &lt;code&gt;reduce()&lt;/code&gt; is applied at the partition level and then again to aggregate results from partitions.&lt;/p&gt;
&lt;h3 id=&quot;takeSample-and-countByValue&quot;&gt;&lt;a href=&quot;#takeSample-and-countByValue&quot; class=&quot;headerlink&quot; title=&quot;takeSample() and countByValue()&quot;&gt;&lt;/a&gt;&lt;code&gt;takeSample()&lt;/code&gt; and &lt;code&gt;countByValue()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;takeSample()&lt;/code&gt; action returns an array with a random sample of elements from the dataset. It takes in a &lt;code&gt;withReplacement&lt;/code&gt; argument, which specifies whether it is okay to randomly pick the same item multiple times from the parent RDD. It also takes an optional &lt;code&gt;seed&lt;/code&gt; parameter that allows you to specify a seed value for the random number generator, so that reproducible results can be obtained.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;countByValue()&lt;/code&gt; action returns &lt;strong&gt;the count of each unique value&lt;/strong&gt; in the RDD as a dictionary that maps values to counts.&lt;/p&gt;
&lt;h3 id=&quot;flatMap&quot;&gt;&lt;a href=&quot;#flatMap&quot; class=&quot;headerlink&quot; title=&quot;flatMap()&quot;&gt;&lt;/a&gt;&lt;code&gt;flatMap()&lt;/code&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;simpleRDD = sc.parallelize([[[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], [[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], [[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; simpleRDD.map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x:x).collect()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; simpleRDD.flatMap(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x:x).collect()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], [[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], [[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;groupByKey-and-reduceByKey&quot;&gt;&lt;a href=&quot;#groupByKey-and-reduceByKey&quot; class=&quot;headerlink&quot; title=&quot;groupByKey() and reduceByKey()&quot;&gt;&lt;/a&gt;&lt;code&gt;groupByKey()&lt;/code&gt; and &lt;code&gt;reduceByKey()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Both of these transformations operate on &lt;em&gt;pair RDDs&lt;/em&gt;. A pair RDD is an RDD where &lt;em&gt;each element is a pair tuple (key, value)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://spark-mooc.github.io/web-assets/images/reduce_by.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://spark-mooc.github.io/web-assets/images/group_by.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reduceByKey()&lt;/code&gt; operates by applying the function first within each partition on a per-key basis and then across the partitions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;reduceByKey()&lt;/code&gt; transformation works much better for large distributed datasets. This is because Spark knows it can &lt;em&gt;combine output with a common key on each partition before shuffling&lt;/em&gt; (redistributing) the data across nodes. Only use &lt;code&gt;groupByKey()&lt;/code&gt; if the operation would not benefit from reducing the data before the shuffle occurs.&lt;/li&gt;
&lt;li&gt;On the other hand, when using the &lt;code&gt;groupByKey()&lt;/code&gt; transformation - all the key-value pairs are shuffled around, causing a lot of unnecessary data to being transferred over the network.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cache-and-unpersist&quot;&gt;&lt;a href=&quot;#cache-and-unpersist&quot; class=&quot;headerlink&quot; title=&quot;cache() and unpersist()&quot;&gt;&lt;/a&gt;&lt;code&gt;cache()&lt;/code&gt; and &lt;code&gt;unpersist()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;if you cache too many RDDs and Spark runs out of memory, it will delete the least recently used (LRU) RDD first. The RDD will be automatically recreated when accessed.&lt;/p&gt;
&lt;p&gt;tell Spark to stop caching it in memory by using the RDD’s &lt;code&gt;unpersist()&lt;/code&gt; method.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Notes of Lecture 3 Big Data, Hardware Trends, and Apache Spark.
    
    </summary>
    
      <category term="spark" scheme="http://chaomai.github.io/categories/spark/"/>
    
    
      <category term="spark" scheme="http://chaomai.github.io/tags/spark/"/>
    
      <category term="pyspark" scheme="http://chaomai.github.io/tags/pyspark/"/>
    
      <category term="edx" scheme="http://chaomai.github.io/tags/edx/"/>
    
  </entry>
  
  <entry>
    <title>Tmux</title>
    <link href="http://chaomai.github.io/2015/06/22/2015-2015-06-22-tmux/"/>
    <id>http://chaomai.github.io/2015/06/22/2015-2015-06-22-tmux/</id>
    <published>2015-06-22T12:36:57.000Z</published>
    <updated>2015-09-25T11:08:59.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Basic&quot;&gt;&lt;a href=&quot;#Basic&quot; class=&quot;headerlink&quot; title=&quot;Basic&quot;&gt;&lt;/a&gt;Basic&lt;/h2&gt;&lt;h3 id=&quot;Creating-Named-Sessions&quot;&gt;&lt;a href=&quot;#Creating-Named-Sessions&quot; class=&quot;headerlink&quot; title=&quot;Creating Named Sessions&quot;&gt;&lt;/a&gt;Creating Named Sessions&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux new-session &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; basic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux new &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; basic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Detaching-Sessions&quot;&gt;&lt;a href=&quot;#Detaching-Sessions&quot; class=&quot;headerlink&quot; title=&quot;Detaching Sessions&quot;&gt;&lt;/a&gt;Detaching Sessions&lt;/h3&gt;&lt;p&gt;&lt;code&gt;CTRL-b&lt;/code&gt;, then &lt;code&gt;d&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Reattaching-to-Existing-Sessions&quot;&gt;&lt;a href=&quot;#Reattaching-to-Existing-Sessions&quot; class=&quot;headerlink&quot; title=&quot;Reattaching to Existing Sessions&quot;&gt;&lt;/a&gt;Reattaching to Existing Sessions&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux new-session &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; basic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;If there is only session, then &lt;code&gt;tmux attach&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If there are multiple sessions, then &lt;code&gt;tmux attach -t second_session&lt;/code&gt;. BTY, you can also use this when you only have one session.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Killing-Sessions&quot;&gt;&lt;a href=&quot;#Killing-Sessions&quot; class=&quot;headerlink&quot; title=&quot;Killing Sessions&quot;&gt;&lt;/a&gt;Killing Sessions&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;In sesssion, use &lt;code&gt;exit&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Kill specific session when not in session,&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt;-session -t basic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;BTY, if there is no sessions, after typing &lt;code&gt;tmux ls&lt;/code&gt;, you will get&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;failed to connect to server: Connection refused&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Creating-and-Naming-Windows&quot;&gt;&lt;a href=&quot;#Creating-and-Naming-Windows&quot; class=&quot;headerlink&quot; title=&quot;Creating and Naming Windows&quot;&gt;&lt;/a&gt;Creating and Naming Windows&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In terminal&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;-n&lt;/code&gt;: the name of new window.&lt;/p&gt;
  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux new &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; windows -n shell&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In session&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;PREFIX c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;PREFIX ,&lt;/code&gt; will rename the new window.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Moving-Between-Windows&quot;&gt;&lt;a href=&quot;#Moving-Between-Windows&quot; class=&quot;headerlink&quot; title=&quot;Moving Between Windows&quot;&gt;&lt;/a&gt;Moving Between Windows&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;next and previous window&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;PREFIX n&lt;/code&gt; and &lt;code&gt;PREFIX p&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;default id of window&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;PREFIX 0&lt;/code&gt; to &lt;code&gt;PREFIX 9&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;find a window&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;PREFIX f&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;window list&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;PREFIX w&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Close-a-Window&quot;&gt;&lt;a href=&quot;#Close-a-Window&quot; class=&quot;headerlink&quot; title=&quot;Close a Window&quot;&gt;&lt;/a&gt;Close a Window&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;type &lt;code&gt;exit&lt;/code&gt; after command finish executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PREFIX &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to quit a tmux session, you’ll have to close all windows.&lt;/p&gt;
&lt;h3 id=&quot;Panes&quot;&gt;&lt;a href=&quot;#Panes&quot; class=&quot;headerlink&quot; title=&quot;Panes&quot;&gt;&lt;/a&gt;Panes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vertically: &lt;code&gt;PREFIX %&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;horizontally: &lt;code&gt;PREFIX &amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;switch between them:&lt;ul&gt;
&lt;li&gt;cycle through: &lt;code&gt;PREFIX o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PREFIX UP&lt;/code&gt;, &lt;code&gt;PREFIX DOWN&lt;/code&gt;, &lt;code&gt;PREFIX LEFT&lt;/code&gt;, or &lt;code&gt;PREFIX RIGHT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Pane-Layouts&quot;&gt;&lt;a href=&quot;#Pane-Layouts&quot; class=&quot;headerlink&quot; title=&quot;Pane Layouts&quot;&gt;&lt;/a&gt;Pane Layouts&lt;/h3&gt;&lt;p&gt;types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;even-horizontal&lt;/li&gt;
&lt;li&gt;even-vertical&lt;/li&gt;
&lt;li&gt;main-horizontal&lt;/li&gt;
&lt;li&gt;main-vertical&lt;/li&gt;
&lt;li&gt;tiled&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cycle through these types by pressing &lt;code&gt;PREFIX SPACEBAR&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Closing-Panes&quot;&gt;&lt;a href=&quot;#Closing-Panes&quot; class=&quot;headerlink&quot; title=&quot;Closing Panes&quot;&gt;&lt;/a&gt;Closing Panes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PREFIX X&lt;/code&gt;. If there is only one pane in current window, it will close this window at the same time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Command-Mode&quot;&gt;&lt;a href=&quot;#Command-Mode&quot; class=&quot;headerlink&quot; title=&quot;Command Mode&quot;&gt;&lt;/a&gt;Command Mode&lt;/h3&gt;&lt;p&gt;press &lt;code&gt;PREFIX :&lt;/code&gt; to enter command mode.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create new window with a name,&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;new-window -n console&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;create new window with a name and a command,&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;new-window -n processes &lt;span class=&quot;string&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;top&lt;/code&gt; will execute immediately after new window created. What’s really cool is that &lt;strong&gt;this window close instantly when you press &lt;code&gt;q&lt;/code&gt; to close top.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Quick-Reference&quot;&gt;&lt;a href=&quot;#Quick-Reference&quot; class=&quot;headerlink&quot; title=&quot;Quick Reference&quot;&gt;&lt;/a&gt;Quick Reference&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;创建会话&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tmux new-session&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个未命名的会话。可以简写为 &lt;code&gt;tmux new&lt;/code&gt; 或者就一个简单的 &lt;code&gt;tmux&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tmux new -s development&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个名为“development”的会话&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tmux new -s development -n editor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个名为“development”的会话并把该会话的第一个窗口命名为“editor”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tmux attach -t development&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;连接到一个名为“development”的会话&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;会话、窗口和面板的默认快捷键&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从一个会话中分离，让该会话在后台运行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX :&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;进入命令模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在当前tmux会话创建一个新的窗口，是 new-window 命令的简写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX 0...9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据窗口的编号选择窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示当前会话中所有窗口的可选择列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX ,&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示一个提示符来重命名一个窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX &amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭当前窗口，带有确认提示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX %&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把当前窗口垂直地一分为二，分割后的两个面板各占50%大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX &amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把当前窗口水平地一分为二，分割后的两个面板各占50%大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX o&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在已打开的面板之间循环移动当前焦点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;短暂地显示每个面板的编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭当前面板，带有确认提示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PREFIX SPACE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;循环地使用tmux的几个默认面板布局&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;[tmux-Productive-Mouse-Free-Development_zh(&lt;a href=&quot;https://github.com/aqua7regia/tmux-Productive-Mouse-Free-Development_zh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/aqua7regia/tmux-Productive-Mouse-Free-Development_zh&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      tmux的简单操作。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="linux" scheme="http://chaomai.github.io/tags/linux/"/>
    
      <category term="tmux" scheme="http://chaomai.github.io/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>Apt-Get Hold Version</title>
    <link href="http://chaomai.github.io/2015/06/16/2015-2015-06-16-apt-get-hold-version/"/>
    <id>http://chaomai.github.io/2015/06/16/2015-2015-06-16-apt-get-hold-version/</id>
    <published>2015-06-16T14:56:47.000Z</published>
    <updated>2015-07-14T14:28:08.000Z</updated>
    
    <content type="html">&lt;p&gt;If you want some specific package not to be processed（keep the current version with the current status whatever that is）, you can hold it.&lt;/p&gt;
&lt;h2 id=&quot;hold&quot;&gt;&lt;a href=&quot;#hold&quot; class=&quot;headerlink&quot; title=&quot;hold&quot;&gt;&lt;/a&gt;hold&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;package_name hold&quot;&lt;/span&gt; | dpkg --set-selections&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;unhold&quot;&gt;&lt;a href=&quot;#unhold&quot; class=&quot;headerlink&quot; title=&quot;unhold&quot;&gt;&lt;/a&gt;unhold&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;package_name install&quot;&lt;/span&gt; | dpkg --set-selecions&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.debian.org/doc/manuals/debian-faq/ch-pkg_basics.en.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Debian GNU/Linux FAQ&lt;br&gt;Chapter 7 - Basics of the Debian package management system&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      在ubuntu上进行update的时候，有的时候会不想升级某些包，这时可以用dpkg来hold住包，不让它升级。
    
    </summary>
    
      <category term="linux" scheme="http://chaomai.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://chaomai.github.io/tags/linux/"/>
    
      <category term="ubuntu" scheme="http://chaomai.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>译 - Understand `Std::atomic::compare_exchange_weak()` in C++11</title>
    <link href="http://chaomai.github.io/2015/06/09/2015-2015-06-09-translation-understand-std-atomic-compare-exchange-weak-in-cpp11/"/>
    <id>http://chaomai.github.io/2015/06/09/2015-2015-06-09-translation-understand-std-atomic-compare-exchange-weak-in-cpp11/</id>
    <published>2015-06-08T16:00:49.000Z</published>
    <updated>2016-02-23T06:20:29.393Z</updated>
    
    <content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;&lt;br&gt;原文是stackoverflow上的&lt;a href=&quot;http://stackoverflow.com/questions/25199838/understanding-stdatomiccompare-exchange-weak-in-c11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个关于&lt;code&gt;compare_exchange_weak()&lt;/code&gt;问题和相应的答案&lt;/a&gt;。&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare_exchange_weak&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(T&amp;amp; expected, T val, ..)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;compare_exchange_weak()&lt;/code&gt;是C++11中提供的compare-exchange原语之一。之所以是&lt;strong&gt;weak&lt;/strong&gt;，是因为即使在对象的值等于&lt;code&gt;expected&lt;/code&gt;的情况下，也返回false。这是因为在某些平台上的&lt;strong&gt;spurious failure&lt;/strong&gt;，这些平台使用了一系列的指令（而不是像在x86上一样，使用单条的指令）来实现CAS。在这种平台上，context switch, reloading of the same address (or cache line) by another thread等，将会导致这条原语失败。由于不是因为对象的值（不等于&lt;code&gt;expected&lt;/code&gt;）导致的操作失败，因此是&lt;code&gt;spurious&lt;/code&gt;。相反的，it’s kind of timing issues。&lt;/p&gt;
&lt;p&gt;但是困扰我的是C++11标准（ISO/IEC 14882）里的，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;29.6.5 .. A consequence of spurious failure is that nearly all uses of weak compare-and-exchange will be in a loop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么in &lt;strong&gt;nearly all uses&lt;/strong&gt;都必须在一个loop中？这是不是意味着因为有spurious failures，当它失败的时候，我们将会loop？如果这是原因，那么为什么我们还要那么麻烦的使用&lt;code&gt;compare_exchange_weak()&lt;/code&gt;，并且自己写loop？我们可以直接使用&lt;code&gt;compare_exchange_strong()&lt;/code&gt;，我认为这样可以让我们摆脱spurious failures。&lt;code&gt;compare_exchange_weak()&lt;/code&gt;通常在什么情况下使用？&lt;/p&gt;
&lt;p&gt;另一个相关的问题是，在Anthony的”C++ Concurrency In Action”一书中写到，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Because compare_exchange_weak() can fail spuriously, it must typically&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//be used in a loop:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; expected=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; atomic&amp;lt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&amp;gt; b; &lt;span class=&quot;comment&quot;&gt;// set somewhere else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!b.compare_exchange_weak(expected,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;amp;&amp;amp; !expected);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//In this case, you keep looping as long as expected is still false,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//indicating that the compare_exchange_weak() call failed spuriously.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么在loop的条件中有!expected？它是不是防止了所有线程可能会starve，并且在一段时间里make no progress？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit：(最后一个问题)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在那些没有单条硬件CAS指令的平台上，weak和strong版本都是使用LL/SC来实现的（像ARM，PowerPC等）。那么下面的两种loop之间是否有区别？如果有的话，为什么？（对我来说，我觉得它们应该有相似的性能）。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// use LL/SC (or CAS on x86) and ignore/loop on spurious failures&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!compare_exchange_weak(..))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; .. &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// use LL/SC (or CAS on x86) and ignore/loop on spurious failures&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!compare_exchange_strong(..))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; .. &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你们都提到，在loop在可能会存在性能上的区别。这也在C++11（ISO/IEC 14882）标准中提到，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a compare-and-exchange is in a loop, the weak version will yield better performance on some platforms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是根据上面的分析，两个版本的loop应该有相同或类似的性能。我遗漏了什么吗？&lt;/p&gt;
&lt;h2 id=&quot;Answer-1&quot;&gt;&lt;a href=&quot;#Answer-1&quot; class=&quot;headerlink&quot; title=&quot;Answer 1&quot;&gt;&lt;/a&gt;Answer 1&lt;/h2&gt;&lt;h3 id=&quot;Why-doing-exchange-in-a-loop&quot;&gt;&lt;a href=&quot;#Why-doing-exchange-in-a-loop&quot; class=&quot;headerlink&quot; title=&quot;Why doing exchange in a loop?&quot;&gt;&lt;/a&gt;Why doing exchange in a loop?&lt;/h3&gt;&lt;p&gt;通常来说，你想要在进行下一步的工作前完成当前的工作，因此，你把&lt;code&gt;compare_exchange_weak&lt;/code&gt;放入了一个loop，以便一直尝试exchange直到成功（也就是说，返回&lt;code&gt;true&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;要注意的是，&lt;code&gt;compare_exchange_strong&lt;/code&gt;也常常用在loop中。它不会因为spurious failure而失败，但会因为concurrent writes而失败。&lt;/p&gt;
&lt;h3 id=&quot;Why-to-use-weak-instead-of-strong&quot;&gt;&lt;a href=&quot;#Why-to-use-weak-instead-of-strong&quot; class=&quot;headerlink&quot; title=&quot;Why to use weak instead of strong?&quot;&gt;&lt;/a&gt;Why to use &lt;code&gt;weak&lt;/code&gt; instead of &lt;code&gt;strong&lt;/code&gt;?&lt;/h3&gt;&lt;p&gt;很简单：spurious failure并不会经常发生，因此这不会有大的性能损失。相反，tolerate这种failure允许在某些平台上有更高效的&lt;code&gt;weak&lt;/code&gt;版本的实现（与&lt;code&gt;strong&lt;/code&gt;相比较）。&lt;code&gt;strong&lt;/code&gt;必须每次都检查spurious failure，并处理它，这是有代价的。&lt;/p&gt;
&lt;p&gt;因此，&lt;code&gt;weak&lt;/code&gt;在某些平台上比&lt;code&gt;strong&lt;/code&gt;更快使得&lt;code&gt;weak&lt;/code&gt;被使用。&lt;/p&gt;
&lt;h3 id=&quot;When-should-you-use-weak-and-when-strong&quot;&gt;&lt;a href=&quot;#When-should-you-use-weak-and-when-strong&quot; class=&quot;headerlink&quot; title=&quot;When should you use weak and when strong?&quot;&gt;&lt;/a&gt;When should you use &lt;code&gt;weak&lt;/code&gt; and when &lt;code&gt;strong&lt;/code&gt;?&lt;/h3&gt;&lt;p&gt;这个&lt;a href=&quot;http://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文献&lt;/a&gt;指明了什么时候用&lt;code&gt;weak&lt;/code&gt;，什么时候用&lt;code&gt;strong&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a compare-and-exchange is in a loop, the weak version will yield better performance on some platforms. When a weak compare-and-exchange would require a loop and a strong one would not, the strong one is preferable.&lt;/p&gt;
&lt;p&gt;当compare-and-exchange在loop中，weak版本在某些平台上会有更高的性能。当一个weak的compare-and-exchange需要一个loop，而strong的不需要，那么用strong的更合适。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此这个答案很容易记住：如果你使用loop仅仅是由于spurious failure，那么不要使用loop；用&lt;code&gt;strong&lt;/code&gt;。如果你无法避免的要使用loop，那么就是用&lt;code&gt;weak&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Why-is-expected-in-the-example&quot;&gt;&lt;a href=&quot;#Why-is-expected-in-the-example&quot; class=&quot;headerlink&quot; title=&quot;Why is !expected in the example?&quot;&gt;&lt;/a&gt;Why is &lt;code&gt;!expected&lt;/code&gt; in the example?&lt;/h3&gt;&lt;p&gt;这视实际情况和期望的语义而定，但是通常it is not needed for correctness。忽略它会产生一个非常相似的语义。仅仅在另一个线程可能会把值reset为&lt;code&gt;false&lt;/code&gt;的情况下，这个语义才会有细微的差别（但是我没有找到一个比较meaningful的例子），Tony D的评论有更详细的解释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tony D：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“Why is !expected in the example? It is not needed for correctness. Omitting it would yield the same semantics.”&lt;/p&gt;
&lt;p&gt;并非如此。假设第一个exchange由于b已经是&lt;code&gt;true&lt;/code&gt;而失败，此时&lt;code&gt;expected&lt;/code&gt;变为&lt;code&gt;true&lt;/code&gt;。如果没有&lt;code&gt;&amp;amp;&amp;amp; !expected&lt;/code&gt;的话，它只会再次loop，并且（傻傻的）将&lt;code&gt;true&lt;/code&gt;与&lt;code&gt;true&lt;/code&gt;交换。这可能会成功并且退出&lt;code&gt;while&lt;/code&gt; loop。But could exhibit meaningfully different behavior if b had meanwhile changed back to false, in which case the loop would continue and may ultimately set b true yet again before breaking.&lt;/p&gt;
&lt;p&gt;当其他线程写入&lt;code&gt;true&lt;/code&gt;时，这是个简单快捷的方法：我们只需要终止，而不是再次尝试写入&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;About-your-last-question&quot;&gt;&lt;a href=&quot;#About-your-last-question&quot; class=&quot;headerlink&quot; title=&quot;About your last question&quot;&gt;&lt;/a&gt;About your last question&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;但是根据上面的分析，两个版本的loop应该有相同或类似的性能。我遗漏了什么吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;http://en.wikipedia.org/wiki/Load-link/store-conditional&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Real implementations of LL/SC do not always succeed if there are no concurrent updates to the memory location in question. Any exceptional events between the two operations, such as a context switch, another load-link, or even (on many platforms) another load or store operation, will cause the store-conditional to spuriously fail. Older implementations will fail if there are any updates broadcast over the memory bus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，LL/SC在发生context switch的时候将会fail spuriously。现在，&lt;code&gt;strong&lt;/code&gt;版本的会使用它“自己的小loop”来检测spurious failure，并且通过重试来处理它。要注意的是，它自己的loop要比一个普通的CAS loop要复杂，因为它必须区分spurious failure（并处理它）和由于并发访问导致的失败（这会导致返回值为&lt;code&gt;false&lt;/code&gt;）。&lt;code&gt;weak&lt;/code&gt;版的并没有这样自己的loop。&lt;/p&gt;
&lt;p&gt;既然你在两个例子中都显式的使用了loop，在&lt;code&gt;strong&lt;/code&gt;版本中是完全没有必要使用loop的。结果是，在&lt;code&gt;strong&lt;/code&gt;版本中，做了两次failure的检查；一次是&lt;code&gt;compare_exchange_strong&lt;/code&gt;做的（由于它要区分spurious failure和并发访问，这要更复杂），另一是你自己的loop做的。这样代价高昂的检查时没有必要的，&lt;code&gt;weak&lt;/code&gt;快的原因就在这里。&lt;/p&gt;
&lt;p&gt;Also note that your argument (LL/SC) is just one possibility to implement this. There are more platforms that have even different instruction sets. In addition (and more importantly), note that std::atomic must support all operations for all possible data types, 因此即使你声明了一个一千万字节的结构体，你还是可以用compare_exchange来做这个。即使当CPU有CAS指令，你也不用能够CAS一千万字节，因此编译器会生成其他的指令（可能是acquire lock，然后进行non-atomic compare and swap，接着release lock）。现在，想想当swap一千万字节的时候会发生什么。因此尽管spurious error对于8 byte的exchanges可能是非常罕见的，在这种情况下，它可能更常见。&lt;/p&gt;
&lt;h2 id=&quot;Answer-2&quot;&gt;&lt;a href=&quot;#Answer-2&quot; class=&quot;headerlink&quot; title=&quot;Answer 2&quot;&gt;&lt;/a&gt;Answer 2&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;To be continued…&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/25199838/understanding-stdatomiccompare-exchange-weak-in-c11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding std::atomic::compare_exchange_weak() in C++11&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      原文是stackoverflow上的一个关于compare_exchange_weak()问题和相应的答案，我做了简单的翻译和整理。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="cpp11" scheme="http://chaomai.github.io/tags/cpp11/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
      <category term="cas" scheme="http://chaomai.github.io/tags/cas/"/>
    
  </entry>
  
  <entry>
    <title>转 - 如何实现一个Malloc</title>
    <link href="http://chaomai.github.io/2015/06/02/2015-2015-06-02-reproduce-a-malloc-tutorial/"/>
    <id>http://chaomai.github.io/2015/06/02/2015-2015-06-02-reproduce-a-malloc-tutorial/</id>
    <published>2015-06-02T15:10:10.000Z</published>
    <updated>2015-07-14T14:28:08.000Z</updated>
    
    <content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;这篇是转自&lt;a href=&quot;ttp://blog.codinglabs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodingLabs&lt;/a&gt;的文章，除了有原文的内容，我加入了自己的一些思考和理解。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;张洋, CodingLabs&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://blog.codinglabs.org/articles/a-malloc-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何实现一个Malloc&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;任何一个用过或学过C的人对malloc都不会陌生。大家都知道malloc可以分配一段连续的内存空间，并且在不再使用时可以通过free释放掉。但是，许多程序员对malloc背后的事情并不熟悉，许多人甚至把malloc当做操作系统所提供的系统调用或C的关键字。实际上，malloc只是C的标准库中提供的一个普通函数，而且实现malloc的&lt;strong&gt;基本&lt;/strong&gt;思想并不复杂，任何一个对C和操作系统有些许了解的程序员都可以很容易理解。&lt;/p&gt;
&lt;p&gt;这篇文章通过实现一个简单的malloc来描述malloc背后的机制。当然与现有C的标准库实现（例如glibc）相比，我们实现的malloc并不是特别高效，但是这个实现比目前真实的malloc实现要简单很多，因此易于理解。重要的是，这个实现和真实实现在基本原理上是一致的。&lt;/p&gt;
&lt;p&gt;这篇文章将首先介绍一些所需的基本知识，如操作系统对进程的内存管理以及相关的系统调用，然后逐步实现一个简单的malloc。为了简单起见，这篇文章将只考虑x86_64体系结构，操作系统为Linux。&lt;/p&gt;
&lt;h1 id=&quot;什么是malloc&quot;&gt;&lt;a href=&quot;#什么是malloc&quot; class=&quot;headerlink&quot; title=&quot;什么是malloc&quot;&gt;&lt;/a&gt;什么是malloc&lt;/h1&gt;&lt;p&gt;在实现malloc之前，先要相对正式地对malloc做一个定义。&lt;/p&gt;
&lt;p&gt;根据标准C库函数的定义，malloc具有如下原型：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(size_t size)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数要实现的功能是在系统中分配一段连续的可用的内存，具体有如下要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;malloc分配的内存大小&lt;strong&gt;至少&lt;/strong&gt;为size参数所指定的字节数&lt;/li&gt;
&lt;li&gt;malloc的返回值是一个指针，指向一段可用内存的起始地址&lt;/li&gt;
&lt;li&gt;多次调用malloc所分配的地址不能有重叠部分，除非某次malloc所分配的地址被释放掉&lt;/li&gt;
&lt;li&gt;malloc应该尽快完成内存分配并返回（不能使用&lt;a href=&quot;http://en.wikipedia.org/wiki/NP-hard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NP-hard&lt;/a&gt;的内存分配算法）&lt;/li&gt;
&lt;li&gt;实现malloc时应同时实现内存大小调整和内存释放函数（即realloc和free）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于malloc更多的说明可以在命令行中键入以下命令查看：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;man malloc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h1&gt;&lt;p&gt;在实现malloc之前，需要先解释一些Linux系统内存相关的知识。&lt;/p&gt;
&lt;h2 id=&quot;Linux内存管理&quot;&gt;&lt;a href=&quot;#Linux内存管理&quot; class=&quot;headerlink&quot; title=&quot;Linux内存管理&quot;&gt;&lt;/a&gt;Linux内存管理&lt;/h2&gt;&lt;h3 id=&quot;虚拟内存地址与物理内存地址&quot;&gt;&lt;a href=&quot;#虚拟内存地址与物理内存地址&quot; class=&quot;headerlink&quot; title=&quot;虚拟内存地址与物理内存地址&quot;&gt;&lt;/a&gt;虚拟内存地址与物理内存地址&lt;/h3&gt;&lt;p&gt;为了简单，现代操作系统在处理内存地址时，普遍采用虚拟内存地址技术。即在汇编程序（或机器语言）层面，当涉及内存地址时，都是使用虚拟内存地址。采用这种技术时，每个进程仿佛自己独享一片$2^N$字节的内存，其中$N$是机器位数。例如在64位CPU和64位操作系统下，每个进程的虚拟地址空间为$2^{64}$Byte。&lt;/p&gt;
&lt;p&gt;这种虚拟地址空间的作用主要是简化程序的编写及方便操作系统对进程间内存的隔离管理，真实中的进程不太可能（也用不到）如此大的内存空间，实际能用到的内存取决于物理内存大小。&lt;/p&gt;
&lt;p&gt;由于在机器语言层面都是采用虚拟地址，当实际的机器码程序涉及到内存操作时，需要根据当前进程运行的实际上下文将虚拟地址转换为物理内存地址，才能实现对真实内存数据的操作。这个转换一般由一个叫&lt;a href=&quot;http://en.wikipedia.org/wiki/Memory_management_unit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MMU&lt;/a&gt;（Memory Management Unit）的硬件完成。&lt;/p&gt;
&lt;h3 id=&quot;页与地址构成&quot;&gt;&lt;a href=&quot;#页与地址构成&quot; class=&quot;headerlink&quot; title=&quot;页与地址构成&quot;&gt;&lt;/a&gt;页与地址构成&lt;/h3&gt;&lt;p&gt;在现代操作系统中，不论是虚拟内存还是物理内存，都不是以字节为单位进行管理的，而是以页（Page）为单位。一个内存页是一段固定大小的连续内存地址的总称，具体到Linux中，典型的内存页大小为4096Byte（4K）。&lt;/p&gt;
&lt;p&gt;所以内存地址可以分为页号和页内偏移量。下面以64位机器，4G物理内存，4K页大小为例，虚拟内存地址和物理内存地址的组成如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog-codinglabs-org.qiniudn.com/image/a-malloc-tutorial-01.png&quot; alt=&quot;内存地址构成&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面是虚拟内存地址，下面是物理内存地址。由于页大小都是4K，所以页内偏移都是用低12位表示，而剩下的高地址表示页号。&lt;/p&gt;
&lt;p&gt;MMU映射单位并不是字节，而是页，这个映射通过查一个常驻内存的数据结构&lt;a href=&quot;http://en.wikipedia.org/wiki/Page_table&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;页表&lt;/a&gt;来实现。现在计算机具体的内存地址映射比较复杂，为了加快速度会引入一系列缓存和优化，例如&lt;a href=&quot;http://en.wikipedia.org/wiki/Translation_lookaside_buffer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TLB&lt;/a&gt;等机制。下面给出一个经过简化的内存地址翻译示意图，虽然经过了简化，但是基本原理与现代计算机真实的情况的一致的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog-codinglabs-org.qiniudn.com/image/a-malloc-tutorial-02.png&quot; alt=&quot;内存地址翻译&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;内存页与磁盘页&quot;&gt;&lt;a href=&quot;#内存页与磁盘页&quot; class=&quot;headerlink&quot; title=&quot;内存页与磁盘页&quot;&gt;&lt;/a&gt;内存页与磁盘页&lt;/h3&gt;&lt;p&gt;我们知道一般将内存看做磁盘的的缓存，有时MMU在工作时，会发现页表表明某个内存页不在物理内存中，此时会触发一个缺页异常（Page Fault），此时系统会到磁盘中相应的地方将磁盘页载入到内存中，然后重新执行由于缺页而失败的机器指令。关于这部分，因为可以看做对malloc实现是透明的，所以不再详细讲述，有兴趣的可以参考《深入理解计算机系统》相关章节。&lt;/p&gt;
&lt;p&gt;最后附上一张在维基百科找到的更加符合真实地址翻译的流程供大家参考，这张图加入了TLB和缺页异常的流程（&lt;a href=&quot;http://en.wikipedia.org/wiki/Page_table&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片来源页&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog-codinglabs-org.qiniudn.com/image/a-malloc-tutorial-03.png&quot; alt=&quot;较为完整的地址翻译流程&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Linux进程级内存管理&quot;&gt;&lt;a href=&quot;#Linux进程级内存管理&quot; class=&quot;headerlink&quot; title=&quot;Linux进程级内存管理&quot;&gt;&lt;/a&gt;Linux进程级内存管理&lt;/h2&gt;&lt;h3 id=&quot;内存排布&quot;&gt;&lt;a href=&quot;#内存排布&quot; class=&quot;headerlink&quot; title=&quot;内存排布&quot;&gt;&lt;/a&gt;内存排布&lt;/h3&gt;&lt;p&gt;明白了虚拟内存和物理内存的关系及相关的映射机制，下面看一下具体在一个进程内是如何排布内存的。&lt;/p&gt;
&lt;p&gt;以Linux 64位系统为例。理论上，64bit内存地址可用空间为0x0000000000000000 ~ 0xFFFFFFFFFFFFFFFF，这是个相当庞大的空间，Linux实际上只用了其中一小部分（256T）。&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;https://www.kernel.org/doc/Documentation/x86/x86_64/mm.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux内核相关文档&lt;/a&gt;描述，Linux64位操作系统仅使用低47位，高17位做扩展（只能是全0或全1）。所以，实际用到的地址为空间为0x0000000000000000 ~ 0x00007FFFFFFFFFFF和0xFFFF800000000000 ~ 0xFFFFFFFFFFFFFFFF，其中前面为用户空间（User Space），后者为内核空间（Kernel Space）。图示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog-codinglabs-org.qiniudn.com/image/a-malloc-tutorial-04.png&quot; alt=&quot;Linux进程地址排布&quot;&gt;&lt;/p&gt;
&lt;p&gt;对用户来说，主要关注的空间是User Space。将User Space放大后，可以看到里面主要分为如下几段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code：这是整个用户空间的最低地址部分，存放的是指令（也就是程序所编译成的可执行机器码）&lt;/li&gt;
&lt;li&gt;Data：这里存放的是初始化过的全局变量&lt;/li&gt;
&lt;li&gt;BSS：这里存放的是未初始化的全局变量&lt;/li&gt;
&lt;li&gt;Heap：堆，这是我们本文重点关注的地方，堆自低地址向高地址增长，后面要讲到的brk相关的系统调用就是从这里分配内存&lt;/li&gt;
&lt;li&gt;Mapping Area：这里是与mmap系统调用相关的区域。大多数实际的malloc实现会考虑通过mmap分配较大块的内存区域，本文不讨论这种情况。这个区域自高地址向低地址增长&lt;/li&gt;
&lt;li&gt;Stack：这是栈区域，自高地址向低地址增长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们主要关注Heap区域的操作。对整个Linux内存排布有兴趣的同学可以参考其它资料。&lt;/p&gt;
&lt;h3 id=&quot;Heap内存模型&quot;&gt;&lt;a href=&quot;#Heap内存模型&quot; class=&quot;headerlink&quot; title=&quot;Heap内存模型&quot;&gt;&lt;/a&gt;Heap内存模型&lt;/h3&gt;&lt;p&gt;一般来说，malloc所申请的内存主要从Heap区域分配（本文不考虑通过mmap申请大块内存的情况）。&lt;/p&gt;
&lt;p&gt;由上文知道，进程所面对的虚拟内存地址空间，只有按页映射到物理内存地址，才能真正使用。受物理存储容量限制，整个堆虚拟内存空间不可能全部映射到实际的物理内存。Linux对堆的管理示意如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog-codinglabs-org.qiniudn.com/image/a-malloc-tutorial-05.png&quot; alt=&quot;Linux进程堆管理&quot;&gt;&lt;/p&gt;
&lt;p&gt;Linux维护一个break指针，这个指针指向堆空间的某个地址。从堆起始地址到break之间的地址空间为映射好的，可以供进程访问；而从break往上，是未映射的地址空间，如果访问这段空间则程序会报错。&lt;/p&gt;
&lt;h3 id=&quot;brk与sbrk&quot;&gt;&lt;a href=&quot;#brk与sbrk&quot; class=&quot;headerlink&quot; title=&quot;brk与sbrk&quot;&gt;&lt;/a&gt;brk与sbrk&lt;/h3&gt;&lt;p&gt;由上文知道，要增加一个进程实际的可用堆大小，就需要将break指针向高地址移动。Linux通过brk和sbrk系统调用操作break指针。两个系统调用的原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;brk&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *addr)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;sbrk&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(intptr_t increment)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;brk将break指针直接设置为某个地址，而sbrk将break从当前位置移动increment所指定的增量。brk在执行成功时返回0，否则返回-1并设置errno为ENOMEM；sbrk成功时返回break移动之前所指向的地址，否则返回(void *)-1。&lt;/p&gt;
&lt;p&gt;一个小技巧是，如果将increment设置为0，则可以获得当前break的地址。&lt;/p&gt;
&lt;p&gt;另外需要注意的是，由于Linux是按页进行内存映射的，所以如果break被设置为没有按页大小对齐，则系统实际上会在最后映射一个完整的页，从而实际已映射的内存空间比break指向的地方要大一些。但是使用break之后的地址是很危险的（尽管也许break之后确实有一小块可用内存地址）。&lt;/p&gt;
&lt;h3 id=&quot;资源限制与rlimit&quot;&gt;&lt;a href=&quot;#资源限制与rlimit&quot; class=&quot;headerlink&quot; title=&quot;资源限制与rlimit&quot;&gt;&lt;/a&gt;资源限制与rlimit&lt;/h3&gt;&lt;p&gt;系统对每一个进程所分配的资源不是无限的，包括可映射的内存空间，因此每个进程有一个rlimit表示当前进程可用的资源上限。这个限制可以通过getrlimit系统调用得到，下面代码获取当前进程虚拟内存空间的rlimit：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; rlimit *limit = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; rlimit *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; rlimit));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getrlimit(RLIMIT_AS, limit);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;soft limit: %ld, hard limit: %ld\n&quot;&lt;/span&gt;, limit-&amp;gt;rlim_cur, limit-&amp;gt;rlim_max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中rlimit是一个结构体：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; rlimit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;rlim_t&lt;/span&gt; rlim_cur;  &lt;span class=&quot;comment&quot;&gt;/* Soft limit */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;rlim_t&lt;/span&gt; rlim_max;  &lt;span class=&quot;comment&quot;&gt;/* Hard limit (ceiling for rlim_cur) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每种资源有软限制和硬限制，并且可以通过setrlimit对rlimit进行有条件设置。其中硬限制作为软限制的上限，非特权进程只能设置软限制，且不能超过硬限制。&lt;/p&gt;
&lt;h1 id=&quot;实现malloc&quot;&gt;&lt;a href=&quot;#实现malloc&quot; class=&quot;headerlink&quot; title=&quot;实现malloc&quot;&gt;&lt;/a&gt;实现malloc&lt;/h1&gt;&lt;h2 id=&quot;玩具实现&quot;&gt;&lt;a href=&quot;#玩具实现&quot; class=&quot;headerlink&quot; title=&quot;玩具实现&quot;&gt;&lt;/a&gt;玩具实现&lt;/h2&gt;&lt;p&gt;在正式开始讨论malloc的实现前，我们可以利用上述知识实现一个简单但几乎没法用于真实的玩具malloc，权当对上面知识的复习：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 一个玩具malloc */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(size_t size)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sbrk(size) == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个malloc每次都在当前break的基础上增加size所指定的字节数，并将之前break的地址返回。这个malloc由于对所分配的内存缺乏记录，不便于内存释放，所以无法用于真实场景。&lt;/p&gt;
&lt;h2 id=&quot;正式实现&quot;&gt;&lt;a href=&quot;#正式实现&quot; class=&quot;headerlink&quot; title=&quot;正式实现&quot;&gt;&lt;/a&gt;正式实现&lt;/h2&gt;&lt;p&gt;下面严肃点讨论malloc的实现方案。&lt;/p&gt;
&lt;h3 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h3&gt;&lt;p&gt;首先我们要确定所采用的数据结构。一个简单可行方案是将堆内存空间以块（Block）的形式组织起来，每个块由meta区和数据区组成，meta区记录数据块的元信息（数据区大小、空闲标志位、指针等等），数据区是真实分配的内存区域，并且数据区的第一个字节地址即为malloc返回的地址。&lt;/p&gt;
&lt;p&gt;可以用如下结构体定义一个block：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; s_block *t_block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; s_block &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size;  &lt;span class=&quot;comment&quot;&gt;/* 数据区大小 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block next; &lt;span class=&quot;comment&quot;&gt;/* 指向下个块的指针 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;/* 是否是空闲块 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; padding;  &lt;span class=&quot;comment&quot;&gt;/* 填充4字节，保证meta块长度为8的倍数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;/* 这是一个虚拟字段，表示数据块的第一个字节，长度不应计入meta */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;注：&lt;/em&gt;&lt;br&gt;&lt;code&gt;data&lt;/code&gt;其实可以为&lt;code&gt;char data[]&lt;/code&gt;。&lt;br&gt;详细的解释可以看[C语言结构体里的成员数组和指针]（&lt;a href=&quot;http://coolshell.cn/articles/11377.html）中的关于零长度的数组。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://coolshell.cn/articles/11377.html）中的关于零长度的数组。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于我们只考虑64位机器，为了方便，我们在结构体最后填充一个int，使得结构体本身的长度为8的倍数，以便内存对齐。示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog-codinglabs-org.qiniudn.com/image/a-malloc-tutorial-06.png&quot; alt=&quot;Block结构&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;寻找合适的block&quot;&gt;&lt;a href=&quot;#寻找合适的block&quot; class=&quot;headerlink&quot; title=&quot;寻找合适的block&quot;&gt;&lt;/a&gt;寻找合适的block&lt;/h3&gt;&lt;p&gt;现在考虑如何在block链中查找合适的block。一般来说有两种查找算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;First fit&lt;/strong&gt;：从头开始，使用第一个数据区大小大于要求size的块所谓此次分配的块&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best fit&lt;/strong&gt;：从头开始，遍历所有块，使用数据区大小大于size且差值最小的块作为此次分配的块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种方法各有千秋，best fit具有较高的内存使用率（payload较高），而first fit具有更好的运行效率。这里我们采用first fit算法。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* First fit */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;t_block &lt;span class=&quot;title&quot;&gt;find_block&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t_block *last, size_t size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block b = first_block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(b &amp;amp;&amp;amp; !(b-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt; &amp;amp;&amp;amp; b-&amp;gt;size &amp;gt;= size)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *last = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = b-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;find_block从frist_block开始，查找第一个符合要求的block并返回block起始地址，如果找不到就返回NULL。这里在遍历时会更新一个叫last的指针，这个指针始终指向当前遍历的block。这是为了如果找不到合适的block而开辟新block使用的，具体会在接下来的一节用到。&lt;/p&gt;
&lt;h3 id=&quot;开辟新的block&quot;&gt;&lt;a href=&quot;#开辟新的block&quot; class=&quot;headerlink&quot; title=&quot;开辟新的block&quot;&gt;&lt;/a&gt;开辟新的block&lt;/h3&gt;&lt;p&gt;如果现有block都不能满足size的要求，则需要在链表最后开辟一个新的block。这里关键是如何只使用sbrk创建一个struct：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; BLOCK_SIZE 24 &lt;span class=&quot;comment&quot;&gt;/* 由于存在虚拟的data字段，sizeof不能正确计算meta长度，这里手工设置 */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;t_block &lt;span class=&quot;title&quot;&gt;extend_heap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t_block last, size_t s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sbrk(BLOCK_SIZE + s) == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b-&amp;gt;size = s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b-&amp;gt;next = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        last-&amp;gt;next = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;分裂block&quot;&gt;&lt;a href=&quot;#分裂block&quot; class=&quot;headerlink&quot; title=&quot;分裂block&quot;&gt;&lt;/a&gt;分裂block&lt;/h3&gt;&lt;p&gt;First fit有一个比较致命的缺点，就是可能会让很小的size占据很大的一块block，此时，为了提高payload，应该在剩余数据区足够大的情况下，将其分裂为一个新的block，示意如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog-codinglabs-org.qiniudn.com/image/a-malloc-tutorial-07.png&quot; alt=&quot;分裂block&quot;&gt;&lt;/p&gt;
&lt;p&gt;实现代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;split_block&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t_block b, size_t s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; = b-&amp;gt;data + s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;-&amp;gt;size = b-&amp;gt;size - s - BLOCK_SIZE ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;-&amp;gt;next = b-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b-&amp;gt;size = s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b-&amp;gt;next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;malloc的实现&quot;&gt;&lt;a href=&quot;#malloc的实现&quot; class=&quot;headerlink&quot; title=&quot;malloc的实现&quot;&gt;&lt;/a&gt;malloc的实现&lt;/h3&gt;&lt;p&gt;有了上面的代码，我们可以利用它们整合成一个简单但初步可用的malloc。注意首先我们要定义个block链表的头first_block，初始化为NULL；另外，我们需要剩余空间至少有BLOCK_SIZE + 8才执行分裂操作。&lt;/p&gt;
&lt;p&gt;由于我们希望malloc分配的数据区是按8字节对齐，所以在size不为8的倍数时，我们需要将size调整为大于size的最小的8的倍数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; align8(&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s &amp;amp; &lt;span class=&quot;number&quot;&gt;0x7&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((s &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;注：&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;0x7&lt;/code&gt;？&lt;br&gt;如果数是8的倍数，那么它的二进制表示的最后3位都是0，其实可以看作&lt;code&gt;任意数*8&lt;/code&gt;(&lt;code&gt;1000&lt;/code&gt;)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;((s &amp;gt;&amp;gt; 3) + 1) &amp;lt;&amp;lt; 3&lt;/code&gt;？&lt;br&gt;有了第1条，这里为什么是3位就很清楚了。之所以加1，是因为右移了以后，那3位丢了，s可能会变小；加1实际上是在第4位加。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; BLOCK_SIZE 24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *first_block=&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* other functions... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(size_t size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block b, last;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 对齐地址 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s = align8(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(first_block) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 查找合适的block */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        last = first_block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = find_block(&amp;amp;last, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 如果可以，则分裂 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((b-&amp;gt;size - s) &amp;gt;= ( BLOCK_SIZE + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                split_block(b, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 没有合适的block，开辟一个新的 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b = extend_heap(last, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = extend_heap(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        first_block = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;calloc的实现&quot;&gt;&lt;a href=&quot;#calloc的实现&quot; class=&quot;headerlink&quot; title=&quot;calloc的实现&quot;&gt;&lt;/a&gt;calloc的实现&lt;/h3&gt;&lt;p&gt;有了malloc，实现calloc只要两步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;malloc一段内存&lt;/li&gt;
&lt;li&gt;将数据区内容置为0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于我们的数据区是按8字节对齐的，所以为了提高效率，我们可以每8字节一组置0，而不是一个一个字节设置。我们可以通过新建一个size_t指针，将内存区域强制看做size_t类型来实现。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(size_t number, size_t size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; s8, i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(number * size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s8 = align8(number * size) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; s8; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;注：&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;align8(number * size) &amp;gt;&amp;gt; 3&lt;/code&gt;？&lt;br&gt;每8字节一组置0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;将内存区域强制看做size_t类型&lt;/code&gt;？&lt;br&gt;结合1，以及在x86_64的系统中，sizeof(size_t)是8字节。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;free的实现&quot;&gt;&lt;a href=&quot;#free的实现&quot; class=&quot;headerlink&quot; title=&quot;free的实现&quot;&gt;&lt;/a&gt;free的实现&lt;/h3&gt;&lt;p&gt;free的实现并不像看上去那么简单，这里我们要解决两个关键问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何验证所传入的地址是有效地址，即确实是通过malloc方式分配的数据区首地址&lt;/li&gt;
&lt;li&gt;如何解决碎片问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先我们要保证传入free的地址是有效的，这个有效包括两方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址应该在之前malloc所分配的区域内，即在first_block和当前break指针范围内&lt;/li&gt;
&lt;li&gt;这个地址确实是之前通过我们自己的malloc分配的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个问题比较好解决，只要进行地址比较就可以了，关键是第二个问题。这里有两种解决方案：一是在结构体内埋一个magic number字段，free之前通过相对偏移检查特定位置的值是否为我们设置的magic number，另一种方法是在结构体内增加一个magic pointer，这个指针指向数据区的第一个字节（也就是在合法时free时传入的地址），我们在free前检查magic pointer是否指向参数所指地址。这里我们采用第二种方案：&lt;/p&gt;
&lt;p&gt;首先我们在结构体中增加magic pointer（同时要修改BLOCK_SIZE）：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; s_block *t_block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; s_block &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size;  &lt;span class=&quot;comment&quot;&gt;/* 数据区大小 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block next; &lt;span class=&quot;comment&quot;&gt;/* 指向下个块的指针 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;/* 是否是空闲块 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; padding;  &lt;span class=&quot;comment&quot;&gt;/* 填充4字节，保证meta块长度为8的倍数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr;    &lt;span class=&quot;comment&quot;&gt;/* Magic pointer，指向data */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;/* 这是一个虚拟字段，表示数据块的第一个字节，长度不应计入meta */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们定义检查地址合法性的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;t_block &lt;span class=&quot;title&quot;&gt;get_block&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *p)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *tmp;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tmp = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (p = tmp -= BLOCK_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;valid_addr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *p)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(first_block) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p &amp;gt; first_block &amp;amp;&amp;amp; p &amp;lt; sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p == (get_block(p))-&amp;gt;ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;注：&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为何不直接与&lt;code&gt;data&lt;/code&gt;的地址作比较，而是另外加入了一个指针指向&lt;code&gt;data&lt;/code&gt;？&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;当多次malloc和free后，整个内存池可能会产生很多碎片block，这些block很小，经常无法使用，甚至出现许多碎片连在一起，虽然总体能满足某此malloc要求，但是由于分割成了多个小block而无法fit，这就是碎片问题。&lt;/p&gt;
&lt;p&gt;一个简单的解决方式时当free某个block时，如果发现它相邻的block也是free的，则将block和相邻block合并。为了满足这个实现，需要将s_block改为双向链表。修改后的block结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; s_block *t_block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; s_block &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size;  &lt;span class=&quot;comment&quot;&gt;/* 数据区大小 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block prev; &lt;span class=&quot;comment&quot;&gt;/* 指向上个块的指针 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block next; &lt;span class=&quot;comment&quot;&gt;/* 指向下个块的指针 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;/* 是否是空闲块 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; padding;  &lt;span class=&quot;comment&quot;&gt;/* 填充4字节，保证meta块长度为8的倍数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr;    &lt;span class=&quot;comment&quot;&gt;/* Magic pointer，指向data */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;/* 这是一个虚拟字段，表示数据块的第一个字节，长度不应计入meta */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;合并方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;t_block &lt;span class=&quot;title&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t_block b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (b-&amp;gt;next &amp;amp;&amp;amp; b-&amp;gt;next-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b-&amp;gt;size += BLOCK_SIZE + b-&amp;gt;next-&amp;gt;size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b-&amp;gt;next = b-&amp;gt;next-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b-&amp;gt;next-&amp;gt;prev = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;注：&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仅有&lt;code&gt;prev&lt;/code&gt;有何不可？感觉这里没有必要做成双向链表。&lt;br&gt;&lt;strong&gt;Update&lt;/strong&gt;：不行。如果不是双向链表，那么没有办法知道，当前的block是不是最后一个block（这个block可能很大），也就没有办法释放它。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了上述方法，free的实现思路就比较清晰了：首先检查参数地址的合法性，如果不合法则不做任何事；否则，将此block的free标为1，并且在可以的情况下与后面的block进行合并。如果当前是最后一个block，则回退break指针释放进程内存，如果当前block是最后一个block，则回退break指针并设置first_block为NULL。实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *p)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(valid_addr(p)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = get_block(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b-&amp;gt;prev &amp;amp;&amp;amp; b-&amp;gt;prev-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b = fusion(b-&amp;gt;prev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b-&amp;gt;next)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fusion(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b-&amp;gt;prev)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                b-&amp;gt;prev-&amp;gt;prev = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                first_block = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            brk(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;realloc的实现&quot;&gt;&lt;a href=&quot;#realloc的实现&quot; class=&quot;headerlink&quot; title=&quot;realloc的实现&quot;&gt;&lt;/a&gt;realloc的实现&lt;/h3&gt;&lt;p&gt;为了实现realloc，我们首先要实现一个内存复制方法。如同calloc一样，为了效率，我们以8字节为单位进行复制：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;copy_block&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t_block src, t_block dst)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; *sdata, *ddata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sdata = src-&amp;gt;ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ddata = dst-&amp;gt;ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; (i * &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) &amp;lt; src-&amp;gt;size &amp;amp;&amp;amp; (i * &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) &amp;lt; dst-&amp;gt;size; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ddata[i] = sdata[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们开始实现realloc。一个简单（但是低效）的方法是malloc一段内存，然后将数据复制过去。但是我们可以做的更高效，具体可以考虑以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果当前block的数据区大于等于realloc所要求的size，则不做任何操作&lt;/li&gt;
&lt;li&gt;如果新的size变小了，考虑split&lt;/li&gt;
&lt;li&gt;如果当前block的数据区不能满足size，但是其后继block是free的，并且合并后可以满足，则考虑做合并&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是realloc的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;realloc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *p, size_t size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t_block b, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *newp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 根据标准库文档，当p传入NULL时，相当于调用malloc */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(valid_addr(p)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s = align8(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b = get_block(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b-&amp;gt;size &amp;gt;= s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b-&amp;gt;size - s &amp;gt;= (BLOCK_SIZE + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                split_block(b,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 看是否可进行合并 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b-&amp;gt;next &amp;amp;&amp;amp; b-&amp;gt;next-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;amp;&amp;amp; (b-&amp;gt;size + BLOCK_SIZE + b-&amp;gt;next-&amp;gt;size) &amp;gt;= s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fusion(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b-&amp;gt;size - s &amp;gt;= (BLOCK_SIZE + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    split_block(b, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* 新malloc */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                newp = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt; (s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!newp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; = get_block(newp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                copy_block(b, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(newp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;遗留问题和优化&quot;&gt;&lt;a href=&quot;#遗留问题和优化&quot; class=&quot;headerlink&quot; title=&quot;遗留问题和优化&quot;&gt;&lt;/a&gt;遗留问题和优化&lt;/h2&gt;&lt;p&gt;以上是一个较为简陋，但是初步可用的malloc实现。还有很多遗留的可能优化点，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同时兼容32位和64位系统&lt;/li&gt;
&lt;li&gt;在分配较大快内存时，考虑使用mmap而非sbrk，这通常更高效&lt;/li&gt;
&lt;li&gt;可以考虑维护多个链表而非单个，每个链表中的block大小均为一个范围内，例如8字节链表、16字节链表、24-32字节链表等等。此时可以根据size到对应链表中做分配，可以有效减少碎片，并提高查询block的速度&lt;/li&gt;
&lt;li&gt;可以考虑链表中只存放free的block，而不存放已分配的block，可以减少查找block的次数，提高效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有很多可能的优化，这里不一一赘述。下面附上一些参考文献，有兴趣的同学可以更深入研究。&lt;/p&gt;
&lt;h1 id=&quot;其它参考&quot;&gt;&lt;a href=&quot;#其它参考&quot; class=&quot;headerlink&quot; title=&quot;其它参考&quot;&gt;&lt;/a&gt;其它参考&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;这篇文章大量参考了&lt;a href=&quot;http://www.inf.udec.cl/~leo/Malloc_tutorial.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A malloc Tutorial&lt;/a&gt;，其中一些图片和代码直接引用了文中的内容，这里特别指出&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://csapp.cs.cmu.edu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Computer Systems: A Programmer’s Perspective, 2/E&lt;/a&gt;一书有许多值得参考的地方&lt;/li&gt;
&lt;li&gt;关于Linux的虚拟内存模型，&lt;a href=&quot;http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anatomy of a Program in Memory&lt;/a&gt;是很好的参考资料，另外作者还有一篇&lt;a href=&quot;http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How the Kernel Manages Your Memory&lt;/a&gt;对于Linux内核中虚拟内存管理的部分有很好的讲解&lt;/li&gt;
&lt;li&gt;对于真实世界的malloc实现，可以参考&lt;a href=&quot;http://repo.or.cz/w/glibc.git/blob/HEAD:/malloc/malloc.c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;glibc的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本文写作过程中大量参考了&lt;a href=&quot;http://www.wikipedia.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科&lt;/a&gt;，再次感谢这个伟大的网站，并且呼吁大家在手头允许的情况下可以适当捐助维基百科，帮助这个造福人类的系统运行下去&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      这篇是转自CodingLabs的文章，除了有原文的内容，我加入了自己的一些思考和理解。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="c" scheme="http://chaomai.github.io/tags/c/"/>
    
      <category term="malloc" scheme="http://chaomai.github.io/tags/malloc/"/>
    
      <category term="operating system" scheme="http://chaomai.github.io/tags/operating-system/"/>
    
  </entry>
  
  <entry>
    <title>C++ Concurrency in Action (4) - Synchronizing Concurrent Operations</title>
    <link href="http://chaomai.github.io/2015/05/31/2015-2015-05-31-cpp-concurrency-in-action-4/"/>
    <id>http://chaomai.github.io/2015/05/31/2015-2015-05-31-cpp-concurrency-in-action-4/</id>
    <published>2015-05-31T05:26:54.000Z</published>
    <updated>2016-02-23T06:17:56.030Z</updated>
    
    <content type="html">&lt;h1 id=&quot;C-Concurrency-in-Action-4&quot;&gt;&lt;a href=&quot;#C-Concurrency-in-Action-4&quot; class=&quot;headerlink&quot; title=&quot;C++ Concurrency in Action 4&quot;&gt;&lt;/a&gt;C++ Concurrency in Action 4&lt;/h1&gt;&lt;h2 id=&quot;Waiting-for-an-event-or-other-condition&quot;&gt;&lt;a href=&quot;#Waiting-for-an-event-or-other-condition&quot; class=&quot;headerlink&quot; title=&quot;Waiting for an event or other condition&quot;&gt;&lt;/a&gt;Waiting for an event or other condition&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一直检查某个flag（被mutex保护）&lt;/p&gt;
&lt;p&gt; 消耗资源，被锁住的flag实际上并不能被其他线程访问。消耗资源导致了被等待的线程运行时得到的资源更少，使得等待时间更长。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;condition variable&lt;/p&gt;
&lt;p&gt; wait and notify&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;std::this_thread::sleep_for()&lt;/code&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wait_for_flag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::unique_lock&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; lk(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!flag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lk.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::this_thread::sleep_for(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::chrono::milliseconds(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lk.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; sleep前unlock，以便其他线程有机会获得lock。但是难以掌握sleep的时长。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Waiting-for-a-condition-with-condition-variables&quot;&gt;&lt;a href=&quot;#Waiting-for-a-condition-with-condition-variables&quot; class=&quot;headerlink&quot; title=&quot;Waiting for a condition with condition variables&quot;&gt;&lt;/a&gt;Waiting for a condition with condition variables&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::condition_variable&lt;/code&gt;：和mutex一起用，为了提供合适的同步。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::condition_variable_any&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mutex_like即可，但是通用是要付出占用空间、性能或所需资源上的代价的。除非需要额外的灵活度，否则i用前者。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex mut;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;&amp;lt;data_chunk&amp;gt; data_queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::condition_variable data_cond;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data_preparation_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(more_data_to_prepare()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data_chunk &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data=prepare_data();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::lock_guard&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; lk(mut);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data_queue.push(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data_cond.notify_one(); &lt;span class=&quot;comment&quot;&gt;//notify waiting thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data_processing_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::unique_lock&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; lk(mut);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    data_cond.wait(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lk, []&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !data_queue.empty(); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data_chunk data=data_queue.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data_queue.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lk.unlock();  &lt;span class=&quot;comment&quot;&gt;//不要在处理的时候（可能耗时）持有&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        process(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(is_last_chunk(data))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;wait()&lt;/code&gt;，&lt;code&gt;mut&lt;/code&gt;，predicate有什么关系？&lt;/p&gt;
&lt;p&gt; thread wakes(notified by &lt;code&gt;notify_one()&lt;/code&gt;) -&amp;gt; lock mutex -&amp;gt; check predicate；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;predicate false -&amp;gt; unlock mutex -&amp;gt; thread blocked or waiting；&lt;br&gt;predicate true -&amp;gt; still leave mutex locked -&amp;gt; return from &lt;code&gt;wait()&lt;/code&gt;；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么在&lt;code&gt;data_processing_thread()&lt;/code&gt;要使用&lt;code&gt;std::unique_lock&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt; 反过来考虑为什么不是&lt;code&gt;std::lock_guard&lt;/code&gt;和&lt;code&gt;std::mutex&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; &lt;code&gt;std::lock_guard&lt;/code&gt;直到销毁才会unlock，但是线程wait的时候，就隐式的进行了unlock。&lt;/p&gt;
&lt;p&gt; &lt;code&gt;std::mutex&lt;/code&gt;，&lt;a href=&quot;http://stackoverflow.com/questions/13099660/c11-why-does-stdcondition-variable-use-stdunique-lock&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;从API设计的角度上解释了为什么不是。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在调用&lt;code&gt;wait()&lt;/code&gt;期间，predicate会在mutex locked的条件下，被检查任意多次。当且仅当predicate true， &lt;code&gt;wait()&lt;/code&gt;立即返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;spurious wake&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当等待线程重新获取锁并检查条件时，如果它不直接响应另一个线程的notification（例如：你的predicate和共享的变量无关，另一个线程notify的时候，predicate就不会直接respond），这就是spurious wake。是有side effect的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;notify_one()&lt;/code&gt;和&lt;code&gt;notify_all()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当有多个线程wait同一个event的时候，&lt;code&gt;notify_one()&lt;/code&gt;并不能保证哪个线程会被通知。&lt;/li&gt;
&lt;li&gt;当有多个线程wait同一个event，并且所有线程都需要respond的时候，&lt;code&gt;notify_all()&lt;/code&gt;会导致这些线程都去check predicate。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Waiting-for-one-off-events-with-futures&quot;&gt;&lt;a href=&quot;#Waiting-for-one-off-events-with-futures&quot; class=&quot;headerlink&quot; title=&quot;Waiting for one-off events with futures&quot;&gt;&lt;/a&gt;Waiting for one-off events with futures&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::future&lt;/code&gt;：provides a mechanism to access the result of asynchronous operations。&lt;/p&gt;
&lt;p&gt;由&lt;code&gt;std::unique_ptr&lt;/code&gt;和&lt;code&gt;std::shared_ptr&lt;/code&gt;建立：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;unique futures：&lt;code&gt;std::future&amp;lt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;moveable only&lt;/li&gt;
&lt;li&gt;其实例是唯一关联到与它关联事件的实例。&lt;/li&gt;
&lt;li&gt;ownership可以在实例间transfer，但是有一个实例可以引用到特定异步操作的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;shared futures：&lt;code&gt;std::shared_future&amp;lt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copyable&lt;/li&gt;
&lt;li&gt;其多个实例可以指向同一个事件。在这个情况下，所有的实例都会同时ready，都可以访问与事件关联的数据。&lt;/li&gt;
&lt;li&gt;可以有多个实例引用到关联状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果无关联的数据，用&lt;code&gt;std::future&amp;lt;void&amp;gt;&lt;/code&gt;或&lt;code&gt;std::shared_future&amp;lt;void&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Returning-values-from-background-tasks&quot;&gt;&lt;a href=&quot;#Returning-values-from-background-tasks&quot; class=&quot;headerlink&quot; title=&quot;Returning values from background tasks&quot;&gt;&lt;/a&gt;Returning values from background tasks&lt;/h3&gt;&lt;p&gt;可以用&lt;code&gt;std::async()&lt;/code&gt;开始一个&lt;strong&gt;异步任务&lt;/strong&gt;。&lt;code&gt;std::async()&lt;/code&gt;返回一个&lt;code&gt;std::future&lt;/code&gt;对象，这个对象最终将持有函数的返回值，用&lt;code&gt;std::future&lt;/code&gt;的&lt;code&gt;get()&lt;/code&gt;获得（线程会block到future ready）。&lt;/p&gt;
&lt;p&gt;对&lt;code&gt;std::async()&lt;/code&gt;提供参数类似于&lt;code&gt;std::thread&lt;/code&gt;和&lt;code&gt;std::call_once&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; X &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;amp;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;amp;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f1=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::async(&amp;amp;X::foo,&amp;amp;x,&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f2=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::async(&amp;amp;X::bar,x,&lt;span class=&quot;string&quot;&gt;&quot;goodbye&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Y &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Y y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f3=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::async(Y(),&lt;span class=&quot;number&quot;&gt;3.141&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f4=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::async(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::ref(y),&lt;span class=&quot;number&quot;&gt;2.718&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;X &lt;span class=&quot;title&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(X&amp;amp;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::async(baz,&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::ref(x));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f5=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::async(move_only()); &lt;span class=&quot;comment&quot;&gt;//对于右值，std::move会被隐式的调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;std::async()&lt;/code&gt;的运行由实现决定（自己试了发现libstdc++6用的是&lt;code&gt;std::launch::deferred&lt;/code&gt;），但也可以由参数（&lt;code&gt;std::launch&lt;/code&gt;类型）指定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::launch::deferred&lt;/code&gt;：函数调用推迟到在future上调用&lt;code&gt;wait()&lt;/code&gt;或&lt;code&gt;get()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::launch::async&lt;/code&gt;：函数在它自己的线程上运行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::launch::deferred | std::launch::async&lt;/code&gt;：默认，视实现而定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果函数调用推迟了，那么它可能再也不会实际执行。&lt;/p&gt;
&lt;p&gt;通过修改参数并运行下面这段代码，来体会它们的区别，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;timer t; &lt;span class=&quot;comment&quot;&gt;//可以自己简单的实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::future&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; the_answer = &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::async(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::launch::deferred, []() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;999999999&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;futuring...&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;999999999&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; the_answer.get() &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现使用&lt;code&gt;std::launch::deferred&lt;/code&gt;的时间，几乎是&lt;code&gt;std::launch::async&lt;/code&gt;的两倍，这里就能很形象的感受&lt;strong&gt;defer&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Associating-a-task-with-a-future&quot;&gt;&lt;a href=&quot;#Associating-a-task-with-a-future&quot; class=&quot;headerlink&quot; title=&quot;Associating a task with a future&quot;&gt;&lt;/a&gt;Associating a task with a future&lt;/h3&gt;&lt;p&gt;&lt;code&gt;std::packaged_task&amp;lt;&amp;gt;&lt;/code&gt;把一个函数或callable对象绑定到一个future，当&lt;code&gt;std::packaged_task&amp;lt;&amp;gt;&lt;/code&gt;被调用的时候，它进而调用关联的函数或callable对象使得future ready，返回值作为关联数据储存。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::packaged_task&lt;/code&gt;不是copyable，但是moveable。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::packaged_task&lt;/code&gt;的模板参数是函数签名。构造实例时，传入的callable对象要能接受指定的参数，并且返回值类型可以转换到所指定的返回类型。也就是说不必100% match，但是至少也要保证可以隐式转换。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;函数签名的返回值类型指定了从&lt;code&gt;get_future()&lt;/code&gt;返回的&lt;code&gt;std::future&lt;/code&gt;的类型。&lt;/li&gt;
&lt;li&gt;函数签名的参数列表指定了，封装的任务的函数调用的签名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;999999999&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::packaged_task&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;gt; task(f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::future&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; res = task.get_future();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//res.wait();  //waiting endlessly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//std::cout &amp;lt;&amp;lt; res.get() &amp;lt;&amp;lt; std::endl;  //waiting endlessly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; res.get() &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上例中，在&lt;code&gt;task()&lt;/code&gt;调用前，绑定的函数是没有执行的，因此这里无论是对future进行wait或是get，都是无限的等下去。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;task()&lt;/code&gt;时，任务其实是在当前的线程中执行的，不会新建一个线程执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Making-std-promises&quot;&gt;&lt;a href=&quot;#Making-std-promises&quot; class=&quot;headerlink&quot; title=&quot;Making (std::)promises&quot;&gt;&lt;/a&gt;Making (std::)promises&lt;/h3&gt;&lt;p&gt;&lt;code&gt;std::promise&amp;lt;T&amp;gt;&lt;/code&gt;提供了一种设置值的方式，这个值可以稍后被关联的&lt;code&gt;std::future&amp;lt;T&amp;gt;&lt;/code&gt;对象读取。等待线程会在future上block，提供数据的线程可以用promise的&lt;code&gt;set_value()&lt;/code&gt;来设置值，使得future ready。如果没有设置值就销毁&lt;code&gt;std::promise&lt;/code&gt;，那么exception将会被存储。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;999999999&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::promise&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.set_value(f(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; fu = p.get_future();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; fu.get() &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Saving-an-exception-for-the-future&quot;&gt;&lt;a href=&quot;#Saving-an-exception-for-the-future&quot; class=&quot;headerlink&quot; title=&quot;Saving an exception for the future&quot;&gt;&lt;/a&gt;Saving an exception for the future&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;std::async&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 就像直接调用函数一样，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数抛出exception -&amp;gt; exception被存储在future中，替代所存储的值 -&amp;gt; future ready -&amp;gt; &lt;code&gt;get()&lt;/code&gt;会再次抛出exception&lt;br&gt;但是&lt;code&gt;get()&lt;/code&gt;抛出的exception是原始的对象或copy，标准没有规定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;std::packaged_task&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;类似&lt;code&gt;std::async&lt;/code&gt;，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;调用task -&amp;gt; 函数抛出exception -&amp;gt; exception被存储在future中，替代所存储的值 -&amp;gt; future ready -&amp;gt; &lt;code&gt;get()&lt;/code&gt;会再次抛出exception&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接destory &lt;code&gt;std::packaged_task&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果future没有ready -&amp;gt; destructor存储&lt;code&gt;std::future_error&lt;/code&gt; exception在关联的状态中。&lt;br&gt;error code = &lt;code&gt;std::future_errc::broken_promise&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;std::promise&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;类似前两者，但是需要显式的函数调用。如果要存储的不是值，是exception，就要调用&lt;code&gt;set_exception()&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通常在try/catch中使用，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::promise&amp;lt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&amp;gt; some_promise;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    some_promise.set_value(calculate_value());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(...) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    some_promise.set_exception(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::current_exception());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;some_promise.set_exception(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::copy_exception(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::logic_error(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;上例使用了&lt;code&gt;std::current_exception()&lt;/code&gt;来获取已引发的异常。还可以    用&lt;code&gt;std::copy_exception()&lt;/code&gt;创建新的exception，在exception已知的情况下，这样更简洁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接destroy &lt;code&gt;std::promise&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果future没有ready -&amp;gt; destructor存储&lt;code&gt;std::future_error&lt;/code&gt; exception在关联的状态中。&lt;br&gt;error code = &lt;code&gt;std::future_errc::broken_promise&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;关于destory &lt;code&gt;std::packaged_task&lt;/code&gt;和&lt;code&gt;std::promise&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::packaged_task&lt;/code&gt;是&lt;code&gt;std::promise&lt;/code&gt;更高层次的抽象，所以直接destroy以后，它们的行为是很相似的。&lt;/li&gt;
&lt;li&gt;创建了future，你就promise to provide一个值或exception，如果你摧毁了他们的来源，你就break了promise。如果destructor不存储&lt;code&gt;std::future_error&lt;/code&gt; exception，等待future的线程就会一直等下去。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Waiting-from-multiple-threads&quot;&gt;&lt;a href=&quot;#Waiting-from-multiple-threads&quot; class=&quot;headerlink&quot; title=&quot;Waiting from multiple threads&quot;&gt;&lt;/a&gt;Waiting from multiple threads&lt;/h3&gt;&lt;p&gt;在多个线程中访问&lt;code&gt;std::future&lt;/code&gt;会有data race和undefined behavior。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;by design. It models unique ownership of the asynchronous result。因此并发的访问的没意义的，&lt;code&gt;get()&lt;/code&gt;只能被调用一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;std::shared_future&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 就算有&lt;code&gt;std::shared_future&lt;/code&gt;，特定对象的成员函数还是不同步的，要使用lock来避免data race，或者在每个线程创建并访问自己的copy。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/ccpashared_future.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造&lt;code&gt;std::shared_future&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 引用异步状态的&lt;code&gt;std::shared_future&lt;/code&gt;实例是由引用了这些状态的&lt;code&gt;std::future&lt;/code&gt;实例构造的。&lt;/p&gt;
 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::promise&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::future&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; f(p.get_future());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// f refers to asynchronous state of p&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::shared_future&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; sf(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::move(f));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 现在f是invalid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::shared_future&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; sf(p.get_future());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; sf = p.get_future().share();  &lt;span class=&quot;comment&quot;&gt;// transfer ownership directly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Waiting-with-a-time-limit&quot;&gt;&lt;a href=&quot;#Waiting-with-a-time-limit&quot; class=&quot;headerlink&quot; title=&quot;Waiting with a time limit&quot;&gt;&lt;/a&gt;Waiting with a time limit&lt;/h2&gt;&lt;p&gt;two sorts of timeouts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;duration-based timeout&lt;/li&gt;
&lt;li&gt;absolute timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Clocks&quot;&gt;&lt;a href=&quot;#Clocks&quot; class=&quot;headerlink&quot; title=&quot;Clocks&quot;&gt;&lt;/a&gt;Clocks&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;system_clock&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; Wall clock time from the system-wide real-time clock.&lt;/p&gt;
&lt;p&gt; &lt;code&gt;std::chrono::system_clock::now()&lt;/code&gt;返回系统当前时间，类型是&lt;code&gt;std::chrono::system_clock::time_point&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 提供了与&lt;code&gt;time_t&lt;/code&gt;类型相互转化的函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;steady_clock&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Values of &lt;code&gt;time_point&lt;/code&gt; never decrease as physical time advances;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Values of &lt;code&gt;time_point&lt;/code&gt; advance at a steady rate relative to real time.&lt;/p&gt;
&lt;p&gt;That is, the clock may not be adjusted.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is_steady&lt;/code&gt;可以检测是否是。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;high_resolution_clock&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; Clocks with the shortest tick period. &lt;code&gt;high_resolution_clock&lt;/code&gt; may be a synonym for &lt;code&gt;system_clock&lt;/code&gt; or &lt;code&gt;steady_clock&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;the tick period of clock&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可由clock的&lt;code&gt;period&lt;/code&gt;成员得到。例如：每秒25次 tick，则是&lt;code&gt;std::ratio&amp;lt;1, 25&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;并不能够保证，$在一次运行中观察到的tick period=那个clock指定的period$。&lt;/p&gt;
&lt;h3 id=&quot;Durations&quot;&gt;&lt;a href=&quot;#Durations&quot; class=&quot;headerlink&quot; title=&quot;Durations&quot;&gt;&lt;/a&gt;Durations&lt;/h3&gt;&lt;p&gt;&lt;code&gt;std::chrono::duration&amp;lt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Rep, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Period&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Rep			rep; &lt;span class=&quot;comment&quot;&gt;// the type of representation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Period 		period;  &lt;span class=&quot;comment&quot;&gt;// 指定duration的每个unit代表多长时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;标准库预定义了很多种durations：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; duration&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt;, nano&amp;gt; 	    nanoseconds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; duration&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt;, micro&amp;gt; 	    microseconds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; duration&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt;, milli&amp;gt; 	    milliseconds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; duration&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt;&amp;gt; 		    seconds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; duration&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt;, ratio&amp;lt; &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;&amp;gt;&amp;gt;   minutes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; duration&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt;, ratio&amp;lt;&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt;&amp;gt;&amp;gt;  hours;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它们都使用足够大的整数类型。当然也可以使用预定义的ratio或自己定义的来定义新的duration。&lt;/p&gt;
&lt;p&gt;当不会发生截断的时候，durations之间的转换是隐式的。显示的转换可用&lt;code&gt;duration_cast&lt;/code&gt;，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::chrono::&lt;span class=&quot;function&quot;&gt;milliseconds &lt;span class=&quot;title&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;54802&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::chrono::seconds s=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::chrono::duration_cast&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::chrono::seconds&amp;gt;(ms);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//截断，而非四舍五入，s=54&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;durations可以与一个常数（&lt;code&gt;_Rep&lt;/code&gt;类型的）进行加减乘除。&lt;/p&gt;
&lt;p&gt;在一个duration中，要知道units的数目，可以调用&lt;code&gt;count()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于duration的wait&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前提到的所有的blocking call都是block一个不确定长度的时间。&lt;/p&gt;
&lt;p&gt;当你将duration用于wait，wait会返回一个状态，来标识是超时，还是其他情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::future_status::timeout&lt;/code&gt;：the wait times out&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::future_status::ready&lt;/code&gt;：the future is ready&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::future_status::deferred&lt;/code&gt;：the future is deferred&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于duration的wait的时间是通过一个内部的steady clock来衡量的，但是因为调度，或者精度的原因，实际等待的时间可能会略长。&lt;/p&gt;
&lt;h3 id=&quot;Time-points&quot;&gt;&lt;a href=&quot;#Time-points&quot; class=&quot;headerlink&quot; title=&quot;Time points&quot;&gt;&lt;/a&gt;Time points&lt;/h3&gt;&lt;p&gt;&lt;code&gt;std::chrono::time_points&amp;lt;&amp;gt;&lt;/code&gt;：存储了从clock的epoch开始的时长（某个duration的倍数）。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Clock, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; _Dur&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; time_point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Clock		clock; &lt;span class=&quot;comment&quot;&gt;// clock的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; _Dur		duration;  &lt;span class=&quot;comment&quot;&gt;// 度量从epoch开始的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于一个time point，&lt;code&gt;time_since_epoch()&lt;/code&gt;返回了从clock的epoch，到那个time point的时长。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以将duration与time point相加减，得到新的time point。&lt;/li&gt;
&lt;li&gt;可以将两个share same clock的time point相减，得到duration。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;基于time point的wait&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在condition variable中，如果不想向&lt;code&gt;wait()&lt;/code&gt;传入一个predicate，那么最好是使用&lt;code&gt;wait_until()&lt;/code&gt;，这样循环的总长度（看4.1.1）有限的。&lt;/p&gt;
&lt;h3 id=&quot;Functions-that-accept-timeouts&quot;&gt;&lt;a href=&quot;#Functions-that-accept-timeouts&quot; class=&quot;headerlink&quot; title=&quot;Functions that accept timeouts&quot;&gt;&lt;/a&gt;Functions that accept timeouts&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class/Namespace&lt;/th&gt;
&lt;th&gt;Functions&lt;/th&gt;
&lt;th&gt;Return values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::this_thread&lt;/code&gt; namespace&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sleep_for(duration)&lt;/code&gt;, &lt;code&gt;sleep_until(time_point)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::condition_variable&lt;/code&gt; or &lt;code&gt;std::condition_variable_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wait_for(lock, duration)&lt;/code&gt;, &lt;code&gt;wait_until(lock, time_point)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::cv_status::timeout&lt;/code&gt; or &lt;code&gt;std::cv_status::no_timeout&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wait_for(lock, duration, predicate)&lt;/code&gt;, &lt;code&gt;wait_until(lock, time_point, predicate)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bool—the return value of the predicate when awakened&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::timed_mutex&lt;/code&gt; or &lt;code&gt;std::recursive_ timed_mutex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;try_lock_for(duration)&lt;/code&gt;, &lt;code&gt;try_lock_until(time_point)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bool—true if the lock was acquired, false otherwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::unique_ lock&amp;lt;TimedLockable&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unique_lock(lockable, duration)&lt;/code&gt;, &lt;code&gt;unique_lock(lockable, time_point)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A—&lt;code&gt;owns_lock()&lt;/code&gt; on the newly constructed object; returns true if the lock was acquired, false otherwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;try_lock_for(duration)&lt;/code&gt;, &lt;code&gt;try_lock_until(time_point)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bool—true if the lock was acquired, false otherwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;std::future&amp;lt;ValueType&amp;gt;&lt;/code&gt; or &lt;code&gt;std::shared_ future&amp;lt;ValueType&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wait_for(duration)&lt;/code&gt;, &lt;code&gt;wait_until (time_point)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::future_status::timeout&lt;/code&gt; if the wait timed out, &lt;code&gt;std::future_ status::ready&lt;/code&gt; if the future is ready, or &lt;code&gt;std::future_status::deferred&lt;/code&gt; if the future holds a deferred function that hasn’t yet started&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/13263277/difference-between-stdsystem-clock-and-stdsteady-clock&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Difference between std::system_clock and std::steady_clock?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ Concurrency in Action&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      Synchronizing concurrent operations的笔记。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="cpp11" scheme="http://chaomai.github.io/tags/cpp11/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>C++ Concurrency in Action (3) - Sharing Data Between Threads</title>
    <link href="http://chaomai.github.io/2015/05/30/2015-2015-05-30-cpp-concurrency-in-action-3/"/>
    <id>http://chaomai.github.io/2015/05/30/2015-2015-05-30-cpp-concurrency-in-action-3/</id>
    <published>2015-05-30T14:37:23.000Z</published>
    <updated>2016-02-23T06:17:49.573Z</updated>
    
    <content type="html">&lt;h1 id=&quot;C-Concurrency-in-Action-3&quot;&gt;&lt;a href=&quot;#C-Concurrency-in-Action-3&quot; class=&quot;headerlink&quot; title=&quot;C++ Concurrency in Action 3&quot;&gt;&lt;/a&gt;C++ Concurrency in Action 3&lt;/h1&gt;&lt;h2 id=&quot;Problems-with-sharing-data-between-threads&quot;&gt;&lt;a href=&quot;#Problems-with-sharing-data-between-threads&quot; class=&quot;headerlink&quot; title=&quot;Problems with sharing data between threads&quot;&gt;&lt;/a&gt;Problems with sharing data between threads&lt;/h2&gt;&lt;p&gt;在同一进程中，线程间的数据共享，不仅仅是便捷，还可能造成问题。&lt;/p&gt;
&lt;p&gt;线程间共享数据的问题，全都可以归结到修改数据的顺序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果所有数据都是只读的，那么不会有任何问题。&lt;/li&gt;
&lt;li&gt;如果一个或多个线程修改它们之间共享的数据，现在的问题可能就会出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Invariant&lt;/strong&gt;（不变条件）：关于某个特定的数据结构，始终为真的与君。&lt;/p&gt;
&lt;p&gt;但是在多个线程修改共享数据时，invariant会被broken。&lt;/p&gt;
&lt;h3 id=&quot;Race-conditions&quot;&gt;&lt;a href=&quot;#Race-conditions&quot; class=&quot;headerlink&quot; title=&quot;Race conditions&quot;&gt;&lt;/a&gt;Race conditions&lt;/h3&gt;&lt;p&gt;并发中最常见的导致问题的原因。出现在两个或多个线程的执行结果依赖于相对的执行顺序。在某些情况下，race condition是无害的，但是如果race condition使得broken invariant，这将会导致问题。C++标准定义了一种特别的race condition - data race（由于并发的修改同一个对象），data race将会导致undefined behavior。&lt;/p&gt;
&lt;p&gt;problematic race condition常常出现在完成一个操作需要修改两处或多处不同的数据。在一个线程正在修改数据，另一个可能在未修改完的时候就访问数据。&lt;/p&gt;
&lt;p&gt;由于race condition是timing sensitive的，因此在debug的时候，debugger会影响程序的timing，问题就不会再现。&lt;/p&gt;
&lt;h3 id=&quot;Avoiding-problematic-race-conditions&quot;&gt;&lt;a href=&quot;#Avoiding-problematic-race-conditions&quot; class=&quot;headerlink&quot; title=&quot;Avoiding problematic race conditions&quot;&gt;&lt;/a&gt;Avoiding problematic race conditions&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用某种保护机制来包装数据结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只有实际进行修改的线程才能看到invariants are broken的中间状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修改数据结构和invariants的设计，使得修改在一系列隐形的changes下完成，每个change可以保证invariants。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这一般指的就是lock-free。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将对数据结构的update作为transaction。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这就是software transactional memory（STM）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Protecting-shared-data-with-mutexes&quot;&gt;&lt;a href=&quot;#Protecting-shared-data-with-mutexes&quot; class=&quot;headerlink&quot; title=&quot;Protecting shared data with mutexes&quot;&gt;&lt;/a&gt;Protecting shared data with mutexes&lt;/h2&gt;&lt;p&gt;mutex（mutual exclusion）：synchronization primitive。线程库保证一旦某个线程已经lock了某个mutex，其他所有尝试lock同一个mutex的线程，都必须等到那个成功lock这个mutex的线程unlock它。&lt;/p&gt;
&lt;p&gt;这可以保证每个线程看到的都是self-consistent view的共享数据，避免broken invariant。&lt;/p&gt;
&lt;p&gt;但mutex&lt;strong&gt;不是&lt;/strong&gt;silver bullet！&lt;/p&gt;
&lt;h3 id=&quot;Using-mutexes-in-C&quot;&gt;&lt;a href=&quot;#Using-mutexes-in-C&quot; class=&quot;headerlink&quot; title=&quot;Using mutexes in C++&quot;&gt;&lt;/a&gt;Using mutexes in C++&lt;/h3&gt;&lt;p&gt;通过构造&lt;code&gt;std::mutex&lt;/code&gt;的实例来创建一个mutex。&lt;/p&gt;
&lt;p&gt;不推荐直接调用&lt;code&gt;std::mutex&lt;/code&gt;的成员函数，尤其是&lt;code&gt;unlock()&lt;/code&gt;。因为你必须在每段代码执行的尾部，包括异常中，都要记得unlock。&lt;code&gt;std::lock_guard&lt;/code&gt;以&lt;strong&gt;RAII&lt;/strong&gt;的方式来对mutex提供支持，在构造的时候lock，析构的时候unlock。&lt;/p&gt;
&lt;p&gt;用类来封装。&lt;/p&gt;
&lt;h3 id=&quot;Structuring-code-for-protecting-shared-data&quot;&gt;&lt;a href=&quot;#Structuring-code-for-protecting-shared-data&quot; class=&quot;headerlink&quot; title=&quot;Structuring code for protecting shared data&quot;&gt;&lt;/a&gt;Structuring code for protecting shared data&lt;/h3&gt;&lt;p&gt;如果类的成员函数返回了指向受保护数据的指针或引用，那岂不就是开了后门？&lt;/p&gt;
&lt;p&gt;那么是不是禁止返回指向受保护数据的指针或引用就ok了？&lt;/p&gt;
&lt;p&gt;还有一个没有考虑到的就是，不要向那些不在你控制下的被调用函数，传入指向受保护数据的指针或引用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t  pass  pointers  and  references  to  protected  data  outside  the  scope  of  the  lock,  whether  by returning them from a function, storing them in externally visible memory, or passing them as arguments to user-supplied functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Spotting-race-conditions-inherent-in-interfaces&quot;&gt;&lt;a href=&quot;#Spotting-race-conditions-inherent-in-interfaces&quot; class=&quot;headerlink&quot; title=&quot;Spotting race conditions inherent in interfaces&quot;&gt;&lt;/a&gt;Spotting race conditions inherent in interfaces&lt;/h3&gt;&lt;p&gt;考虑一个双向链表，如果要使得一个删除操作是线程安全的，那么要必须保证避免并发的访问三个结点（要删除的和两边的）。但这并不足以避免race condition，到目前为止，只能采用避免并发的访问整个list。&lt;/p&gt;
&lt;p&gt;看下面的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T,&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; Container=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;deque&lt;/span&gt;&amp;lt;T&amp;gt; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size() &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;T&amp;amp; &lt;span class=&quot;title&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;amp; &lt;span class=&quot;title&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;amp;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T&amp;amp;&amp;amp;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&amp;amp;&amp;amp;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就算让&lt;code&gt;top()&lt;/code&gt;返回copy，而不是reference，这个接口还是有race conditions。这并不是基于mutex的实现独有的问题，基于lock-free的实现也会有，这是接口设计的问题。&lt;/p&gt;
&lt;p&gt;上例中，&lt;code&gt;empty()&lt;/code&gt;和&lt;code&gt;top()&lt;/code&gt;是不可靠的，因为在调用&lt;code&gt;empty()&lt;/code&gt;或&lt;code&gt;size()&lt;/code&gt;的线程使用它们返回的值之前，stack可能已经被其他线程改变了（可能已经empty），这时再去&lt;code&gt;top()&lt;/code&gt;，stack已经不是调用&lt;code&gt;empty()&lt;/code&gt;或&lt;code&gt;size()&lt;/code&gt;时候的stack了。而在stack内使用mutex仅仅只能保证同一时刻，只有一个线程运行stack的成员函数，而这并不能解决这样的问题。&lt;/p&gt;
&lt;p&gt;还有一个类似的问题是，&lt;code&gt;top()&lt;/code&gt;和&lt;code&gt;pop()&lt;/code&gt;之间，stack也有可能被修改。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!s.empty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; value=s.top();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do_something(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或许你觉得可以合并&lt;code&gt;top()&lt;/code&gt;和&lt;code&gt;pop()&lt;/code&gt;，但是&lt;code&gt;std::stack&lt;/code&gt;这样分开设计不是没有理由的，简单来说，如果分开了，在return的时候，系统资源不足，copy构造函数失败，造成已经pop了，但是元素丢失（因为没有return成功）。&lt;/p&gt;
&lt;p&gt;但是，比较头疼的是，要消除race condition就是要避免这样的分开设计（lock的粒度太小，mutex不能保护整个操作），进而避免上例中，不同线程的interleave。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法1：PASS IN A REFERENCE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不实用，构造一个实例需要额外的时间或资源。&lt;/li&gt;
&lt;li&gt;不总是可用，构造函数所需要的参数不是时时可以获得的。&lt;/li&gt;
&lt;li&gt;需要类型可赋值，但是赋值不总是可用的，尤其是自定义的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解法2：REQUIRE A NO-THROW COPY CONSTRUCTOR OR MOVE CONSTRUCTOR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s only an exception safety problem with a value-returning pop() if the return by value can throw an exception.&lt;/p&gt;
&lt;p&gt;缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限制只让那些有不抛出异常的构造函数或move构造函数的的类型使用stack，虽然可行，但是不通用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解法3：RETURN A POINTER TO THE POPPED ITEM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pointer可以被自由的copy，而不抛出异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通的方式需要管理分配给对象的内存，内存管理的开销可能还大于return by value。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要使用，&lt;code&gt;std::shared_ptr&lt;/code&gt;值得考虑，可以避免很多&lt;code&gt;new&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法 4：PROVIDE BOTH OPTION 1 AND EITHER OPTION 2 OR 3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;万金油，糅合1，2或1，3，要用什么，给用户自己选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXAMPLE DEFINITION OF A THREAD-SAFE STACK&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在接口中没有race condition，并糅合了1、3；&lt;/li&gt;
&lt;li&gt;不可赋值，可copy（假设元素可copy）；&lt;/li&gt;
&lt;li&gt;stack为空时，&lt;code&gt;pop()&lt;/code&gt;抛出异常，但是stack仍然可以工作；&lt;/li&gt;
&lt;li&gt;简化的操作，使得数据得到了更好的控制，可以保证在每个操作中，mutex都是locked；&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;std::stack&lt;/code&gt;进行了包装；&lt;/li&gt;
&lt;li&gt;可以加入copy的支持，只要copy的时候lock mutex即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;exception&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stack&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct empty_stack: std::exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const char* what() const throw();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;template&amp;lt;typename T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class threadsafe_stack &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::stack&amp;lt;T&amp;gt; data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutable std::mutex m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    threadsafe_stack()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    threadsafe_stack(const threadsafe_stack&amp;amp; other) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        std::lock_guard&amp;lt;std::mutex&amp;gt; lock(other.m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data=other.data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    threadsafe_stack&amp;amp; operator=(const threadsafe_stack&amp;amp;) = delete;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void push(T new_value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        std::lock_guard&amp;lt;std::mutex&amp;gt; lock(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data.push(new_value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::shared_ptr&amp;lt;T&amp;gt; pop() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        std::lock_guard&amp;lt;std::mutex&amp;gt; lock(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(data.empty()) throw empty_stack();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        std::shared_ptr&amp;lt;T&amp;gt; const res(std::make_shared&amp;lt;T&amp;gt;(data.top()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void pop(T&amp;amp; value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        std::lock_guard&amp;lt;std::mutex&amp;gt; lock(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(data.empty()) throw empty_stack();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value=data.top();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bool empty() const &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        std::lock_guard&amp;lt;std::mutex&amp;gt; lock(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return data.empty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;为什么m是mutable？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;empty()&lt;/code&gt;后跟const，说明&lt;code&gt;empty()&lt;/code&gt;不能修改类的成员，除非成员被设置为mutable。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Granularity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;细粒度（fine-grained）锁会导致保护不完全，锁的粒度太大会导致并发失去意义。&lt;/p&gt;
&lt;p&gt;有时细粒度锁意味着需要多个mutex，而这可能会导致deadlock。&lt;/p&gt;
&lt;h3 id=&quot;Deadlock：the-problem-and-a-solution&quot;&gt;&lt;a href=&quot;#Deadlock：the-problem-and-a-solution&quot; class=&quot;headerlink&quot; title=&quot;Deadlock：the problem and a solution&quot;&gt;&lt;/a&gt;Deadlock：the problem and a solution&lt;/h3&gt;&lt;p&gt;如果有两个mutex，那么总是以同样的顺序lock mutex就不会死锁 了。但是有时以同样的顺序lock mutex并不能满足需求。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::lock&lt;/code&gt;：可以一次性锁住两个或多个mutex，而不会deadlock。但是如果分别获得lock，它并不能保证不死锁。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; some_big_object;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(some_big_object&amp;amp; lhs,some_big_object&amp;amp; rhs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; X &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    some_big_object some_detail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X(some_big_object &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;amp; sd):some_detail(sd)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(X&amp;amp; lhs, X&amp;amp; rhs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&amp;amp;lhs==&amp;amp;rhs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::lock(lhs.m,rhs.m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::lock_guard&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; lock_a(lhs.m,&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::adopt_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::lock_guard&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; lock_b(rhs.m,&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::adopt_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        swap(lhs.some_detail,rhs.some_detail);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上例中有这么几个要注意的地方：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要检查是否是不同的实例？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::lock&lt;/code&gt;做了这么一个事情：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Locks the given Lockable objects lock1, lock2, …, lockn using a deadlock avoidance algorithm to avoid deadlock. The objects are locked by an unspecified series of calls to lock, try_lock, unlock. If a call to lock or unlock results in an exception, unlock is called for any locked objects before rethrowing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;换句话说，作为参数的几个mutex都会被an unspecified series of calls to lock, try_lock, unlock一遍。&lt;/p&gt;
&lt;p&gt;要注意的是，必须是&lt;a href=&quot;http://en.cppreference.com/w/cpp/concept/Lockable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lockable objects&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;对于已经在外部lock的lockables，deadlock是无法保证不发生的。&lt;/p&gt;
&lt;p&gt;如果某个mutex是locked，deadlock是不能够保证会避免的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;std::adopt_lock&lt;/code&gt;是什么鬼？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;constexpr（常量表达式），tag type used to specify locking strategy 。其中std::adopt_lock：assume the calling thread already has ownership of the mutex。也就是说告诉&lt;code&gt;std::lock_guard&lt;/code&gt;，给你的mutex已经锁上了，你就不要再lock一次了。&lt;/p&gt;
&lt;p&gt;下面是&lt;code&gt;std::lock_guard&lt;/code&gt;的构造函数的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;explicit lock_guard(mutex_type&amp;amp; __m) : _M_device(__m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; _M_device.lock(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lock_guard(mutex_type&amp;amp; __m, adopt_lock_t) : _M_device(__m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;#125; // calling thread owns mutex&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以很明确的看出使用了&lt;code&gt;adopt_lock_t&lt;/code&gt;后，&lt;code&gt;std::lock_guard&lt;/code&gt;并没有去lock。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;会不会抛出异常？什么地方会？抛出会怎样？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比较可能会，如果抛出，函数就退出了，不会进行swap；&lt;br&gt;&lt;code&gt;std::lock&lt;/code&gt;可能会（确切的说是，&lt;code&gt;std::lock&lt;/code&gt;内部&lt;code&gt;lock lhs.m&lt;/code&gt;或&lt;code&gt;rhs.m&lt;/code&gt;的时候可能会，接着异常会传出&lt;code&gt;std::lock&lt;/code&gt;），如果抛出，函数就退出了，不会进行swap；&lt;br&gt;构造&lt;code&gt;lock_guard&lt;/code&gt;不会，标准规定的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::lock&lt;/code&gt;不万能，如果分别获得lock，它并不能保证不deadlock。&lt;/p&gt;
&lt;h3 id=&quot;Further-guidelines-for-avoiding-deadlock&quot;&gt;&lt;a href=&quot;#Further-guidelines-for-avoiding-deadlock&quot; class=&quot;headerlink&quot; title=&quot;Further guidelines for avoiding deadlock&quot;&gt;&lt;/a&gt;Further guidelines for avoiding deadlock&lt;/h3&gt;&lt;p&gt;deadlock不仅仅出现在有lock的时候，也不局限于两个线程。&lt;/p&gt;
&lt;p&gt;避免deadlock的方法可以归结为：不要等待一个可能等待你的线程。&lt;/p&gt;
&lt;p&gt;下面的准则能检查并消除，有其他线程等待你的可能性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVOID NESTED LOCKS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果需要多个lock，用&lt;code&gt;std::lock&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVOID CALLING USER-SUPPLIED CODE WHILE HOLDING A LOCK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户提供的代码可能会请求另一个lock，进而违反上一个准则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ACQUIRE LOCKS IN A FIXED ORDER&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果要获取两个或更多的lock，并且不能使用&lt;code&gt;std::lock&lt;/code&gt;一次性获取，次优的方案是在每个线程中以同样的顺序获取。the key is to define the order in a way that’s consistent between threads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;USE A LOCK HIERARCHY&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;lock hierarchy提供了一种方法，可以在运行时检查是否遵循lock oerding。如果一段代码已经获得了低层的lock，那么它不允许获得高层的lock。本质上就是为了保证获取lock的顺序。但是这种lock的机制，要求chain中每个mutex的hierarchy value都比前一个低，可能在某些情况下并不实用。&lt;/p&gt;
&lt;p&gt;下面是一个hierarchical mutex的例子，&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class hierarchical_mutex &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  std::mutex internal_mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  unsigned long const hierarchy_value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  unsigned long previous_hierarchy_value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  static thread_local unsigned long this_thread_hierarchy_value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void check_for_hierarchy_violation() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (this_thread_hierarchy_value &amp;lt;= hierarchy_value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      throw std::logic_error(&quot;mutex hierarchy violated&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void update_hierarchy_value() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    previous_hierarchy_value = this_thread_hierarchy_value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this_thread_hierarchy_value = hierarchy_value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  explicit hierarchical_mutex(unsigned long value) :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      hierarchy_value(value),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      previous_hierarchy_value(0) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void lock() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    check_for_hierarchy_violation();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    internal_mutex.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update_hierarchy_value();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void unlock() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this_thread_hierarchy_value = previous_hierarchy_value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    internal_mutex.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bool try_lock() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    check_for_hierarchy_violation();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!internal_mutex.try_lock())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update_hierarchy_value();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;thread_local unsigned long hierarchical_mutex::this_thread_hierarchy_value(ULONG_MAX);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有这么几个要注意的地方：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;thread_local&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个是这段代码的关键。&lt;code&gt;thread_local&lt;/code&gt;变量允许你在每个线程中都有一个独立的实例。在namespace的变量、类的static data member和局部变量都可以被声明为&lt;code&gt;thread_local&lt;/code&gt;，并且拥有thread storage duration。&lt;/p&gt;
&lt;p&gt;{ %blockquote% }&lt;br&gt;When thread_local is applied to a variable of block scope, the storage-class-specifier static is implied if it does not appear explicitly.&lt;br&gt;{ %endblockquote% }&lt;/p&gt;
&lt;p&gt;因此上例中，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;thread_local&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; this_thread_hierarchy_value;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;thread_local&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; this_thread_hierarchy_value;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;又因为，C++规定const静态类成员可以直接初始化，其他非const的静态类成员需要在类声明以外初始化，所以有最后的初始化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个线程有多个mutex的情况下，&lt;code&gt;thread_local&lt;/code&gt;变量是共享的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的，因为它属于类，而不是某个对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三个value会不会在多个线程并发时，出现interleaving修改？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不会，修改是在internal mutex的lock和unlock之间。&lt;/p&gt;
&lt;p&gt;hierarchy mutex本质上说的还是lock的order，其目的就是为了避免多个线程中出现wait cycle，hierarchy mutex是把这种order强制化了。&lt;/p&gt;
&lt;h3 id=&quot;Flexible-locking-with-std-unique-lock&quot;&gt;&lt;a href=&quot;#Flexible-locking-with-std-unique-lock&quot; class=&quot;headerlink&quot; title=&quot;Flexible locking with std::unique_lock&quot;&gt;&lt;/a&gt;Flexible locking with std::unique_lock&lt;/h3&gt;&lt;p&gt;&lt;code&gt;std::unique_lock&lt;/code&gt;提供了比&lt;code&gt;std::lock_guard&lt;/code&gt;更多的灵活度（构造函数的可传入：&lt;code&gt;std::defer_lock&lt;/code&gt;、&lt;code&gt;std::try_to_lock&lt;/code&gt;和&lt;code&gt;std::adopt_lock&lt;/code&gt;），并且不总是拥有mutex的ownership（locked）。但这两者是有代价的，&lt;code&gt;std::unique_lock&lt;/code&gt;要占用更多的空间，并且稍微慢一点点，这个可以用源码看出来：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unique_lock(mutex_type&amp;amp; __m, &lt;span class=&quot;keyword&quot;&gt;defer_lock_t&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : _M_device(&amp;amp;__m), _M_owns(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unique_lock(mutex_type&amp;amp; __m, &lt;span class=&quot;keyword&quot;&gt;try_to_lock_t&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : _M_device(&amp;amp;__m), _M_owns(_M_device-&amp;gt;try_lock())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unique_lock(mutex_type&amp;amp; __m, &lt;span class=&quot;keyword&quot;&gt;adopt_lock_t&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : _M_device(&amp;amp;__m), _M_owns(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// XXX calling thread owns mutex&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutex_type* _M_device;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; _M_owns; &lt;span class=&quot;comment&quot;&gt;// XXX use atomic_bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;std::unique_lock&lt;/code&gt;需要flag，&lt;code&gt;_M_owns&lt;/code&gt;来存储mutex的ownership，在unlock、析构等时候，需要根据flag来判断是否要forward to&lt;code&gt;_M_device&lt;/code&gt;的成员函数来做实际的工作。flag可以通过&lt;code&gt;std::unique_lock&lt;/code&gt;的&lt;code&gt;owns_lock()&lt;/code&gt;来获得。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::unique_lock&lt;/code&gt;还允许在实例销毁前释放lock，这样就可以在明确知道不再需要lock的时候，进行release，而不必等到销毁时，避免了其他线程额外的等待。&lt;/p&gt;
&lt;p&gt;一般来说推荐使用&lt;code&gt;std::lock_gurad&lt;/code&gt;，但是如果需要额外的灵活度，那就用&lt;code&gt;std::unique_lock&lt;/code&gt;，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;延迟锁&lt;/li&gt;
&lt;li&gt;Transfer ownership of lock&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Transferring-mutex-ownership-between-scopes&quot;&gt;&lt;a href=&quot;#Transferring-mutex-ownership-between-scopes&quot; class=&quot;headerlink&quot; title=&quot;Transferring mutex ownership between scopes&quot;&gt;&lt;/a&gt;Transferring mutex ownership between scopes&lt;/h3&gt;&lt;p&gt;Because &lt;code&gt;std::unique_lock&lt;/code&gt; instances don’t have to own their associated mutexes, the ownership of a mutex can be transferred between instances by moving the instances around.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::unique_lock&lt;/code&gt;是movable，但不是copyable的。&lt;/p&gt;
&lt;p&gt;其中一个应用是返回一个lock，来transfer ownership给调用函数。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::unique_lock&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; get_lock() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex some_mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::unique_lock&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; lk(some_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prepare_data();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;process_data&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::unique_lock&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; lk(get_lock());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do_something();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Locking-at-an-appropriate-granularity&quot;&gt;&lt;a href=&quot;#Locking-at-an-appropriate-granularity&quot; class=&quot;headerlink&quot; title=&quot;Locking at an appropriate granularity&quot;&gt;&lt;/a&gt;Locking at an appropriate granularity&lt;/h3&gt;&lt;p&gt;lock的粒度是用来描述被一个锁保护的数据的数量。&lt;/p&gt;
&lt;p&gt;如果可能，只有在真正访问共享数据的时候才lock a mutex。&lt;/p&gt;
&lt;p&gt;一般来说，不要在拥有锁的时候做耗时的工作，尤其是等待其他的lock（就算知道不会deadlock），或者文件I/O（除非真的是需要保护文件的访问）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::unique_lock&lt;/code&gt;很适合用于这样的情况，因为你可以在不需要访问共享数据的时候&lt;code&gt;unlock()&lt;/code&gt;，需要的时候&lt;code&gt;再lcok()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于lock的粒度和拥有锁的时长&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果只有一个mutex来保护整个数据结构，那么不仅仅很可能会出现更多的竞争，而且减少了lock被held的时间。&lt;/li&gt;
&lt;li&gt;对于同一个mutex，如果获得lock以后进行的操作越多，那么lock就会被held越长。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找到一个合适的粒度，不仅仅要看锁住的数据的数量，还要看lock被获得的时长和获得lock的时候做了什么操作。In general, a lock should be held for only the minimum possible time needed to perform the required operations.&lt;/p&gt;
&lt;p&gt;还有一个问题就是，由于改变了lock的方式，可能会导致代码语义上的改变，有时这样的改变会导致错误。&lt;/p&gt;
&lt;h2 id=&quot;Alternative-facilities-for-protecting-shared-data&quot;&gt;&lt;a href=&quot;#Alternative-facilities-for-protecting-shared-data&quot; class=&quot;headerlink&quot; title=&quot;Alternative facilities for protecting shared data&quot;&gt;&lt;/a&gt;Alternative facilities for protecting shared data&lt;/h2&gt;&lt;p&gt;在特殊情况下，有一些比mutex更合适的方式来保护共享数据。&lt;/p&gt;
&lt;h3 id=&quot;Protecting-shared-data-during-initialization&quot;&gt;&lt;a href=&quot;#Protecting-shared-data-during-initialization&quot; class=&quot;headerlink&quot; title=&quot;Protecting shared data during initialization&quot;&gt;&lt;/a&gt;Protecting shared data during initialization&lt;/h3&gt;&lt;p&gt;有时候可能共享数据在创建以后就是只读的，因此只需要在创建的时候进行保护。但是如果使用mutex，仅仅在初始化的时候保护，这是不必要的，并且还会带来不必要的性能损失。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Double-Checked Locking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最早接触&lt;a href=&quot;http://www.infoq.com/cn/articles/double-checked-locking-with-delay-initialization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DCL&lt;/a&gt;是在设计模式里，单例模式提到过。这个看似高效的方法之所以被骂，就是因为CPU乱序执行可能会导致线程访问没有初始化的对象。&lt;/p&gt;
&lt;p&gt;在这里也是类似的，也会带来问题。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;undefined_behaviour_with_double_checked_locking&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!resource_ptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::lock_guard&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex&amp;gt; lk(resource_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!resource_ptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resource_ptr.reset(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; some_resource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resource_ptr-&amp;gt;do_something();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种类型的race condition叫做data race，是undefined behavior。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lazy initialization with &lt;code&gt;std::once_flag&lt;/code&gt;和&lt;code&gt;std::call_once&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::call_once&lt;/code&gt;通常比显式使用mutex会有更低的开销，尤其是当初始化已经完成的时候。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;some_resource&amp;gt; resource_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::once_flag resource_flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init_resource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resource_ptr.reset(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; some_resource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::call_once(resource_flag,init_resource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resource_ptr-&amp;gt;do_something();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当初始化函数是带有函数调用操作符的类的实例的时候，&lt;code&gt;std::call_once&lt;/code&gt;也支持像&lt;code&gt;std::thread&lt;/code&gt;和&lt;code&gt;std::bind()&lt;/code&gt;的用法。&lt;/p&gt;
&lt;p&gt;要注意的是，如果类的成员含有不能copy或move的，那么要为它们定义特殊成员函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C++11中，规范了在多线程的情况下初始化static变量。初始化被定义为只发生在一个线程上，直到初始化完成其他线程才能继续。&lt;/p&gt;
&lt;p&gt;这可以作为&lt;code&gt;std::call_once&lt;/code&gt;的替代。&lt;/p&gt;
&lt;h3 id=&quot;Protecting-rarely-updated-data-structures&quot;&gt;&lt;a href=&quot;#Protecting-rarely-updated-data-structures&quot; class=&quot;headerlink&quot; title=&quot;Protecting rarely updated data structures&quot;&gt;&lt;/a&gt;Protecting rarely updated data structures&lt;/h3&gt;&lt;p&gt;用mutex来保护较少更新的数据结构不合适，当没有进行更新的时候，它消除了并发读的可能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;reader-writer mutex&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;允许：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;互斥的写或共享；&lt;/li&gt;
&lt;li&gt;并发的的读。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C++标准库没有提供这种锁，这里使用的是boost库。这种锁不是万能的，它的性能依赖于处理器的数量和读写线程相对的工作负载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;boot::shared_mutex&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由boost提供。&lt;/p&gt;
&lt;h3 id=&quot;Recursive-locking&quot;&gt;&lt;a href=&quot;#Recursive-locking&quot; class=&quot;headerlink&quot; title=&quot;Recursive locking&quot;&gt;&lt;/a&gt;Recursive locking&lt;/h3&gt;&lt;p&gt;可以在同一个线程中从同一个&lt;code&gt;std::recursive_lock&lt;/code&gt;的实例获得多次lock。在其他线程获得lock前，当前线程&lt;code&gt;lock()&lt;/code&gt;了多少次，就必须&lt;code&gt;unlock()&lt;/code&gt;多少次。&lt;/p&gt;
&lt;p&gt;但是并不建议使用&lt;code&gt;std::recursive_lock&lt;/code&gt;，当持有lock的时候，invariant很可能是broke的。继续lock，意味着要在invariant broken的情况下做操作。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/18047413/is-this-an-exception-safe-implementation-of-swapmultithread&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Is this an exception safe implementation of swap(multithread)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/22794382/are-c11-thread-local-variables-automatically-static&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Are C++11 thread_local variables automatically static?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/concept/Lockable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++ concepts: Lockable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/double-checked-locking-with-delay-initialization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;双重检查锁定与延迟初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++ Concurrency in Action&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      Sharing data between threads的笔记。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="cpp11" scheme="http://chaomai.github.io/tags/cpp11/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>转 - 字符集和字符编码</title>
    <link href="http://chaomai.github.io/2015/05/27/2015-2015-05-27-reproduce-character-encoding/"/>
    <id>http://chaomai.github.io/2015/05/27/2015-2015-05-27-reproduce-character-encoding/</id>
    <published>2015-05-27T14:20:14.000Z</published>
    <updated>2015-07-14T14:28:08.000Z</updated>
    
    <content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;&lt;br&gt;原文：&lt;a href=&quot;http://cenalulu.github.io/linux/character-encoding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;字符集&quot;&gt;&lt;a href=&quot;#字符集&quot; class=&quot;headerlink&quot; title=&quot;字符集&quot;&gt;&lt;/a&gt;字符集&lt;/h2&gt;&lt;p&gt;字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的转换关系。&lt;/p&gt;
&lt;h2 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h2&gt;&lt;p&gt;字符集只是一个规则集合的名字，对应到真实生活中，字符集就是对某种语言的称呼。&lt;/p&gt;
&lt;p&gt;对于一个字符集来说要正确编码转码一个字符需要三个关键元素：字库表（character repertoire）、编码字符集（coded character set）、字符编码（character encoding form）&lt;/p&gt;
&lt;h3 id=&quot;字库表&quot;&gt;&lt;a href=&quot;#字库表&quot; class=&quot;headerlink&quot; title=&quot;字库表&quot;&gt;&lt;/a&gt;字库表&lt;/h3&gt;&lt;p&gt;一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。&lt;/p&gt;
&lt;h3 id=&quot;编码字符集&quot;&gt;&lt;a href=&quot;#编码字符集&quot; class=&quot;headerlink&quot; title=&quot;编码字符集&quot;&gt;&lt;/a&gt;编码字符集&lt;/h3&gt;&lt;p&gt;用一个编码值&lt;strong&gt;code point&lt;/strong&gt;来表示一个字符在字库中的位置。&lt;/p&gt;
&lt;h3 id=&quot;字符编码-1&quot;&gt;&lt;a href=&quot;#字符编码-1&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h3&gt;&lt;p&gt;将编码字符集和实际存储数值之间的转换关系。&lt;/p&gt;
&lt;p&gt;一般来说都会直接将code point的值作为编码后的值直接存储。例如在ASCII中&lt;code&gt;A&lt;/code&gt;在表中排第65位，而编码后&lt;code&gt;A&lt;/code&gt;的数值是&lt;code&gt;0100 0001&lt;/code&gt;也即十进制的65的二进制转换结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么还要多此一举通过字符编码把序号转换成另外一种存储格式？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统一字库表的目的是为了能够涵盖世界上所有的字符，但实际使用过程中会发现真正用的上的字符相对整个字库表来说比例非常低。而如果把每个字符都用字库表中的序号来存储的话，每个字符就需要3个字节（这里以Unicode字库为例），这样对于原本用仅占一个字符的ASCII编码的英语地区国家显然是一个额外成本（存储体积是原来的三倍）。于是就出现了UTF-8这样的变长编码。在UTF-8编码中原本只需要一个字节的ASCII字符，仍然只占一个字节。而像中文及日语这样的复杂字符就需要2个到3个字节来存储。&lt;/p&gt;
&lt;h2 id=&quot;UTF-8和Unicode的关系&quot;&gt;&lt;a href=&quot;#UTF-8和Unicode的关系&quot; class=&quot;headerlink&quot; title=&quot;UTF-8和Unicode的关系&quot;&gt;&lt;/a&gt;UTF-8和Unicode的关系&lt;/h2&gt;&lt;p&gt;Unicode就是上文中提到的编码字符集，而UTF-8就是字符编码，即Unicode规则字库的一种实现形式。&lt;/p&gt;
&lt;p&gt;Unicode标准几乎涵盖了各个国家语言可能出现的符号和文字，并将为他们编号。详见：Unicode on Wikipedia。Unicode的编号从&lt;code&gt;0000&lt;/code&gt;开始一直到&lt;code&gt;10FFFF&lt;/code&gt;共分为16个Plane，每个Plane中有65536个字符。而UTF-8则只实现了第一个Plane，可见UTF-8虽然是一个当今接受度最广的字符集编码，但是它并没有涵盖整个Unicode的字库，这也造成了它在某些场景下对于特殊字符的处理困难。&lt;/p&gt;
&lt;h2 id=&quot;UTF-8编码简介&quot;&gt;&lt;a href=&quot;#UTF-8编码简介&quot; class=&quot;headerlink&quot; title=&quot;UTF-8编码简介&quot;&gt;&lt;/a&gt;UTF-8编码简介&lt;/h2&gt;&lt;h3 id=&quot;UTF-8的物理存储和Unicode序号的转换关系&quot;&gt;&lt;a href=&quot;#UTF-8的物理存储和Unicode序号的转换关系&quot; class=&quot;headerlink&quot; title=&quot;UTF-8的物理存储和Unicode序号的转换关系&quot;&gt;&lt;/a&gt;UTF-8的物理存储和Unicode序号的转换关系&lt;/h3&gt;&lt;p&gt;UTF-8编码为变长编码。最小编码单位（&lt;code&gt;code unit&lt;/code&gt;）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Byte 1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0xxx xxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实际字符&lt;/th&gt;
&lt;th&gt;在Unicode字库序号的十六进制&lt;/th&gt;
&lt;th&gt;在Unicode字库序号的二进制&lt;/th&gt;
&lt;th&gt;UTF-8编码后的二进制&lt;/th&gt;
&lt;th&gt;UTF-8编码后的十六进制&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;0024&lt;/td&gt;
&lt;td&gt;010 0100&lt;/td&gt;
&lt;td&gt;0&lt;strong&gt;010 0100&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Byte 1&lt;/th&gt;
&lt;th&gt;Byte 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0xxx xxxx&lt;/td&gt;
&lt;td&gt;10xx xxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实际字符&lt;/th&gt;
&lt;th&gt;在Unicode字库序号的十六进制&lt;/th&gt;
&lt;th&gt;在Unicode字库序号的二进制&lt;/th&gt;
&lt;th&gt;UTF-8编码后的二进制&lt;/th&gt;
&lt;th&gt;UTF-8编码后的十六进制&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;¢&lt;/td&gt;
&lt;td&gt;00A2&lt;/td&gt;
&lt;td&gt;000 1010 0010&lt;/td&gt;
&lt;td&gt;110&lt;strong&gt;0 0010&lt;/strong&gt; 10&lt;strong&gt;10 0010&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;C2 A2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;如果一个字节以1110开头，那么代表当前字符为三字节字符，占用2个字节的空间。1110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Byte 1&lt;/th&gt;
&lt;th&gt;Byte 2&lt;/th&gt;
&lt;th&gt;Byte 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0xxx xxxx&lt;/td&gt;
&lt;td&gt;10xx xxxx&lt;/td&gt;
&lt;td&gt;10xx xxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实际字符&lt;/th&gt;
&lt;th&gt;在Unicode字库序号的十六进制&lt;/th&gt;
&lt;th&gt;在Unicode字库序号的二进制&lt;/th&gt;
&lt;th&gt;UTF-8编码后的二进制&lt;/th&gt;
&lt;th&gt;UTF-8编码后的十六进制&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;€&lt;/td&gt;
&lt;td&gt;20AC&lt;/td&gt;
&lt;td&gt;0010 0000 1010 1100&lt;/td&gt;
&lt;td&gt;1110 &lt;strong&gt;0010&lt;/strong&gt; 10&lt;strong&gt;00 0010&lt;/strong&gt; 10&lt;strong&gt;10 1100&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;E2 82 AC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3个字节的UTF-8十六进制编码一定是以&lt;code&gt;E&lt;/code&gt;开头的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;2个字节的UTF-8十六进制编码一定是以&lt;code&gt;C&lt;/code&gt;或&lt;code&gt;D&lt;/code&gt;开头的。&lt;/li&gt;
&lt;li&gt;1个字节的UTF-8十六进制编码一定是以比&lt;code&gt;8&lt;/code&gt;小的数字开头的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;乱码&quot;&gt;&lt;a href=&quot;#乱码&quot; class=&quot;headerlink&quot; title=&quot;乱码&quot;&gt;&lt;/a&gt;乱码&lt;/h2&gt;&lt;p&gt;编码和解码时用了不同或者不兼容的字符集。&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://cenalulu.github.io/linux/character-encoding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;十分钟搞清字符集和字符编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cenalulu.github.io/python/python-encoding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于Python的默认字符集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.joelonsoftware.com/articles/Unicode.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.chi2ko.com/tool/CJK.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字体编辑用中日韩汉字Unicode编码表&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      原文是十分钟搞清字符集和字符编码，这里我简化了一些说明，稍微修改了原文的例子。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="encoding" scheme="http://chaomai.github.io/tags/encoding/"/>
    
  </entry>
  
  <entry>
    <title>Pattern Matching相关算法小结</title>
    <link href="http://chaomai.github.io/2015/05/25/2015-2015-05-25-summary-of-pattern-matching/"/>
    <id>http://chaomai.github.io/2015/05/25/2015-2015-05-25-summary-of-pattern-matching/</id>
    <published>2015-05-25T03:33:43.000Z</published>
    <updated>2016-01-18T08:10:37.724Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Pattern-matching&quot;&gt;&lt;a href=&quot;#Pattern-matching&quot; class=&quot;headerlink&quot; title=&quot;Pattern matching&quot;&gt;&lt;/a&gt;Pattern matching&lt;/h1&gt;&lt;p&gt;Pattern matching的算法有很多，这里做一个简单的总结。&lt;/p&gt;
&lt;p&gt;问题：给定一个字符串&lt;code&gt;txt[0...n-1]&lt;/code&gt;和另一个字符串&lt;code&gt;pat[0...m-1]&lt;/code&gt;，假设n &amp;gt; m，实现一个函数&lt;code&gt;search(char pat[], char txt[])&lt;/code&gt;，完成在&lt;code&gt;txt&lt;/code&gt;中找到所有&lt;code&gt;pat&lt;/code&gt;出现的位置。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;txt[] = &amp;quot;THIS IS A TEST TEXT&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pat[] = &amp;quot;TEST&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Pattern found at index 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Input:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;txt[] = &amp;quot;AABAACAADAABAAABAA&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pat[] = &amp;quot;AABA&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Pattern found at index 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pattern found at index 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pattern found at index 13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Naive-Pattern-Searching&quot;&gt;&lt;a href=&quot;#Naive-Pattern-Searching&quot; class=&quot;headerlink&quot; title=&quot;Naive Pattern Searching&quot;&gt;&lt;/a&gt;Naive Pattern Searching&lt;/h1&gt;&lt;p&gt;也叫Bruce Force。&lt;/p&gt;
&lt;p&gt;方法很简单，对于&lt;code&gt;txt&lt;/code&gt;中的每个index i，检查&lt;code&gt;pat&lt;/code&gt;的每个字符是否匹配。如果有匹配不上的字符，或者匹配成功，都move到下一个index。&lt;/p&gt;
&lt;p&gt;最坏时间复杂度，$O(mn)$。&lt;/p&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/searching-for-patterns-set-1-naive-pattern-searching/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Naive Pattern Searching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;A-Better-Naive-Pattern-Searching&quot;&gt;&lt;a href=&quot;#A-Better-Naive-Pattern-Searching&quot; class=&quot;headerlink&quot; title=&quot;A Better Naive Pattern Searching&quot;&gt;&lt;/a&gt;A Better Naive Pattern Searching&lt;/h1&gt;&lt;p&gt;这个方法需要有一个前提条件：&lt;code&gt;pat&lt;/code&gt;里所有字符都不相同。&lt;/p&gt;
&lt;p&gt;在这个前提下，如果在匹配了j个字符之后出现了mismatch，那么&lt;code&gt;pat&lt;/code&gt;就不是后移一个位置，而是后移j个位置。当然如果是首字符就不匹配，那么仍然是后移一个位置。&lt;/p&gt;
&lt;h2 id=&quot;References-1&quot;&gt;&lt;a href=&quot;#References-1&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/pattern-searching-set-4-a-naive-string-matching-algo-question/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Naive Pattern Searching Question&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;KMP-Algorithm&quot;&gt;&lt;a href=&quot;#KMP-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;KMP Algorithm&quot;&gt;&lt;/a&gt;KMP Algorithm&lt;/h1&gt;&lt;p&gt;Naive Pattern Searching在这样的情况下，效率是很低的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;txt[] = &amp;quot;AAAAAAAAAAAAAAAAAB&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pat[] = &amp;quot;AAAAB&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为&lt;code&gt;pat&lt;/code&gt;每次在比较到不同的字符B的时候，仅仅向后移动一位，搜索位置又要退回，重新比较已经比较过的字符。&lt;/p&gt;
&lt;p&gt;同时这也是Naive Pattern Searching的改进方法无法处理的，因为里面出现了重复的字符。如果再回去看Naive Pattern Searching的改进方法，其实本质上就是为了避免搜索位置的退回。&lt;/p&gt;
&lt;p&gt;KMP可以利用已经比较过的字符这一信息来避免搜索位置退回。至于怎么利用，就是部分匹配表。&lt;/p&gt;
&lt;p&gt;部分匹配表是KMP的关键，生成的方式是对pat的每个前缀，计算该前缀的前缀和后缀的最长的共有元素的长度。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pat                 A B C D A B D&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;partial match value 0 0 0 0 1 2 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有了部分匹配表，在发现不同的字符的时候，就不直接把&lt;code&gt;pat&lt;/code&gt;后移一位，而是根据下面的公式，&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;移动位数 = 已匹配的字符数 - 对应的部分匹配值&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;这里对应的部分匹配值指的是，在&lt;code&gt;pat&lt;/code&gt;中，最后已匹配字符对应的部分匹配值。&lt;/p&gt;
&lt;p&gt;如果是首字符就不匹配，那么仍然是后移一个位置。&lt;/p&gt;
&lt;p&gt;“部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，&lt;code&gt;&amp;quot;ABCDAB&amp;quot;&lt;/code&gt;之中有两个&lt;code&gt;&amp;quot;AB&amp;quot;&lt;/code&gt;，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个&lt;code&gt;&amp;quot;AB&amp;quot;&lt;/code&gt;向后移动4位（$字符串长度-部分匹配值$），就可以来到第二个&lt;code&gt;&amp;quot;AB&amp;quot;&lt;/code&gt;的位置。&lt;/p&gt;
&lt;p&gt;最坏时间复杂度，$O(n)$。&lt;/p&gt;
&lt;p&gt;看完KMP，可以发现Naive Pattern Searching的改进方法实际上是KMP的特例，由于pat中所有字符都不相同，因此部分匹配表中所有的对应的部分匹配值都是0，&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;移动位数 = 已匹配的字符数&lt;br&gt;$$&lt;/p&gt;
&lt;h2 id=&quot;References-2&quot;&gt;&lt;a href=&quot;#References-2&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KMP Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字符串匹配的KMP算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Rabin-Karp-Algorithm&quot;&gt;&lt;a href=&quot;#Rabin-Karp-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Rabin-Karp Algorithm&quot;&gt;&lt;/a&gt;Rabin-Karp Algorithm&lt;/h1&gt;&lt;p&gt;Bruce Force在&lt;code&gt;txt&lt;/code&gt;上每次把&lt;code&gt;pat&lt;/code&gt;后移一位，每次移动之后，检查&lt;code&gt;pat&lt;/code&gt;的每个字符是否匹配。Rabin-Karp也是类似的，每次把pat后移一位，不同的是Rabin-Karp比较的是&lt;code&gt;pat&lt;/code&gt;的hash值和当前对应的&lt;code&gt;txt&lt;/code&gt;子串的hash值。如果hash值相等，然后再去逐个检查子串的字符。&lt;/p&gt;
&lt;p&gt;最直接的方法莫过于计算&lt;code&gt;h(pat)&lt;/code&gt;和&lt;code&gt;txt&lt;/code&gt;中所有子串的hash，然后一一比较。但光是计算&lt;code&gt;txt&lt;/code&gt;中所有子串的hash就需要O(mn)的时间，这样一来，相比起Naive Pattern Searching，这个方法就毫无优势了。&lt;/p&gt;
&lt;p&gt;如何计算hash值是Rabin-Karp的关键，最好是能够利用当前&lt;code&gt;txt&lt;/code&gt;子串的hash值，计算后移一位以后的，以减少计算的开销。Rabin-Karp使用的hash叫做Rolling hash，基本实现是刚刚的方法实际上重复计算了很多重叠的部分，而Rolling hash就要利用当前子串的hash值，来计算后移一个位置之后子串的hash值。&lt;/p&gt;
&lt;p&gt;Intro to Algorithms的Lecture Note举了一个很形象的例子来说明Rolling hash。&lt;/p&gt;
&lt;p&gt;在最坏情况下，每次移动后hash值都相等（因为子串相同或hash冲突），因此移动后都要逐个检查子串的字符。&lt;/p&gt;
&lt;p&gt;最坏时间复杂度，$O(mn)$。&lt;/p&gt;
&lt;h2 id=&quot;References-3&quot;&gt;&lt;a href=&quot;#References-3&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Rolling_hash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rolling hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://courses.csail.mit.edu/6.006/spring11/rec/rec06.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rolling Hash (Rabin-Karp Algorithm)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stellar.mit.edu/S/course/6/fa13/6.006/courseMaterial/topics/topic6/lectureNotes/L09-Hashing-II/L09-Hashing-II.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hashing-II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rabin-Karp Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Finite-Automata&quot;&gt;&lt;a href=&quot;#Finite-Automata&quot; class=&quot;headerlink&quot; title=&quot;Finite Automata&quot;&gt;&lt;/a&gt;Finite Automata&lt;/h1&gt;&lt;p&gt;基于有限状态机实现pattern searching，就是用pattern来构建一个状态表，构建完成以后就可以根据txt的每个字符，来在有限状态机的各个状态之间转移，如果到达终态，那就是匹配到了。&lt;/p&gt;
&lt;p&gt;这个算法的关键就是基于pattern构建状态表。&lt;/p&gt;
&lt;h2 id=&quot;References-4&quot;&gt;&lt;a href=&quot;#References-4&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/searching-for-patterns-set-5-finite-automata/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.geeksforgeeks.org/searching-for-patterns-set-5-finite-automata/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Pattern matching的算法有很多，这里做一个简单的总结。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
      <category term="algorithms" scheme="http://chaomai.github.io/categories/programming/algorithms/"/>
    
    
      <category term="pattern matching" scheme="http://chaomai.github.io/tags/pattern-matching/"/>
    
  </entry>
  
  <entry>
    <title>译 - Locks, Mutexes, and Semaphores: Types of Synchronization Objects</title>
    <link href="http://chaomai.github.io/2015/05/23/2015-2015-05-23-translation-locks-mutexes-and-semaphores-types-of-synchronization-objects/"/>
    <id>http://chaomai.github.io/2015/05/23/2015-2015-05-23-translation-locks-mutexes-and-semaphores-types-of-synchronization-objects/</id>
    <published>2015-05-23T14:12:13.000Z</published>
    <updated>2016-02-23T06:20:07.373Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Locks&quot;&gt;&lt;a href=&quot;#Locks&quot; class=&quot;headerlink&quot; title=&quot;Locks&quot;&gt;&lt;/a&gt;Locks&lt;/h1&gt;&lt;p&gt;lock是一个抽象的概念。一个基本的前提就是一个lock保护着某种共享资源的访问。如果你own一个lock，那么你就能访问被保护的共享资源。如果你没有own lock，那么你就不能够访问这个共享资源。&lt;/p&gt;
&lt;p&gt;为了own一个lock，你首先需要某种lockable对象。然后你从那个对象获得lock。这个操作精确的术语可能会有很多。例如，如果你有一个lockable对象XYZ，你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;acquire the lock on XYZ,&lt;/li&gt;
&lt;li&gt;take the lock on XYZ,&lt;/li&gt;
&lt;li&gt;lock XYZ,&lt;/li&gt;
&lt;li&gt;take ownership of XYZ,&lt;/li&gt;
&lt;li&gt;or some similar term specific to the type of XYZ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lock的概念也意味着某种exclusion：有时，你可能不能获得ownership of a lock，接着将要执行的操作将会fail、或block。就前者而言，操作将会返回某些错误码或异常，以指明take ownership的操作尝试失败。而后者，只有当这个操作take ownership，它才会返回，而这需要系统里的其他线程完成一些工作才能使得这个发生。&lt;/p&gt;
&lt;p&gt;exclusion最常见的形式是一个简单的计数：lockable对象有最大数目的owners。如果达到了这个数目，那么接下来任何尝试获取a lock on it都不会成功。因此，这需要我们有某种机制（当我们完成操作的时候，放弃ownership）。这通常叫做unlocking，但是同样的术语可能不同。例如，你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;release the lock on XYZ,&lt;/li&gt;
&lt;li&gt;drop the lock on XYZ,&lt;/li&gt;
&lt;li&gt;unlock XYZ,&lt;/li&gt;
&lt;li&gt;relinquish ownership of XYZ,&lt;/li&gt;
&lt;li&gt;or some similar term specific to the type of XYZ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你以合适的方式relinquish ownership，如果所需的条件都满足了，那么一个被block的尝试获得锁的操作现在将会继续。&lt;/p&gt;
&lt;p&gt;例如一个lockable对象只允许有3个owners，那么第4个尝试获得lock的操作将block。当3个中的某个owner 释放了lock，那么第4个尝试获得lock的操作将会成功。&lt;/p&gt;
&lt;h1 id=&quot;Ownership&quot;&gt;&lt;a href=&quot;#Ownership&quot; class=&quot;headerlink&quot; title=&quot;Ownership&quot;&gt;&lt;/a&gt;Ownership&lt;/h1&gt;&lt;p&gt;“own” a lock的意思视lockable对象确切的类型而定。某些lockable对象会对ownership有非常严格的定义：this specific thread owns the lock, through the use of that specific object, within this particular scope.&lt;/p&gt;
&lt;p&gt;在其他情况下，这个定义会更不稳定，ownership of the lock会更抽象。在这些情况下，ownership can be relinquished by a different thread or object than the thread or object that acquired the lock.&lt;/p&gt;
&lt;p&gt;注：其实就想看这篇文章里说Ownership的部分，后面的就不翻译了:)&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;原文：&lt;a href=&quot;https://www.justsoftwaresolutions.co.uk/threading/locks-mutexes-semaphores.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Locks, Mutexes, and Semaphores: Types of Synchronization Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      C++ Concurrency in Action作者的文章，介绍了一些关于并发的基础概念：锁、互斥量和信号量。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
      <category term="cpp11" scheme="http://chaomai.github.io/tags/cpp11/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
      <category term="translation" scheme="http://chaomai.github.io/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>C++ Concurrency in Action (2) - Managing Threads</title>
    <link href="http://chaomai.github.io/2015/05/18/2015-2015-05-18-cpp-concurrency-in-action-2/"/>
    <id>http://chaomai.github.io/2015/05/18/2015-2015-05-18-cpp-concurrency-in-action-2/</id>
    <published>2015-05-18T11:35:23.000Z</published>
    <updated>2016-02-23T06:17:37.483Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Managing-threads&quot;&gt;&lt;a href=&quot;#Managing-threads&quot; class=&quot;headerlink&quot; title=&quot;Managing threads&quot;&gt;&lt;/a&gt;Managing threads&lt;/h1&gt;&lt;p&gt;&lt;code&gt;std::thread&lt;/code&gt;：线程管理的相关类和函数。&lt;/p&gt;
&lt;p&gt;对于那些不是那么简单的任务，库提供了可以让你从基本的代码来构建你需要的东西的灵活性。&lt;/p&gt;
&lt;h2 id=&quot;Basic-thread-management&quot;&gt;&lt;a href=&quot;#Basic-thread-management&quot; class=&quot;headerlink&quot; title=&quot;Basic thread management&quot;&gt;&lt;/a&gt;Basic thread management&lt;/h2&gt;&lt;p&gt;每个C++程序都至少有一个线程，这个线程是由C++运行时启动的：运行&lt;code&gt;main()&lt;/code&gt;的那个线程。&lt;/p&gt;
&lt;h3 id=&quot;Launching-a-thread&quot;&gt;&lt;a href=&quot;#Launching-a-thread&quot; class=&quot;headerlink&quot; title=&quot;Launching a thread&quot;&gt;&lt;/a&gt;Launching a thread&lt;/h3&gt;&lt;p&gt;启动一个线程需要构造&lt;code&gt;std::thread&lt;/code&gt;对象：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do_some_work&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;my_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(do_some_work)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//此时新线程已经启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在C++标准库中，&lt;code&gt;std::thread&lt;/code&gt;可以适用于任何callable类型。如果是一个带有函数调用操作符的类的实例，那么对象会被copy到新线程的存储空间。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; background_task&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        do_something();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        do_something_else();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;background_task f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;my_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但要注意的是，如果传入的是一个临时对象，而不是已经命名的对象，那么这样的语法就和函数调用没有区别，编译器也不会把它看作是callable对象。&lt;br&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;std::thread my_thread(background_task());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里声明了一个my_thread函数，接受一个参数，参数是一个函数指针（这个函数不接受任何参数，返回的是background_task对象），返回一个&lt;code&gt;std::thread&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;避免这样问题的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命名函数对象&lt;/li&gt;
&lt;li&gt;使用额外的括号&lt;/li&gt;
&lt;li&gt;使用新的统一的初始化语法&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;std::thread my_thread((background_task()));    //prevent interpretation as a function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::thread my_thread&amp;#123;background_task()&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;lambda表达式&quot;&gt;&lt;a href=&quot;#lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;lambda表达式&quot;&gt;&lt;/a&gt;lambda表达式&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;my_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;([](&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do_something()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do_something_else();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在线程启动以后，需要决定是等待线程结束，还是任其运行。这个决定只需要在线程destroy之前完成即可，因为有可能在你join或detach前，线程就运行完成了。&lt;/p&gt;
&lt;p&gt;如果不想等待线程结束，那么必须保证线程所访问的数据，直到该线程结束时都是合法的。下面就是一个反例：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; func&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; i_):i(i_)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;;++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            do_something(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;oops&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; some_local_state=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;func &lt;span class=&quot;title&quot;&gt;my_func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(some_local_state)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;my_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(my_func)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    my_thread.detach();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码中，因为调用了&lt;code&gt;detach()&lt;/code&gt;，所以&lt;code&gt;oops()&lt;/code&gt;结束时，新线程仍然有可能还在运行。如果仍然在运行，那么&lt;code&gt;do_something(i)&lt;/code&gt;将会访问一个已经destroyed的变量。&lt;/p&gt;
&lt;p&gt;一种常用的方式是，使得thread function self-contained，并且是copy数据到线程，（这里指的应该是function object），而不是共享数据（指针或引用）。除非可以保证线程在函数结束前运行完，否则不要创建一个可以访问所在函数局部变量的线程。当然，也可以join。&lt;/p&gt;
&lt;h3 id=&quot;Waiting-for-a-thread-to-complete&quot;&gt;&lt;a href=&quot;#Waiting-for-a-thread-to-complete&quot; class=&quot;headerlink&quot; title=&quot;Waiting for a thread to complete&quot;&gt;&lt;/a&gt;Waiting for a thread to complete&lt;/h3&gt;&lt;p&gt;对与线程相关联的&lt;code&gt;std::thread&lt;/code&gt;对象调用&lt;code&gt;join()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在上例中，可以换成&lt;code&gt;join()&lt;/code&gt;。但是换了以后就失去了多线程的意义，因为原始线程除了wait，什么都没法做。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;join()&lt;/code&gt;是一种简单粗暴的方法。如果需要细粒度的控制wait，那么就需要其他的机制。&lt;/p&gt;
&lt;p&gt;调用&lt;code&gt;join()&lt;/code&gt;还会清除与线程相关的任何storage，因此&lt;code&gt;std::thread&lt;/code&gt;对象不再和任何已结束的线程关联，换句话说就是，对于给定线程，&lt;code&gt;join()&lt;/code&gt;只能调用一次。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func my_func;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(my_func)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.join();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里加断点可以验证，t在join前，thread id的值不为0，join后变为0。&lt;/p&gt;
&lt;h3 id=&quot;Waiting-in-exceptinal-circumstances&quot;&gt;&lt;a href=&quot;#Waiting-in-exceptinal-circumstances&quot; class=&quot;headerlink&quot; title=&quot;Waiting in exceptinal circumstances&quot;&gt;&lt;/a&gt;Waiting in exceptinal circumstances&lt;/h3&gt;&lt;p&gt;&lt;code&gt;detach()&lt;/code&gt;可以在线程开始后马上调用，但是&lt;code&gt;join()&lt;/code&gt;意味着wait。如果想要在wait前做些其他事情，那么就必须考虑&lt;code&gt;join()&lt;/code&gt;放置的位置。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; func;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; some_local_state=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;func &lt;span class=&quot;title&quot;&gt;my_func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(some_local_state)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(my_func)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        do_something_in_current_thread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        t.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码保证了在异常或者无异常的情况下，都能够&lt;code&gt;join()&lt;/code&gt;。无论是什么原因导致要&lt;code&gt;join()&lt;/code&gt;，都必须保证在所有exit可能的情况里，都有&lt;code&gt;join()&lt;/code&gt;，而上面的代码太复杂，容易出错。&lt;/p&gt;
&lt;h4 id=&quot;RAII&quot;&gt;&lt;a href=&quot;#RAII&quot; class=&quot;headerlink&quot; title=&quot;RAII&quot;&gt;&lt;/a&gt;RAII&lt;/h4&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class thread_guard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::thread&amp;amp; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    explicit thread_guard(std::thread&amp;amp; t_):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        t(t_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~thread_guard()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(t.joinable())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_guard(thread_guard const&amp;amp;)=delete;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_guard&amp;amp; operator=(thread_guard const&amp;amp;)=delete;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct func;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void f()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int some_local_state=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func my_func(some_local_state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::thread t(my_func);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_guard g(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do_something_in_current_thread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但f exit时，局部对象的销毁顺序是与构造顺序相反的。因此无论是什么情况导致f exit，只要t是joinable的，就可以保证join。&lt;/p&gt;
&lt;p&gt;之所以要disable copy和assign，是因为如果enalbe，那么对象的生命周期可能会超过thread应该join的作用域。&lt;/p&gt;
&lt;h3 id=&quot;Runing-threads-in-the-background&quot;&gt;&lt;a href=&quot;#Runing-threads-in-the-background&quot; class=&quot;headerlink&quot; title=&quot;Runing threads in the background&quot;&gt;&lt;/a&gt;Runing threads in the background&lt;/h3&gt;&lt;p&gt;在一个&lt;code&gt;std::thread&lt;/code&gt;对象上调用&lt;code&gt;detach()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一旦调用&lt;code&gt;detach()&lt;/code&gt;，就再也无法wait for that thread（不能获得reference到that thread的&lt;code&gt;std::thread&lt;/code&gt;对象，也不能&lt;code&gt;join()&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;被&lt;code&gt;detach()&lt;/code&gt;的线程（也被叫做demon thread）会在后台运行，拥有权和控制权会交给C++ Runtime library，它能保证当线程结束时，相关的资源会被回收。这样的线程可能会是long-running的线程，执行监视、清理和优化的工作。&lt;/p&gt;
&lt;p&gt;为了从一个&lt;code&gt;std::thread&lt;/code&gt;对象上&lt;code&gt;detach()&lt;/code&gt;线程，必须要有线程来detach。调用&lt;code&gt;detach()&lt;/code&gt;的要求和&lt;code&gt;join()&lt;/code&gt;一样，joinable的&lt;code&gt;std::thread&lt;/code&gt;对象才可以detach()。&lt;/p&gt;
&lt;h2 id=&quot;Passing-arguments-to-a-thread-function&quot;&gt;&lt;a href=&quot;#Passing-arguments-to-a-thread-function&quot; class=&quot;headerlink&quot; title=&quot;Passing arguments to a thread function&quot;&gt;&lt;/a&gt;Passing arguments to a thread function&lt;/h2&gt;&lt;p&gt;可以用前面的方法，用一个带有data成员的函数对象，但更简便的是：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;amp; s)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,”hello”)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上例中，要注意的是，std::string是以char const*的形式传入的，只有在新线程的context中才会被转为&lt;code&gt;std::string&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在默认情况下，参数是被copy的。我猜这样设计的原因也是出于之前提到过的原因，如果线程point to或reference to的local variable所在的scope结束，local variable就会被销毁，那么线程将会访问一个已经destroyed的变量。除非使用额外的&lt;code&gt;join()&lt;/code&gt;，但这无疑增加了用户编码的复杂度。&lt;/p&gt;
&lt;h3 id=&quot;Just-want-reference&quot;&gt;&lt;a href=&quot;#Just-want-reference&quot; class=&quot;headerlink&quot; title=&quot;Just want reference&quot;&gt;&lt;/a&gt;Just want reference&lt;/h3&gt;&lt;p&gt;如果我就是要修改原始数据，怎么办？对于pointer，这个倒是好说，直接传pointer即可，地址会被copy，但是reference就不一样了。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update_data_for_widget&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(widget_id w,widget_data&amp;amp; data)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;oops_again&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(widget_id w)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    widget_data data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(update_data_for_widget,w,data)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display_status();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    process_widget_data(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上例中，虽然&lt;code&gt;update_data_for_widget()&lt;/code&gt;期望的是第二个参数传入引用，但是&lt;code&gt;std::thread&lt;/code&gt;并不知道。&lt;code&gt;update_data_for_widget()&lt;/code&gt;被调用时，data实际上是reference to线程内部的copy过来的data，而不是原始的data。线程结束时，这些对data的操作都会随着线程内部copy的销毁而丢失，&lt;code&gt;process_widget_data()&lt;/code&gt;接受的还是没有修改的data。&lt;/p&gt;
&lt;p&gt;但是我在clang++-3.6，libstdc++的环境下编译的时候，以上代码是无法通过编译的，错误如下：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;error: no type named &#39;type&#39; in &#39;std::result_of&amp;lt;void (*(int, double))(int, double &amp;amp;)&amp;gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      typedef typename result_of&amp;lt;_Callable(_Args...)&amp;gt;::type result_type;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;加入std::ref后编译通过，&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;std::thread t(update_data_for_widget,w,std::ref(data));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;std-thread-and-std-bind&quot;&gt;&lt;a href=&quot;#std-thread-and-std-bind&quot; class=&quot;headerlink&quot; title=&quot;std::thread and std::bind&quot;&gt;&lt;/a&gt;&lt;code&gt;std::thread&lt;/code&gt; and &lt;code&gt;std::bind&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;std::thread&lt;/code&gt;的构造函数和&lt;code&gt;std::bind&lt;/code&gt;的操作有相同的机制，可以这样构造&lt;code&gt;std::thread&lt;/code&gt;对象。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; X&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do_lengthy_work&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X my_x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&amp;amp;X::do_lengthy_work,&amp;amp;my_x)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果成员函数有参数，那么可以作为构造函数的第三个参数，以此类推。&lt;/p&gt;
&lt;h3 id=&quot;objects-cannot-be-copied&quot;&gt;&lt;a href=&quot;#objects-cannot-be-copied&quot; class=&quot;headerlink&quot; title=&quot;objects cannot be copied&quot;&gt;&lt;/a&gt;objects cannot be copied&lt;/h3&gt;&lt;p&gt;有的对象不能够被copy，比如&lt;code&gt;std::unique_ptr&lt;/code&gt;对象。这时需要用&lt;code&gt;std::move()&lt;/code&gt;来transfer ownership到另一个&lt;code&gt;std::unique_ptr&lt;/code&gt;对象。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void process_big_object(std::unique_ptr&amp;lt;big_object&amp;gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::unique_ptr&amp;lt;big_object&amp;gt; p(new big_object);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;prepare_data(42);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::thread t(process_big_object,std::move(p));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Transferring-ownership-of-a-thread&quot;&gt;&lt;a href=&quot;#Transferring-ownership-of-a-thread&quot; class=&quot;headerlink&quot; title=&quot;Transferring ownership of a thread&quot;&gt;&lt;/a&gt;Transferring ownership of a thread&lt;/h2&gt;&lt;p&gt;虽然&lt;code&gt;std::thread&lt;/code&gt;不像&lt;code&gt;std::unique_ptr&lt;/code&gt;动态的拥有一个对象，但是&lt;code&gt;std::thread&lt;/code&gt;的确是拥有资源：每个&lt;code&gt;std::thread&lt;/code&gt;实例负责管理一个线程的执行。由于&lt;code&gt;std::thread&lt;/code&gt;对象不是copyable，而是moveable，因此对象的ownership可以在对象间transfer。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;some_function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;some_other_function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(some_function)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::thread t2=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::move(t1);    &lt;span class=&quot;comment&quot;&gt;//t1不再与运行some_function()的线程关联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t1=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::thread(some_other_function);    &lt;span class=&quot;comment&quot;&gt;//如果是临时对象，move自动并且隐式的发生&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::thread t3；    &lt;span class=&quot;comment&quot;&gt;//默认构造，没有和任何执行线程关联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t3=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::move(t2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t1=&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::move(t3);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上例中的最后一个move，t1原本是和运行&lt;code&gt;some_other_function()&lt;/code&gt;的线程关联的，但是运行着&lt;code&gt;some_function()&lt;/code&gt;的线程的ownership被transfer给了t1，这将导致程序终止。&lt;br&gt;因为在线程运行结束并销毁前，要么&lt;code&gt;join()&lt;/code&gt;，要么&lt;code&gt;detach()&lt;/code&gt;，但是绝对不能够简单的通过向管理它的&lt;code&gt;std::thread&lt;/code&gt;对象赋值(move)而丢掉它。“野线程”不允许存在。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;some_function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::thread(some_function);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;some_other_function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(some_other_function,&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上例中，实际上是在transfer ownership。&lt;/p&gt;
&lt;p&gt;在这里，&lt;code&gt;std::move&lt;/code&gt;的另一个作用可以简化&lt;code&gt;thread_gurad&lt;/code&gt;。在原来的&lt;code&gt;thread_gurad&lt;/code&gt;中，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;thread_gurad(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::thread(do_work, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样是不允许的，因为&lt;code&gt;thread_gurad&lt;/code&gt;构造函数接受的参数是引用，因此传入的必须是左值，而unnamed &lt;code&gt;std::thread&lt;/code&gt; object并不是左值对象。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;std::move&lt;/code&gt;后，&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class scoped_thread &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  std::thread t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  explicit scoped_thread(std::thread t_) :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      t(std::move(t_)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!t.joinable()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      throw std::logic_error(&quot;No thread&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ~scoped_thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scoped_thread(scoped_thread const &amp;amp;p) = delete;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scoped_thread &amp;amp;operator=(scoped_thread const &amp;amp;) = delete;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scoped_thread(std::thread(do_work, 2));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述操作就可以了。这样做还避免了&lt;code&gt;thread_gurad&lt;/code&gt;对象的生命周期可能超过它引用的线程所在的scope，并且transfer以后，没有其他关联的&lt;code&gt;std::thread&lt;/code&gt;对象可以join或detach。&lt;/p&gt;
&lt;h2 id=&quot;Choosing-the-number-of-threads-at-runtime&quot;&gt;&lt;a href=&quot;#Choosing-the-number-of-threads-at-runtime&quot; class=&quot;headerlink&quot; title=&quot;Choosing the number of threads at runtime&quot;&gt;&lt;/a&gt;Choosing the number of threads at runtime&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::thread::hardware_concurrency()&lt;/code&gt;，这个函数返回可以真正并行执行的线程数目。但这只是个hint，换句话说，就算可以并发多个线程，如果没有可用的信息，它可能会返回0。&lt;/p&gt;
&lt;p&gt;C++ Concurrency in Action书中，在并行累加例子的后面有并行算法要求的共性的总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;at least forward iterators&lt;/li&gt;
&lt;li&gt;single-pass input iterators&lt;/li&gt;
&lt;li&gt;T must be default constructiable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到目前位置，由于不能够直接从线程中返回值，因此必须传入reference。&lt;/p&gt;
&lt;h2 id=&quot;Identifying-threads&quot;&gt;&lt;a href=&quot;#Identifying-threads&quot; class=&quot;headerlink&quot; title=&quot;Identifying threads&quot;&gt;&lt;/a&gt;Identifying threads&lt;/h2&gt;&lt;p&gt;线程识别符是&lt;code&gt;std::thread::id&lt;/code&gt;类型的，获得方式有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过成员函数&lt;code&gt;get_id()&lt;/code&gt;，从关联该线程的&lt;code&gt;std::thread&lt;/code&gt;对象获得（如果对象没有关联任何线程，则会返回默认构造函数生成的&lt;code&gt;std::thread::id&lt;/code&gt;对象，表示not any thread）&lt;/li&gt;
&lt;li&gt;对于当前线程，使用&lt;code&gt;std::thread::get_id()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;std::thread::id&lt;/code&gt;对象可以被copy，并且该类型提供了完整的比较操作（全序的）。如果一致，那么他们代表同一线程，或者&lt;em&gt;not any thread&lt;/em&gt;。该类型对象还可以作为key用于关联容器、排序，同时标准库还提供了&lt;code&gt;std::hash&amp;lt;std::thread::id&amp;gt;&lt;/code&gt;，因此还能用于无序关联容器。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::thread::id&lt;/code&gt;对象常用于检查线程是否需要做某些操作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Managing threads的笔记。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="cpp11" scheme="http://chaomai.github.io/tags/cpp11/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>C++ Concurrency in Action (1) - Hello, World of Concurrency in C++!</title>
    <link href="http://chaomai.github.io/2015/05/17/2015-2015-05-17-cpp-concurrency-in-action-1/"/>
    <id>http://chaomai.github.io/2015/05/17/2015-2015-05-17-cpp-concurrency-in-action-1/</id>
    <published>2015-05-17T11:35:23.000Z</published>
    <updated>2016-02-23T06:17:40.356Z</updated>
    
    <content type="html">&lt;h1 id=&quot;关于此系列文章&quot;&gt;&lt;a href=&quot;#关于此系列文章&quot; class=&quot;headerlink&quot; title=&quot;关于此系列文章&quot;&gt;&lt;/a&gt;关于此系列文章&lt;/h1&gt;&lt;p&gt;最近在看这本书，这个系列文章是我在看书过程中的笔记，记录了一些我觉得关键的地方和自己的思考。如果能帮助到你，I will be very happy :).&lt;/p&gt;
&lt;h1 id=&quot;关于C-Concurrency-in-Action&quot;&gt;&lt;a href=&quot;#关于C-Concurrency-in-Action&quot; class=&quot;headerlink&quot; title=&quot;关于C++ Concurrency in Action&quot;&gt;&lt;/a&gt;关于C++ Concurrency in Action&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;本书是一本基于C++11新标准的并发和多线程编程深度指南。从std::thread、std::mutex、std::future和std::async等基础类的使用，到内存模型和原子操作、基于锁和无锁数据结构的构建，再扩展到并行算法、线程管理，最后还介绍了多线程代码的测试工作。本书的附录部分还对C++11新语言特性中与多线程相关的项目进行了简要的介绍，并提供了C++11线程库的完整参考。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;并发编程网&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://ifeve.com/c-plus-plus-concurrency-in-action/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《C++ Concurrency in Action》中文版&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;2014年初要出的中文版，只是到现在还没有，看英文吧。&lt;/p&gt;
&lt;h1 id=&quot;Hello-world-of-concurrency-in-C&quot;&gt;&lt;a href=&quot;#Hello-world-of-concurrency-in-C&quot; class=&quot;headerlink&quot; title=&quot;Hello, world of concurrency in C++&quot;&gt;&lt;/a&gt;Hello, world of concurrency in C++&lt;/h1&gt;&lt;p&gt;在C++中实现多线程，可以写出行为有保证的可移植的代码。&lt;/p&gt;
&lt;h3 id=&quot;Appraoches-to-concurrency&quot;&gt;&lt;a href=&quot;#Appraoches-to-concurrency&quot; class=&quot;headerlink&quot; title=&quot;Appraoches to concurrency&quot;&gt;&lt;/a&gt;Appraoches to concurrency&lt;/h3&gt;&lt;h4 id=&quot;多进程&quot;&gt;&lt;a href=&quot;#多进程&quot; class=&quot;headerlink&quot; title=&quot;多进程&quot;&gt;&lt;/a&gt;多进程&lt;/h4&gt;&lt;p&gt;消息传递由进程间通信实现，但是，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于操作系统的有很多保护机制来避免一个进程难以修改另一个的数据，因此实现通讯的方式复杂或者慢；&lt;/li&gt;
&lt;li&gt;有固有的开销，启动进程需要时间（系统需要分配资源等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h4&gt;&lt;p&gt;操作系统要做的更少，灵活的共享内存是有代价的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Why-use-concurrency&quot;&gt;&lt;a href=&quot;#Why-use-concurrency&quot; class=&quot;headerlink&quot; title=&quot;Why use concurrency&quot;&gt;&lt;/a&gt;Why use concurrency&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;separation of concerns&lt;/li&gt;
&lt;li&gt;performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Ways-to-use-concurrency&quot;&gt;&lt;a href=&quot;#Ways-to-use-concurrency&quot; class=&quot;headerlink&quot; title=&quot;Ways to use concurrency&quot;&gt;&lt;/a&gt;Ways to use concurrency&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;task parallelism, data parallelism；&lt;/li&gt;
&lt;li&gt;使用现有的并行计算能力来解决更大的问题；&lt;/li&gt;
&lt;li&gt;（两种方式有着不同的关注点：一个是利用并行来缩短任务的时间；另一个是在任务处理时间一定的情况下，并行的运行多个任务来加大处理量。）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;When-not-to-use-concurrency&quot;&gt;&lt;a href=&quot;#When-not-to-use-concurrency&quot; class=&quot;headerlink&quot; title=&quot;When not to use concurrency&quot;&gt;&lt;/a&gt;When not to use concurrency&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现并发的cost&amp;gt;收益；&lt;/li&gt;
&lt;li&gt;线程的启动需要时间来给os分配相关的内核资源和栈空间，如果线程完成的时间很短，那可能启动的时间就占据了运行时间的大部分；&lt;/li&gt;
&lt;li&gt;由于系统的资源有限，线程是一种有限的资源,线程越多，os必须进行更多的context switching。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Hello, world of concurrency in C++!的笔记。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
      <category term="cpp11" scheme="http://chaomai.github.io/tags/cpp11/"/>
    
      <category term="concurrency" scheme="http://chaomai.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Clang++中C++11 Thread的支持</title>
    <link href="http://chaomai.github.io/2015/05/15/2015-2015-05-15-compile-c-11-thread-with-clang/"/>
    <id>http://chaomai.github.io/2015/05/15/2015-2015-05-15-compile-c-11-thread-with-clang/</id>
    <published>2015-05-15T11:35:23.000Z</published>
    <updated>2016-02-23T06:17:20.656Z</updated>
    
    <content type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;在Ubuntu中使用Clang++，&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clang++-3.7 -std=c++11 test.cpp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译C++11编写的多线程代码时，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  t.join();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发现如下问题：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/tmp/&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-9606ba.o: In &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; `std::thread::thread&amp;lt;void (&amp;amp;)()&amp;gt;(void (&amp;amp;)())&lt;span class=&quot;string&quot;&gt;&#39;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test.cpp:(.text[_ZNSt6threadC2IRFvvEJEEEOT_DpOT0_]+0x21): undefined reference to `pthread_create&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clang: error: linker &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; failed with &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; code 1 (use -v to see invocation)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Linux中，Standard C++ library的默认实现是libstdc++。虽然安装了clang，但是编译时使用的仍然是GNU的libstdc++。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行clang++ -v以后，可以知道使用的线程模型是posix。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h1&gt;&lt;p&gt;既然底层使用了posix来实现C++11的线程，那么编译的时候必然要有-pthread&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clang++-3.7 -std=c++11 -pthread test.cpp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      在Linux下编译C++11的多线程代码时，提示pthread_create为定义。最后发现clang++在Linux在使用的是posix来实现C++11的线程，编译的时候需要加上-pthread。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
      <category term="clang" scheme="http://chaomai.github.io/tags/clang/"/>
    
      <category term="cpp11" scheme="http://chaomai.github.io/tags/cpp11/"/>
    
  </entry>
  
  <entry>
    <title>编译时，-Pthread and -Lpthread的区别</title>
    <link href="http://chaomai.github.io/2015/05/14/2015-2015-05-14-difference-between-pthread-and-lpthread/"/>
    <id>http://chaomai.github.io/2015/05/14/2015-2015-05-14-difference-between-pthread-and-lpthread/</id>
    <published>2015-05-14T11:31:30.000Z</published>
    <updated>2015-07-14T14:28:08.000Z</updated>
    
    <content type="html">&lt;p&gt;-pthread告诉编译器，要链接到pthread库，同时配置线程的编译。&lt;/p&gt;
&lt;p&gt;下面的例子就显示了在使用-pthread时，定义了不同的宏。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gcc -pthread -E &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;M test.c &amp;gt; dm.pthread.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gcc          -E &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;M test.c &amp;gt; dm.nopthread.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ diff dm.pthread.txt dm.nopthread.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152d151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; &lt;span class=&quot;comment&quot;&gt;#define _REENTRANT 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208d206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; &lt;span class=&quot;comment&quot;&gt;#define __USE_REENTRANT 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;-lpthread只会告诉编译器，要链接到pthread库，但是这些宏不会被定义。&lt;/p&gt;
&lt;p&gt;编译时，应该使用-pthread。&lt;/p&gt;
&lt;h1 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; class=&quot;headerlink&quot; title=&quot;reference&quot;&gt;&lt;/a&gt;reference&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23250863/difference-between-pthread-and-lpthread-while-compiling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;difference-between-pthread-and-lpthread-while-compiling&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      gcc编译多线程代码时，参数不同导致结果的不同。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="pthread" scheme="http://chaomai.github.io/tags/pthread/"/>
    
  </entry>
  
  <entry>
    <title>读加缪《局外人》</title>
    <link href="http://chaomai.github.io/2015/03/21/2015-2015-03-21-the-stranger/"/>
    <id>http://chaomai.github.io/2015/03/21/2015-2015-03-21-the-stranger/</id>
    <published>2015-03-21T15:08:50.000Z</published>
    <updated>2015-07-14T14:28:08.000Z</updated>
    
    <content type="html">&lt;p&gt;存在主义，这是在读这本书前，我从书评里扫到的第一个，也是印象最深的词。隐约觉得《局外人》会表达某种深奥的、晦涩的东西。接着我便怀着竭尽自己所能去理解的心态开始了阅读。&lt;/p&gt;
&lt;p&gt;“今天，妈妈死了。也许是在昨天，我搞不清。”简短的四句话便铺垫了书中默尔索冷漠的态度。默尔索是一个冷淡孤僻、不懂得人情世故、交友不慎、无追求不上进的人。在他看来，身边发生的一切，他都表现得和他没什么关系、很随意的样子，无论是亲情、爱情、友情，亦或是事业。我好几次都被他不正常的冷静逗笑。结尾默尔索因为杀了人，被判处死刑。审判的时候，大家议论的更多的是他母亲去世的那天，他的表现，而不是杀人这个事情本身。最后默尔索拒绝上述、忏悔，静静的等待死亡。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从小说叙述的事情来看，默尔索的死，其实是因为拒绝了循规蹈矩、大家都过着的、正常人的生活，他挑战了整个社会。作为一个异类，社会不允许这样的人继续存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;“莫尔索的死，不是因为杀了人，而是挑战了整个社会的伪善矫情，挑战了谎言堆砌的现代文明，戳穿了皇帝的新衣。这个什么都不爱什么都不在乎的人，在这一点上是激情澎湃的。总是这样，小说中的人物代替我们说出真相，代替我们勇敢。”&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;不吭声&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://book.douban.com/review/1396585/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;读加缪杂记&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在看了wiki上关于存在主义的词条以后，对存在主义的定义了解了，但是很难说出小说中含有的存在主义的东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;“存在主义，是一个哲学的非理性主义思潮，它认为人存在的意义是无法经由理性思考而得到答案的，以强调个人、独立自主和主观经验。”&lt;/p&gt;
&lt;p&gt;““存在先于本质”（法语：l’existence précède l’essence）。他的意思是说，除了人的生存之外没有天经地义的道德或灵魂。道德和灵魂都是人在生存中创造出来的。人没有义务遵守某个道德标准或宗教信仰，却有选择的自由。要评价一个人，要评价他的所作所为，而不是评价他是个什么人物，因为一个人是由他的行动来定义的。”&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;存在主义&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/%E5%AD%98%E5%9C%A8%E4%B8%BB%E4%B9%89&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wiki&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;在小说的末尾，默尔索觉得神甫连自己是否活着都没法把握，但是他对自己很有把握，对他所有的一切都有把握。接着，默尔索又说了，注定只有一种命运选择了他，那么其他人的生活和命运对他又有什么重要？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      读了加谬的《局外人》，这个算是，不是读后感的读后感吧。
    
    </summary>
    
      <category term="thought" scheme="http://chaomai.github.io/categories/thought/"/>
    
    
      <category term="reading" scheme="http://chaomai.github.io/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>从汇编的角度分析C++引用</title>
    <link href="http://chaomai.github.io/2015/03/10/2015-2015-03-10-analysis-reference-in-cpp-from-the-perspective-of-assembly/"/>
    <id>http://chaomai.github.io/2015/03/10/2015-2015-03-10-analysis-reference-in-cpp-from-the-perspective-of-assembly/</id>
    <published>2015-03-10T09:35:29.000Z</published>
    <updated>2016-02-23T06:22:13.696Z</updated>
    
    <content type="html">&lt;h1 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h1&gt;&lt;p&gt;C++中，引用为对象起了另外一个名字，引用类型refers to另外一种类型。定义引用时，把引用和初始值绑定在一起，而不是将初始值拷贝给引用。定义了引用之后，对其进行的所有操作都是在与之绑定的对象上进行的。但是引用本身不是一个对象。&lt;/p&gt;
&lt;p&gt;说到这里，其实会发现引用和指针有点像，但实际上它们是不同的。首先引用在绑定到对象以后，就不能再绑定到另外一个对象；其次，引用本身不是一个对象，但是指针是一个对象。&lt;/p&gt;
&lt;h1 id=&quot;汇编的角度&quot;&gt;&lt;a href=&quot;#汇编的角度&quot; class=&quot;headerlink&quot; title=&quot;汇编的角度&quot;&gt;&lt;/a&gt;汇编的角度&lt;/h1&gt;&lt;p&gt;更深入到底层，可以汇编的角度来看引用。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp;ra = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ra++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *pa = &amp;amp;b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pa++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(*pa)++;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码的反汇编如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int a = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;012E33F8  mov         dword ptr [a],3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int &amp;amp;ra = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;012E33FF  lea         eax,[a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;012E3402  mov         dword ptr [ra],eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int b = 4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;012E3405  mov         dword ptr [b],4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int *pa = &amp;amp;b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;012E340C  lea         eax,[b]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;012E340F  mov         dword ptr [pa],eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ra++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F4475  mov         eax,dword ptr [ra]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F4478  mov         ecx,dword ptr [eax]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F447A  add         ecx,1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F447D  mov         edx,dword ptr [ra]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F4480  mov         dword ptr [edx],ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pa++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F448F  mov         eax,dword ptr [pa]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F4492  add         eax,4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F4495  mov         dword ptr [pa],eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(*pa)++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F4498  mov         eax,dword ptr [pa]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F449B  mov         ecx,dword ptr [eax]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F449D  add         ecx,1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F44A0  mov         edx,dword ptr [pa]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;013F44A3  mov         dword ptr [edx],ecx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，首先把3放入地址为[a]的内存，然后把a的地址放入eax，最后把eax的值放入地址为[ra]的内存。实际上，就是把a的地址放入了ra里。而b和pa也同样是这样步骤。&lt;/p&gt;
&lt;p&gt;然后再来看++操作的部分，在汇编的角度，引用和指针在内存中都是地址，在对指针指向的变量进行++时，需要手动的来进行解引用；但对于引用，解引用这个操作是编译器帮你完成了，只需要直接++即可。&lt;/p&gt;
&lt;p&gt;从汇编的角度来看，引用是通过指针来实现的。&lt;/p&gt;
&lt;h1 id=&quot;实现引用类型与被引用对象分离&quot;&gt;&lt;a href=&quot;#实现引用类型与被引用对象分离&quot; class=&quot;headerlink&quot; title=&quot;实现引用类型与被引用对象分离?&quot;&gt;&lt;/a&gt;实现引用类型与被引用对象分离?&lt;/h1&gt;&lt;p&gt;C++中规定了引用在绑定到对象以后，就不能再绑定到另外一个对象，既然了解了C++中引用的底层的实现，能否通过底层的方法来绕过这个限制？答案是可以的。&lt;/p&gt;
&lt;p&gt;先来看这么几行代码，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp;ra = a;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对ra进行的所有操作都是在与之绑定的变量a上进行的，因此直接操作ra来修改绑定是无法实现的。由于定义以上几个变量时，它们应该是处于相邻的内存空间中，因此可以通过ra相邻的内存，来更改ra，进而分离ra与被引用对象a。&lt;/p&gt;
&lt;p&gt;这是在执行以上3条语句之后的内存情况，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x0078F750  cc cc cc cc 6c f7 78 00  ????l?x.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0078F758  cc cc cc cc cc cc cc cc  ????????&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0078F760  04 00 00 00 cc cc cc cc  ....????&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0078F768  cc cc cc cc 03 00 00 00  ????....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0078F770  cc cc cc cc 96 d1 e4 4e  ???????N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0078F778  c8 f7 78 00 69 69 18 00  ??x.ii..&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中EBP=其中EBP=0x007EFA7C，可以看到EBP之前的12byte的位置才是第一个变量，再往前12byte是第二个变量，继续往前12byte是引用。因此b的地址减3就是存储引用的内存，修改这个地方即可。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*(&amp;amp;b - &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;amp;b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ra++;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;继续执行下面代码以后，b被增加成5。&lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;C++ Primer 第5版&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      C++中，引用为对象起了另外一个名字，引用类型refers to另外一种类型。引用和指针是不同的，可以汇编的角度来看引用。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++中typedef的使用和类型安全</title>
    <link href="http://chaomai.github.io/2015/02/06/2015-2015-02-06-type-safe-typedef-in-cpp/"/>
    <id>http://chaomai.github.io/2015/02/06/2015-2015-02-06-type-safe-typedef-in-cpp/</id>
    <published>2015-02-06T15:06:00.000Z</published>
    <updated>2016-02-23T06:18:43.353Z</updated>
    
    <content type="html">&lt;h1 id=&quot;关于typedef&quot;&gt;&lt;a href=&quot;#关于typedef&quot; class=&quot;headerlink&quot; title=&quot;关于typedef&quot;&gt;&lt;/a&gt;关于&lt;code&gt;typedef&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;传统的&lt;code&gt;typedef&lt;/code&gt;机制允许对已存在的type提供synonym或者alias，我们把这种的传统的&lt;code&gt;typedef&lt;/code&gt;（包括c++11中的alias声明）描述为“透明类型机制”：这种声明引入了新的类型名称，但不是新的类型。被定义为新引入的alias的类型与被定义为原来类型的变量，完全一样，不会有一丁点行为上的差别。&lt;/p&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;但是这种特性在某些场景下会有缺陷。&lt;/p&gt;
&lt;h2 id=&quot;问题1&quot;&gt;&lt;a href=&quot;#问题1&quot; class=&quot;headerlink&quot; title=&quot;问题1&quot;&gt;&lt;/a&gt;问题1&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; score = &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;score &lt;span class=&quot;title&quot;&gt;penalize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(score n)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n &amp;gt; &lt;span class=&quot;number&quot;&gt;5u&lt;/span&gt; ? n - &lt;span class=&quot;number&quot;&gt;5u&lt;/span&gt; : score &amp;#123; &lt;span class=&quot;number&quot;&gt;0u&lt;/span&gt; &amp;#125;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; serial_number = &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;serial_number &lt;span class=&quot;title&quot;&gt;next_id&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(serial_number n)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n + &lt;span class=&quot;number&quot;&gt;1u&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用新的alias可以很明显的了解以上代码的意图，但实际上这样的使用意图在错误使用alias的情况下，是无法保证的，或者说是不可实行的(unenforceable)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unsigned&lt;/code&gt;, &lt;code&gt;next_id&lt;/code&gt;和&lt;code&gt;serial_number&lt;/code&gt;是可以互换的。&lt;code&gt;penalize()&lt;/code&gt;所penalize的不一定是&lt;code&gt;score&lt;/code&gt;，也可以是&lt;code&gt;serial_number&lt;/code&gt;。这样虽然编译器不会报错，但是代码没有意义。编码的时候如果错误的使用了alias，还会导致难以track的问题。&lt;/p&gt;
&lt;h2 id=&quot;问题2&quot;&gt;&lt;a href=&quot;#问题2&quot; class=&quot;headerlink&quot; title=&quot;问题2&quot;&gt;&lt;/a&gt;问题2&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sound_id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;sound_id &lt;span class=&quot;title&quot;&gt;create_sound&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroy_sound&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sound_id id)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sprite_id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroy_sprite&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sprite_id)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sound_id fx = create_sound(...);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;destroy_sprite(fx);  &lt;span class=&quot;comment&quot;&gt;// An honest mistake!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的问题也是类似问题1。或许你可以认为自己能够小心的编码，来保证alias的正确使用，但是这种欺骗自己的想法，并不能100%的保证问题不会发生。If they can happen, they will happen!&lt;/p&gt;
&lt;h2 id=&quot;问题3&quot;&gt;&lt;a href=&quot;#问题3&quot; class=&quot;headerlink&quot; title=&quot;问题3&quot;&gt;&lt;/a&gt;问题3&lt;/h2&gt;&lt;p&gt;这个问题也是类似，但不仅仅会有误用的风险，同时还导致了类型系统的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; X, Y, Z; &lt;span class=&quot;comment&quot;&gt;// Cartesian 3D coordinate types&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; Rho, Theta, Phi; &lt;span class=&quot;comment&quot;&gt;// spherical 3D coordinate types&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; PhysicsVector &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PhysicsVector(X, Y, Z);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PhysicsVector(Rho, Theta, Phi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    · · ·&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// PhysicsVector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上述例子中，&lt;code&gt;typedef&lt;/code&gt;的大量使用实际上破坏了类型系统（问题域中的类型和构造函数中的类型）。笛卡尔坐标系的三个坐标值和球坐标系中的，虽然都是&lt;code&gt;double&lt;/code&gt;，但明显意义是不一样的。尽管误用编译器不会报错，但是程序是有bug的。&lt;/p&gt;
&lt;p&gt;另一个问题是，两个构造函数实际上就是一个，它接受三个&lt;code&gt;double&lt;/code&gt;类型的参数。但这里的意图是，分别为两种坐标系建立构造函数。&lt;/p&gt;
&lt;h1 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h1&gt;&lt;h2 id=&quot;opaque-type-clang-3-5-1-g-4-8-2和VS2013都不支持&quot;&gt;&lt;a href=&quot;#opaque-type-clang-3-5-1-g-4-8-2和VS2013都不支持&quot; class=&quot;headerlink&quot; title=&quot;opaque type(clang++ 3.5.1, g++4.8.2和VS2013都不支持)&quot;&gt;&lt;/a&gt;opaque type(clang++ 3.5.1, g++4.8.2和VS2013都不支持)&lt;/h2&gt;&lt;p&gt;引入opaque（不透明的） typedef，在发生误用时，由编译器来检查。&lt;/p&gt;
&lt;p&gt;opaque typedef定义了一种新的类型，这种新的类型与它的underlying type不同，并且与它的underlying type是可区分的，同时还保证了与它的underlying type的layout compatibility。&lt;/p&gt;
&lt;h2 id=&quot;Type-tags&quot;&gt;&lt;a href=&quot;#Type-tags&quot; class=&quot;headerlink&quot; title=&quot;Type tags&quot;&gt;&lt;/a&gt;Type tags&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;template&amp;lt;class Tag, class impl, impl default_value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static ID invalid() &amp;#123; return ID(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Defaults to ID::invalid()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ID() : m_val(default_value) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Explicit constructor:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    explicit ID(impl val) : m_val(val) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Explicit conversion to get back the impl:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    explicit operator impl() const &amp;#123; return m_val; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    friend bool operator==(ID a, ID b) &amp;#123; return a.m_val == b.m_val; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    friend bool operator!=(ID a, ID b) &amp;#123; return a.m_val != b.m_val; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl m_val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法相当与简单的包装了一下。参数Tag其实并没有在模板里面使用，它的使用方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sound_tag&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; ID&amp;lt;sound_tag, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;gt; sound_id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sprite_tag&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; ID&amp;lt;sprite_tag, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;gt; sprite_id;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;tag保证了&lt;code&gt;sound_id&lt;/code&gt;和&lt;code&gt;sprite_id&lt;/code&gt;是不同的type，换句话说，只要函数声明了不同了type，它们就不会被误用。&lt;/p&gt;
&lt;h2 id=&quot;BOOST-STRONG-TYPEDEF&quot;&gt;&lt;a href=&quot;#BOOST-STRONG-TYPEDEF&quot; class=&quot;headerlink&quot; title=&quot;BOOST_STRONG_TYPEDEF&quot;&gt;&lt;/a&gt;&lt;code&gt;BOOST_STRONG_TYPEDEF&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;如果使用boost库，那么boost提供了&lt;code&gt;BOOST_STRONG_TYPEDEF&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BOOST_STRONG_TYPEDEF(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOST_STRONG_TYPEDEF(T, D);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个宏为类型&lt;code&gt;T&lt;/code&gt;创建了新的类型名&lt;code&gt;D&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ilikebigbits.com/blog/2014/5/6/type-safe-identifiers-in-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Type safe handles in C++&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3741.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Toward Opaque Typedefs for C++1Y, v2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      传统的`typedef`机制允许对已存在的type提供synonym或者alias，被定义为新引入的alias的类型与被定义为原来类型的变量，完全一样，不会有一丁点行为上的差别，但是这种特性在某些场景下会有缺陷。
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>入手KBC Poker 2</title>
    <link href="http://chaomai.github.io/2014/12/11/2014-2014-12-11-kbc-poker-2-briefly-reivew/"/>
    <id>http://chaomai.github.io/2014/12/11/2014-2014-12-11-kbc-poker-2-briefly-reivew/</id>
    <published>2014-12-11T15:20:42.000Z</published>
    <updated>2015-07-14T14:28:08.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;KBC-Poker-2&quot;&gt;&lt;a href=&quot;#KBC-Poker-2&quot; class=&quot;headerlink&quot; title=&quot;KBC Poker 2&quot;&gt;&lt;/a&gt;KBC Poker 2&lt;/h1&gt;&lt;p&gt;用倦Thindpad T420自带的键盘，也想尝试一下机械键盘的手感如何，就入手了一个机械键盘，KBC Poker 2。&lt;/p&gt;
&lt;p&gt;入手Poker 2的原因不仅仅是Filco Minila Air和HHKB的价格有点高，还有一点吸引我的原因就是Poker 2支持全键位硬件可编程。&lt;/p&gt;
&lt;p&gt;Poker 2已经是第二代了，相比起第一代，带来了许多的改进，网上的总结有这么几点：&lt;/p&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;保留了经典的US配列&lt;/li&gt;
&lt;li&gt;增加了数控钢板，使得茶轴、青轴和红轴的手感大大增强，黑轴基本不变&lt;/li&gt;
&lt;li&gt;内置7级亮度调节的DIY灯控支持，插上LED就会亮&lt;/li&gt;
&lt;li&gt;全新加厚PBT键帽，带来目前最为细腻的PBT触感&lt;/li&gt;
&lt;li&gt;增加了实用和进阶的附件六颗RGB加厚PBT套装和钢丝拔键器&lt;/li&gt;
&lt;li&gt;换代的卫星轴进一步提升了手感，彻底让卫星轴翻身做主人&lt;/li&gt;
&lt;li&gt;仍然保持一代的价格，加量完全不加价，499元&lt;/li&gt;
&lt;li&gt;USB任意6键无冲&lt;/li&gt;
&lt;li&gt;自带延时编程的全键位硬件可编程&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;键盘从淘宝上购买，只是中通快递，等得我整个人都不好了。。。&lt;/p&gt;
&lt;p&gt;除了键盘外，还随带附送的配件：分离式可拆卸的USB数据线，一个钢丝拔键器，一套RGB的PBT材质键帽。换下原来的键帽，把六个RGB键帽装上以后，就是这样了。&lt;/p&gt;
&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/kbcpoker2openboxIMG_20150211_192835.jpg&quot;&gt;
&lt;p&gt;因为是60%尺寸的设计，省去了方向键和其他的一些功能键，改用Fn的组合键和Pn的编程键实现相应的功能，因此键盘更加玲珑小巧、方便携带。在文章的后面会给出自己修改键位的办法。&lt;/p&gt;
&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/kbcpoker2openboxIMG_20150211_192808.jpg&quot;&gt;
&lt;p&gt;键帽由于是PBT材质的，而且还是加厚的键帽，手感很不错，空格键上的”Enjoy your feeling”正是说明了这一点。&lt;/p&gt;
&lt;p&gt;但是细节处的做工就不是那么精细了，键帽边缘有少许的毛刺。但我不是强迫症，平时使用根本看不见，So it doesn’t matter.&lt;/p&gt;
&lt;p&gt;这次入手的Poker 2是茶轴的，网上茶轴的介绍如下：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;全面兼顾：茶轴&lt;/p&gt;
&lt;p&gt;茶轴的手感比较均衡，也可说是较为中庸，带有段落感，触发键程为2.0mm。另外，其压力克数比较小，只有60g，敲击显得非常轻松，能兼顾打字和游戏使用。&lt;/p&gt;
&lt;p&gt;敲击茶轴的感觉如同小范围内的极速轻金属碰撞，很神秘的那么一下，结合了青轴和黑轴的特点，或者看成它是最没有特点的一种特殊轴，这也是手感最类似于传统键盘的机械键盘，压力在黑轴和青轴中间。&lt;/p&gt;
&lt;p&gt;它的段落感，你按下一个键后段落感可以给你确认感，同时压力不太大，适合那种瞬间飚快捷键的快手。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于没有使用过其他机械键盘，我只能和T420的键盘做对比。使用下来的感觉是，和T420的键盘相比，不需要多大的力量就可以触发，按下去的时候有段落感，触发段落感的力量也不大。用了Poker 2以后，感觉就是“回不去了。。。”。&lt;/p&gt;
&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/kbcpoker2openboxIMG_20150211_193448.jpg&quot;&gt;
&lt;p&gt;USB数据线的接口，看着像micro USB的，但其实不是，有点像以前老式的好记星的接口。&lt;/p&gt;
&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/kbcpoker2openboxIMG_20150211_193043.jpg&quot;&gt;
&lt;p&gt;背面有四个橡胶脚垫，不支持角度的调节，不过键盘正面的有弧度的设计，比较符合人体工程学，因此还是很舒适的。&lt;/p&gt;
&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/kbcpoker2openboxIMG_20150211_193117.jpg&quot;&gt;
&lt;p&gt;这里就是DIP开关。最早见到这个DIP开关是在HHKB上，Poker 2的DIP开关与HHKB的还是有所区别的。记得当初关注HHKB并不是因为机械键盘的缘故，而是Caps和Control键可以互换，加上当时在Ubuntu下开发，所以一直眼馋HHKB，只是价格的原因，一直没入手。&lt;/p&gt;
&lt;img src=&quot;http://7vilyb.com1.z0.glb.clouddn.com/kbcpoker2openboxIMG_20150211_193231.jpg&quot;&gt;
&lt;h2 id=&quot;Poker-2总结&quot;&gt;&lt;a href=&quot;#Poker-2总结&quot; class=&quot;headerlink&quot; title=&quot;Poker 2总结&quot;&gt;&lt;/a&gt;Poker 2总结&lt;/h2&gt;&lt;p&gt;Poker 2使用了小尺寸的设计，精简了多余的按键，加上分离式可拆卸的USB，大大提升了便携性。总体来说，做工中规中矩，PBT加厚键帽，内置钢板，但不足的是小细节的地方，比如键帽的边缘。&lt;/p&gt;
&lt;h1 id=&quot;键位修改&quot;&gt;&lt;a href=&quot;#键位修改&quot; class=&quot;headerlink&quot; title=&quot;键位修改&quot;&gt;&lt;/a&gt;键位修改&lt;/h1&gt;&lt;p&gt;首先，用键盘编程在V键上，把Win键编程为：Pn+V。因为后面需要用开关把做Win改为左Fn，还有就是目前是在Windows下工作，Win键不可少，所以这里要提前设置Win的替代键位。&lt;/p&gt;
&lt;p&gt;接下来，用键盘编程在L上，把Win+L键编程为：Pn+L；在，键上，把Win+Space编程为：Pn+，。其实这里不是必须的，我只是为了方便。&lt;/p&gt;
&lt;p&gt;然后就是设置键盘后面的几个开关，背面的4个DIP开关的功能分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开关1：Caps与左Win切换&lt;/li&gt;
&lt;li&gt;开关2：右Ctrl与`~切换&lt;/li&gt;
&lt;li&gt;开关3：左Win与Fn切换&lt;/li&gt;
&lt;li&gt;开关4：键盘写保护，键位编程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将开关1和3都拨到ON的位置，效果：Caps变成了Fn，左Win变成了Caps。&lt;/p&gt;
&lt;p&gt;到这里键位修改就完成了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;KBC-Poker-2&quot;&gt;&lt;a href=&quot;#KBC-Poker-2&quot; class=&quot;headerlink&quot; title=&quot;KBC Poker 2&quot;&gt;&lt;/a&gt;KBC Poker 2&lt;/h1&gt;&lt;p&gt;用倦Thindpad T420自带的键盘，也想尝试一下机械键盘的手感
    
    </summary>
    
      <category term="hardware" scheme="http://chaomai.github.io/categories/hardware/"/>
    
    
      <category term="keyboard" scheme="http://chaomai.github.io/tags/keyboard/"/>
    
  </entry>
  
  <entry>
    <title>C++动态内存</title>
    <link href="http://chaomai.github.io/2014/03/03/2014-2014-03-03-cpp-dynamic-memory/"/>
    <id>http://chaomai.github.io/2014/03/03/2014-2014-03-03-cpp-dynamic-memory/</id>
    <published>2014-03-03T10:31:05.000Z</published>
    <updated>2016-03-03T10:32:00.373Z</updated>
    
    <content type="html">&lt;p&gt;静态内存：存储局部static对象、类static数据成员和定义在函数之外的变量。&lt;br&gt;static对象：使用之前分配，程序结束时销毁。&lt;/p&gt;
&lt;p&gt;栈内存：保存定义在函数内部的非static对象。&lt;br&gt;栈对象：仅在定义的程序块运行时才存在。&lt;/p&gt;
&lt;p&gt;动态内存（free store或heap）：存储动态分配的对象，需要&lt;strong&gt;显示地销毁&lt;/strong&gt;，分配和销毁由&lt;code&gt;new&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;完成。&lt;/p&gt;
&lt;h1 id=&quot;智能指针&quot;&gt;&lt;a href=&quot;#智能指针&quot; class=&quot;headerlink&quot; title=&quot;智能指针&quot;&gt;&lt;/a&gt;智能指针&lt;/h1&gt;&lt;h2 id=&quot;shared-ptr&quot;&gt;&lt;a href=&quot;#shared-ptr&quot; class=&quot;headerlink&quot; title=&quot;shared_ptr&quot;&gt;&lt;/a&gt;shared_ptr&lt;/h2&gt;&lt;p&gt;最安全的分配和使用动态内存的方法是调用&lt;code&gt;make_shared&lt;/code&gt;，返回指向在动态内存分配的对象的&lt;code&gt;shared_ptr&lt;/code&gt;。&lt;code&gt;make_shared&lt;/code&gt;类似&lt;code&gt;emplace&lt;/code&gt;，使用&lt;strong&gt;参数来构造&lt;/strong&gt;指定类型的对象，如果没有参数，则进行值初始化。&lt;/p&gt;
&lt;p&gt;当进行copy或assign时，&lt;strong&gt;每个&lt;/strong&gt;&lt;code&gt;shared_ptr&lt;/code&gt;会记录有多少个其他&lt;code&gt;shared_ptr&lt;/code&gt;指向相同的对象。可看作&lt;code&gt;shared_ptr&lt;/code&gt;有reference count，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当发生以下情况时，count递增；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;copy或assign；&lt;/p&gt;
 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; p = make_shared&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;作为参数传给一个函数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;作为函数的返回值；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当发生以下情况时，count递减；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;给&lt;code&gt;shared_ptr&lt;/code&gt;赋予一个新的值；&lt;/p&gt;
 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; r = make_shared&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r = q; &lt;span class=&quot;comment&quot;&gt;// ++q指向对象的ref count，--r指向对象的ref count；销毁r原来指向对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;被销毁；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;count的递减由&lt;code&gt;shared_ptr&lt;/code&gt;的析构函数完成，如果count&lt;strong&gt;变为0&lt;/strong&gt;，&lt;code&gt;shared_ptr&lt;/code&gt;会释放所管理的对象。&lt;/p&gt;
&lt;p&gt;在某个scope中，只要能够使用&lt;code&gt;shared_ptr&lt;/code&gt;，那么它的引用计数&lt;strong&gt;至少为1&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;操作&quot;&gt;&lt;a href=&quot;#操作&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p.get() &lt;span class=&quot;comment&quot;&gt;// 返回内置的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.use_count() &lt;span class=&quot;comment&quot;&gt;// 返回引用计数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.unique() &lt;span class=&quot;comment&quot;&gt;// 若引用计数为1，则返回true；否则false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.reset() &lt;span class=&quot;comment&quot;&gt;// 将p置空，若p是唯一指向对象的，则释放此对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.reset(q) &lt;span class=&quot;comment&quot;&gt;// 令p指向内置指针q，若p是唯一指向对象的，则释放此对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.reset(q, d) &lt;span class=&quot;comment&quot;&gt;// 同上，释放q时调用d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;code&gt;new&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;会使得类对象的copy、assign和destroy&lt;strong&gt;不能依赖任何默认定义&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;自定义释放操作&quot;&gt;&lt;a href=&quot;#自定义释放操作&quot; class=&quot;headerlink&quot; title=&quot;自定义释放操作&quot;&gt;&lt;/a&gt;自定义释放操作&lt;/h3&gt;&lt;p&gt;默认情况下，shared_ptr指向的是动态内存，因此被销毁时，默认调用delete。可以自定义释放操作，提供其他的deleter。deleter的参数必须为&lt;strong&gt;该shared_ptr的内置指针类型&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;直接管理动态内存&quot;&gt;&lt;a href=&quot;#直接管理动态内存&quot; class=&quot;headerlink&quot; title=&quot;直接管理动态内存&quot;&gt;&lt;/a&gt;直接管理动态内存&lt;/h2&gt;&lt;h3 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h3&gt;&lt;p&gt;默认情况下，new的对象是&lt;strong&gt;默认初始化&lt;/strong&gt;的。也可以使用值初始化的方式来初始化new的对象（圆括号+参数），还可以使用列表初始化，以及值初始化（空括号）。&lt;/p&gt;
&lt;h3 id=&quot;自动推断类型&quot;&gt;&lt;a href=&quot;#自动推断类型&quot; class=&quot;headerlink&quot; title=&quot;自动推断类型&quot;&gt;&lt;/a&gt;自动推断类型&lt;/h3&gt;&lt;p&gt;可以使用auto从initializer来推断将要分配的对象类型，由于编译器&lt;strong&gt;需要从initializer来获得类型&lt;/strong&gt;，因此圆括号中仅能有一个initializer，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&amp;#123;a, b, c&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; p3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt;&amp;#123;a&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;const对象&quot;&gt;&lt;a href=&quot;#const对象&quot; class=&quot;headerlink&quot; title=&quot;const对象&quot;&gt;&lt;/a&gt;const对象&lt;/h3&gt;&lt;p&gt;和其他const对象相同，必须初始化。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; *pcs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 调用默认构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *pci = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 只能显示初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;bad-alloc&quot;&gt;&lt;a href=&quot;#bad-alloc&quot; class=&quot;headerlink&quot; title=&quot;bad_alloc&quot;&gt;&lt;/a&gt;bad_alloc&lt;/h3&gt;&lt;p&gt;如果内存不足，new失败，就会抛出&lt;code&gt;bad_alloc&lt;/code&gt;，但可以告知不抛出。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; (nothrow) &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 失败则返回nullptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;delete&quot;&gt;&lt;a href=&quot;#delete&quot; class=&quot;headerlink&quot; title=&quot;delete&quot;&gt;&lt;/a&gt;delete&lt;/h3&gt;&lt;p&gt;传递给delete的必须是指针，且必须指向动态分配的内存，或是一个&lt;code&gt;nullptr&lt;/code&gt;。如果是动态分配的内存，或释放同一个指针多次，行为未定义。对const动态对象，销毁的方法也是一样的。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用clang++ 3.7编译&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *pi = &amp;amp;i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; pi; &lt;span class=&quot;comment&quot;&gt;// segmentation fault&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *pi2 = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; pi2; &lt;span class=&quot;comment&quot;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; *pd = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; *pd1 = pd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; pd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; pd &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// pd不会被置为nullptr，空悬指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; pd; &lt;span class=&quot;comment&quot;&gt;// core dumpped&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *pci = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; pci;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以在delete后手动赋值为&lt;code&gt;nullptr&lt;/code&gt;。但也仅仅只解决了&lt;code&gt;pd&lt;/code&gt;的问题，多个指针指向同一个内存区域时，仍然有问题，&lt;code&gt;pd1&lt;/code&gt;仍然指向原内存区域，还是空悬指针。&lt;/p&gt;
&lt;h2 id=&quot;shared-ptr和new&quot;&gt;&lt;a href=&quot;#shared-ptr和new&quot; class=&quot;headerlink&quot; title=&quot;shared_ptr和new&quot;&gt;&lt;/a&gt;shared_ptr和new&lt;/h2&gt;&lt;p&gt;可以用new返回的指针来初始化&lt;code&gt;shared_ptr&lt;/code&gt;。由于接受智能指针的构造函数是explicit的，因此必须使用&lt;strong&gt;直接初始化&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; p(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 错误，此语句首先需要在int*和shared_ptr之间做隐式转换，然后再把临时的shared_ptr拷贝给p1。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;shared_ptr&lt;/code&gt;定义了&lt;code&gt;get&lt;/code&gt;函数，可以获得内置指针，指向&lt;code&gt;shared_ptr&lt;/code&gt;管理的对象。通过这种方式得到的指针&lt;strong&gt;不能被delete&lt;/strong&gt;，必须保证代码不会delete的情况下，才能使用get。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用clang++ 3.7编译&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; p(make_shared&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *q = p.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; sq(q);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; *sq &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; q; &lt;span class=&quot;comment&quot;&gt;// double free or corruption&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; *p &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 错误，p指向的内存已被销毁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// double free or corruption&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码在内部的scope中手动删除了p指向的内存，当这个scope结束时，sq被销毁，那部分内存&lt;strong&gt;还会被shared_ptr销毁一次&lt;/strong&gt;。编译时不会报错，但运行时出现double free or corruption。&lt;br&gt;&lt;strong&gt;就算没有delete&lt;/strong&gt;，内部的scope结束，那部分内存被销毁，这段代码结束时，又一次被销毁，同样也会有double free or corruption。&lt;/p&gt;
&lt;h2 id=&quot;智能指针和异常&quot;&gt;&lt;a href=&quot;#智能指针和异常&quot; class=&quot;headerlink&quot; title=&quot;智能指针和异常&quot;&gt;&lt;/a&gt;智能指针和异常&lt;/h2&gt;&lt;p&gt;无论是函数正常结束或者发生异常，局部对象都会被销毁。智能指针被销毁时，如果引用计数为0，则释放内存。但new得到的内存不会被自动释放，如果有指向这块内存的指针，只有指针会被销毁。&lt;/p&gt;
&lt;h2 id=&quot;unique-ptr&quot;&gt;&lt;a href=&quot;#unique-ptr&quot; class=&quot;headerlink&quot; title=&quot;unique_ptr&quot;&gt;&lt;/a&gt;unique_ptr&lt;/h2&gt;&lt;p&gt;unique_ptr&lt;strong&gt;拥有&lt;/strong&gt;指向的对象。没有类似make_shared的函数，只能将其绑定到new返回的指针上。也是必须使用直接初始化。&lt;/p&gt;
&lt;h3 id=&quot;操作-1&quot;&gt;&lt;a href=&quot;#操作-1&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h3&gt;&lt;p&gt;除了将被销毁的unique_ptr外，&lt;strong&gt;不支持copy和assignment&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;u = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 释放u指向的对象，并置空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u.release() &lt;span class=&quot;comment&quot;&gt;// 放弃对指针的控制权，返回指针并将u置空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u.reset() &lt;span class=&quot;comment&quot;&gt;// 类似shared_ptr，只是无需判断引用计数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u.reset(q)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u.reset(&lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;自定义释放操作-1&quot;&gt;&lt;a href=&quot;#自定义释放操作-1&quot; class=&quot;headerlink&quot; title=&quot;自定义释放操作&quot;&gt;&lt;/a&gt;自定义释放操作&lt;/h3&gt;&lt;p&gt;不同于shared_ptr，unique_ptr在重载deleter时，需要&lt;strong&gt;提供deleter的类型&lt;/strong&gt;。重载unique_ptr的deleter，会影响到unique_ptr的类型和如何构造或reset该类型的对象。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;unique_ptr&lt;/span&gt;&amp;lt;objT, delT&amp;gt; p(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; objT, fcn);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;weak-ptr&quot;&gt;&lt;a href=&quot;#weak-ptr&quot; class=&quot;headerlink&quot; title=&quot;weak_ptr&quot;&gt;&lt;/a&gt;weak_ptr&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不控制&lt;/strong&gt;所指向对象的生命周期；&lt;/li&gt;
&lt;li&gt;weak_ptr指向shared_ptr管理的对象；&lt;/li&gt;
&lt;li&gt;将一个weak_ptr绑定到一个shared_ptr&lt;strong&gt;不会改变shared_ptr的引用计数&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;一旦shared_ptr被销毁，所指对象就被释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;操作-2&quot;&gt;&lt;a href=&quot;#操作-2&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;w = p &lt;span class=&quot;comment&quot;&gt;// p可以是weak_ptr或shared_ptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w.reset() &lt;span class=&quot;comment&quot;&gt;// 将w置空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w.use_count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w.expired() &lt;span class=&quot;comment&quot;&gt;// 若w.use_count()为0，返回true，否则false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w.lock() &lt;span class=&quot;comment&quot;&gt;// 若w.expired()为true，返回空的shared_ptr，否则返回指向w的对象的shared_ptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;动态数组&quot;&gt;&lt;a href=&quot;#动态数组&quot; class=&quot;headerlink&quot; title=&quot;动态数组&quot;&gt;&lt;/a&gt;动态数组&lt;/h1&gt;&lt;p&gt;分配动态数组的类必须&lt;strong&gt;定义自己的版本&lt;/strong&gt;的操作来管理&lt;strong&gt;拷贝，复制以及销毁&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;new数组&quot;&gt;&lt;a href=&quot;#new数组&quot; class=&quot;headerlink&quot; title=&quot;new数组&quot;&gt;&lt;/a&gt;new数组&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *pia = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;pia&lt;/code&gt;中的元素是进行默认初始化的。但此时pia并&lt;strong&gt;不是一个数组&lt;/strong&gt;类型的对象，只是一个数组元素类型的指针，因此不能够调用begin和end（它们&lt;strong&gt;使用数组的维度&lt;/strong&gt;来得到首元素和尾后元素指针），也不能使用for。&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;p&gt;new的数组和单个对象一样，默认情况下，new的数组是&lt;strong&gt;默认初始化&lt;/strong&gt;的。可以对数组中的元素进行值初始化和列表初始化，也和单个对象一样。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; *psa = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; *psa1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;](&lt;span class=&quot;string&quot;&gt;&quot;abd&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, ...); &lt;span class=&quot;comment&quot;&gt;// 不能再这里提供initializer，因此不能用auto&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *pia = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// 剩下的元素进行值初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果new失败，类似bad_alloc，这里会抛出bad_array_new_length。&lt;/p&gt;
&lt;h3 id=&quot;new空数组&quot;&gt;&lt;a href=&quot;#new空数组&quot; class=&quot;headerlink&quot; title=&quot;new空数组&quot;&gt;&lt;/a&gt;new空数组&lt;/h3&gt;&lt;p&gt;这样做是合法的，得到的是一个合法的非空指针，相当与数组的尾后指针，不能解引用。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 合法，但不可以解引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;释放动态数组&quot;&gt;&lt;a href=&quot;#释放动态数组&quot; class=&quot;headerlink&quot; title=&quot;释放动态数组&quot;&gt;&lt;/a&gt;释放动态数组&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; p; &lt;span class=&quot;comment&quot;&gt;// 未定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;释放时，按逆序销毁。p还可以为nullptr。&lt;/p&gt;
&lt;h3 id=&quot;智能指针和动态数组&quot;&gt;&lt;a href=&quot;#智能指针和动态数组&quot; class=&quot;headerlink&quot; title=&quot;智能指针和动态数组&quot;&gt;&lt;/a&gt;智能指针和动态数组&lt;/h3&gt;&lt;p&gt;标准库提供了一个管理new分配的数组的unique_ptr，但此unique_ptr&lt;strong&gt;不支持成员访问运算符&lt;/strong&gt;。unique_ptr被销毁时，会自动使用&lt;code&gt;delete []&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;unique_ptr&lt;/span&gt;&amp;lt;T[]&amp;gt; u&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;unique_ptr&lt;/span&gt;&amp;lt;T[]&amp;gt; u(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u[i]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果使用shared_ptr来管理，则必须&lt;strong&gt;提供自定义的删除器&lt;/strong&gt;。如果没有提供，则shared_ptr会默认调用delete，行为未定义。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; sp(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;], [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] p; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*(sp.get() + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// shared_ptr未定义下标运算符，且智能指针不支持指针算术运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;allocator&quot;&gt;&lt;a href=&quot;#allocator&quot; class=&quot;headerlink&quot; title=&quot;allocator&quot;&gt;&lt;/a&gt;allocator&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; C &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  C(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) : a_(a), b_(b) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; pc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; C[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; pc1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; C[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;new把&lt;strong&gt;内存分配和对象构造&lt;/strong&gt;组合在了一起，可能造成外的开销；同时若类没有默认构造函数，则不能够分配动态数组。&lt;/p&gt;
&lt;p&gt;allocator&lt;strong&gt;分离&lt;/strong&gt;内存分配和对象构造，避免不必要的开销。所分配的内存是原始的，未构造的。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;allocator&amp;lt;C&amp;gt;::size_type n = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allocator&amp;lt;C&amp;gt; alloc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; p = alloc.allocate(n); &lt;span class=&quot;comment&quot;&gt;// C *const p1 = alloc.allocate(10);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; q = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alloc.construct(q++, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 类似make_shared&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; p-&amp;gt;a_ &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; &amp;lt;&amp;lt; p-&amp;gt;b_ &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; q-&amp;gt;a_ &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; &amp;lt;&amp;lt; q-&amp;gt;b_ &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 错误，q指向的内存未构造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (q != p) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alloc.destroy(--q);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alloc.deallocate(p, n); &lt;span class=&quot;comment&quot;&gt;// 大小应和allocate时的一样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;拷贝和填充未初始化内存&quot;&gt;&lt;a href=&quot;#拷贝和填充未初始化内存&quot; class=&quot;headerlink&quot; title=&quot;拷贝和填充未初始化内存&quot;&gt;&lt;/a&gt;拷贝和填充未初始化内存&lt;/h3&gt;&lt;p&gt;下列操作所需的内存是由&lt;code&gt;allocate&lt;/code&gt;分配的，而&lt;strong&gt;不是系统分配&lt;/strong&gt;的，因此&lt;code&gt;alloc_b&lt;/code&gt;指向的内存必须足够大。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uninitialized_copy(b, e, alloc_b); &lt;span class=&quot;comment&quot;&gt;// 返回最后一个构造的元素之后的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uninitialized_copy_n(b, n, alloc_b); &lt;span class=&quot;comment&quot;&gt;// 返回最后一个构造的元素之后的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uninitialized_fill(alloc_b, alloc_e, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uninitialized_fill_n(alloc_b, n, t);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;静态内存：存储局部static对象、类static数据成员和定义在函数之外的变量。&lt;br&gt;static对象：使用之前分配，程序结束时销毁。&lt;/p&gt;
&lt;p&gt;栈内存：保存定义在函数内部的非static对象。&lt;br&gt;栈对象：仅在定义的程序块运行时才存在。&lt;/p&gt;
&lt;p&gt;动态内存（
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++关联容器</title>
    <link href="http://chaomai.github.io/2014/02/28/2014-2014-02-28-cpp-associative-container/"/>
    <id>http://chaomai.github.io/2014/02/28/2014-2014-02-28-cpp-associative-container/</id>
    <published>2014-02-28T10:56:17.000Z</published>
    <updated>2016-02-28T10:57:36.917Z</updated>
    
    <content type="html">&lt;p&gt;关联容器支持普通容器操作，不支持，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序容器位置相关的操作，&lt;code&gt;push_back&lt;/code&gt;等；&lt;/li&gt;
&lt;li&gt;构造函数或插入操作接受一个元素值和一个数量值得操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;定义一个map时必须指定&lt;strong&gt;关键字类型和值类型&lt;/strong&gt;，set只需&lt;strong&gt;关键字类型&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h1&gt;&lt;p&gt;可以用下面的方式来初始化，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同类型容器的copy；&lt;/li&gt;
&lt;li&gt;指定值范围（begin和end）；&lt;/li&gt;
&lt;li&gt;列表初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;有序关联容器关键字类型的要求&quot;&gt;&lt;a href=&quot;#有序关联容器关键字类型的要求&quot; class=&quot;headerlink&quot; title=&quot;有序关联容器关键字类型的要求&quot;&gt;&lt;/a&gt;有序关联容器关键字类型的要求&lt;/h1&gt;&lt;p&gt;有序关联容器关键字类型必须定义&lt;strong&gt;元素比较的方法&lt;/strong&gt;。默认情况下，使用&lt;code&gt;&amp;lt;&lt;/code&gt;进行比较。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// list的iterator并无&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;::iterator, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; ml; &lt;span class=&quot;comment&quot;&gt;// 声明不会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; li;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ml[li.begin()] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于有序容器，有序容器的关键字必须是&lt;strong&gt;严格弱序&lt;/strong&gt;的，可看做“小于等于”。&lt;/p&gt;
&lt;h2 id=&quot;自定义比较操作&quot;&gt;&lt;a href=&quot;#自定义比较操作&quot; class=&quot;headerlink&quot; title=&quot;自定义比较操作&quot;&gt;&lt;/a&gt;自定义比较操作&lt;/h2&gt;&lt;p&gt;用于组织一个容器中元素的&lt;strong&gt;操作的类型&lt;/strong&gt;也是容器类型的一部分，如果需要自定义操作，则在定义容器的时候就指明。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;boo &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;multiset&lt;/span&gt;&amp;lt;Sales_sata, &lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;(compare) *&amp;gt; bookstore(compare);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建对象时，提供的操作类型（&lt;strong&gt;函数指针&lt;/strong&gt;）必须与尖括号中的类型吻合。规则与函数的const形参和实参的规则一致，忽略top const。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; comp = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;multiset&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; (*)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;gt; m(comp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; comp1 = [](&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;multiset&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; (*)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;gt; m1(comp1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; comp2 = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; b) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;multiset&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; (*)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)&amp;gt; m2(comp2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; comp3 = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* b) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;multiset&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; (*)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;)&amp;gt; m3(comp3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; comp4 = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* b) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;multiset&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; (*)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)&amp;gt; m4(comp4); &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;pair&quot;&gt;&lt;a href=&quot;#pair&quot; class=&quot;headerlink&quot; title=&quot;pair&quot;&gt;&lt;/a&gt;pair&lt;/h2&gt;&lt;p&gt;模板，接受两个类型名，pair的数据成员将有对应的类型，两个类型不要求一样。&lt;/p&gt;
&lt;p&gt;创建对象时，pair的默认构造函数对数据成员进行&lt;strong&gt;值初始化&lt;/strong&gt;（vector也可以）。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pair&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt;&amp;gt; word_count;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若函数返回pair，可&lt;strong&gt;对返回值&lt;/strong&gt;进行列表初始化，不必显式构造返回值。&lt;/p&gt;
&lt;h1 id=&quot;关联容器的操作&quot;&gt;&lt;a href=&quot;#关联容器的操作&quot; class=&quot;headerlink&quot; title=&quot;关联容器的操作&quot;&gt;&lt;/a&gt;关联容器的操作&lt;/h1&gt;&lt;p&gt;map中，每个元素就是一个pair对象，由于关键字不可变，因此pair的&lt;strong&gt;关键字部分是const&lt;/strong&gt;。set的关键字也是&lt;code&gt;const&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;::value_type v1; &lt;span class=&quot;comment&quot;&gt;// pair&amp;lt;const string, int&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;::key_type v2; &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;::map_type v3; &lt;span class=&quot;comment&quot;&gt;// int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;关联容器的迭代器&quot;&gt;&lt;a href=&quot;#关联容器的迭代器&quot; class=&quot;headerlink&quot; title=&quot;关联容器的迭代器&quot;&gt;&lt;/a&gt;关联容器的迭代器&lt;/h2&gt;&lt;p&gt;对关联容器迭代器解引用，可得到容器的&lt;code&gt;value_type&lt;/code&gt;的引用。&lt;/p&gt;
&lt;p&gt;对于set，虽然set定义了&lt;code&gt;iterator&lt;/code&gt;和&lt;code&gt;const_iterator&lt;/code&gt;，但是都不能改变set中的元素。&lt;/p&gt;
&lt;p&gt;当迭代器遍历一个map，multimap，set或multiset时，按关键字升序遍历。&lt;/p&gt;
&lt;h2 id=&quot;关联容器和算法&quot;&gt;&lt;a href=&quot;#关联容器和算法&quot; class=&quot;headerlink&quot; title=&quot;关联容器和算法&quot;&gt;&lt;/a&gt;关联容器和算法&lt;/h2&gt;&lt;p&gt;由于关键字是&lt;code&gt;const&lt;/code&gt;，因此不能用于修改或重排容器的算法（都需要向元素写入值）。只可用于读取元素的算法。&lt;/p&gt;
&lt;h2 id=&quot;添加元素&quot;&gt;&lt;a href=&quot;#添加元素&quot; class=&quot;headerlink&quot; title=&quot;添加元素&quot;&gt;&lt;/a&gt;添加元素&lt;/h2&gt;&lt;p&gt;&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;emplace&lt;/code&gt;可以对关联容器进行插入，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c.insert(v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.emplace(args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// map和set返回pair&amp;lt;iterator, bool&amp;gt;，iterator指向有此关键字的元素，bool说明是否元素是否已经存在，即是否插入成功。multimap和multiset总是进插入，只返回bool。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.insert(b, e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.insert(li)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.insert(p, v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.emplace(p, args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// p指明了从哪里开始新元素的存储位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;删除元素&quot;&gt;&lt;a href=&quot;#删除元素&quot; class=&quot;headerlink&quot; title=&quot;删除元素&quot;&gt;&lt;/a&gt;删除元素&lt;/h2&gt;&lt;p&gt;关联容器有三个版本的erase，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c.erase(k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 删除所有key为k的元素，返回size_type，表明删除的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.erase(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回被删除元素后的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.erase(b, e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回e&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;map的下标&quot;&gt;&lt;a href=&quot;#map的下标&quot; class=&quot;headerlink&quot; title=&quot;map的下标&quot;&gt;&lt;/a&gt;map的下标&lt;/h2&gt;&lt;p&gt;由于set并无关联值，下标操作对set无意义，故set不支持。multimap和multiset可能存在多个与某个key关联的值，故也不支持。&lt;/p&gt;
&lt;p&gt;下标操作返回&lt;code&gt;mapped_type&lt;/code&gt;，是左值。如果关键字不在map中，下标操作会，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建一个元素并插入&lt;/strong&gt;，关联值将进行&lt;strong&gt;值初始化&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;提取元素并赋值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与vector和string不同，map的下标操作和解引用返回的类型（&lt;code&gt;mapped_type&lt;/code&gt;和&lt;code&gt;value_type&lt;/code&gt;）不一样；&lt;/li&gt;
&lt;li&gt;如果元素不存在，&lt;code&gt;at&lt;/code&gt;并不会创建，而是抛出&lt;code&gt;out_of_range&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;下标操作可能会改变map，对const的map无法使用；&lt;/li&gt;
&lt;li&gt;对于const的map，只要&lt;code&gt;at&lt;/code&gt;不修改元素，就可以用。 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; m&amp;#123;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; m.at(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; m[&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 错误，即使是普通访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.at(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;无序关联容器&quot;&gt;&lt;a href=&quot;#无序关联容器&quot; class=&quot;headerlink&quot; title=&quot;无序关联容器&quot;&gt;&lt;/a&gt;无序关联容器&lt;/h1&gt;&lt;p&gt;使用hash function和&lt;code&gt;==&lt;/code&gt;来组织元素，用&lt;code&gt;hash&amp;lt;key_type&amp;gt;&lt;/code&gt;类型的对象生成每个元素的hash值，有序关联容器的操作可以用于无序容器。&lt;/p&gt;
&lt;p&gt;标准库为&lt;strong&gt;内置类型（包括指针类型）和部分标准库类型（包括string和智能指针）类型&lt;/strong&gt;定义了hash。但不能直接把自定义类型作为key来定义无序容器，可以&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供自己的hash模板版本；&lt;/li&gt;
&lt;li&gt;定义hash function和&lt;code&gt;==&lt;/code&gt;运算符。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; hasher(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Sales_data&amp;amp; sd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hash&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;() (sd.isbn());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;eqOp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Sales_data&amp;amp; lhs, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Sales_data&amp;amp;rhs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lhs.isbn() == rhs.isbn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;unordered_multiset&lt;/span&gt;&amp;lt;Sales_data, &lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;(hasher)*, &lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;(eqOp)*&amp;gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;, hasher,  eqOp);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关联容器支持普通容器操作，不支持，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序容器位置相关的操作，&lt;code&gt;push_back&lt;/code&gt;等；&lt;/li&gt;
&lt;li&gt;构造函数或插入操作接受一个元素值和一个数量值得操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++顺序容器</title>
    <link href="http://chaomai.github.io/2014/02/24/2014-2014-02-24-cpp-sequential-container/"/>
    <id>http://chaomai.github.io/2014/02/24/2014-2014-02-24-cpp-sequential-container/</id>
    <published>2014-02-24T06:53:06.000Z</published>
    <updated>2016-02-28T11:02:37.033Z</updated>
    
    <content type="html">&lt;p&gt;首先介绍顺序容器操作基本相同的部分，然后分别是每种容器要注意的地方。&lt;/p&gt;
&lt;h1 id=&quot;定义和初始化&quot;&gt;&lt;a href=&quot;#定义和初始化&quot; class=&quot;headerlink&quot; title=&quot;定义和初始化&quot;&gt;&lt;/a&gt;定义和初始化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C c&lt;/code&gt;&lt;br&gt;  默认构造函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C c1(c2)&lt;/code&gt;，&lt;code&gt;C c1 = c2&lt;/code&gt;&lt;br&gt;  c1初始化为c2的copy。c1和c2必须是相同的容器类型，且保存相同类型的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C c{a, b, c, ...}&lt;/code&gt;，&lt;code&gt;C c = {a, b, c, ...}&lt;/code&gt;&lt;br&gt;  列表初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C c(b, e)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除array外，还有以下两种，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C seq(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C seq(n, t)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;C-c1-c2-和C-c-b-e&quot;&gt;&lt;a href=&quot;#C-c1-c2-和C-c-b-e&quot; class=&quot;headerlink&quot; title=&quot;C c1(c2)和C c(b, e)&quot;&gt;&lt;/a&gt;&lt;code&gt;C c1(c2)&lt;/code&gt;和&lt;code&gt;C c(b, e)&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;C c1(c2)&lt;/code&gt;要求两个容器必须是相同的类型，且元素类型也是相同的；但&lt;code&gt;C c(b, e)&lt;/code&gt;就只需要元素类型可以&lt;strong&gt;转换&lt;/strong&gt;为要初始化的容器的元素类型即可。&lt;/p&gt;
&lt;h1 id=&quot;赋值和swap&quot;&gt;&lt;a href=&quot;#赋值和swap&quot; class=&quot;headerlink&quot; title=&quot;赋值和swap&quot;&gt;&lt;/a&gt;赋值和swap&lt;/h1&gt;&lt;p&gt;所有容器都支持赋值&lt;code&gt;=&lt;/code&gt;，赋值后，左边容器的元素为右边容器元素的copy，且大小与右边容器相同。&lt;/p&gt;
&lt;h2 id=&quot;swap&quot;&gt;&lt;a href=&quot;#swap&quot; class=&quot;headerlink&quot; title=&quot;swap&quot;&gt;&lt;/a&gt;swap&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;会交换两个容器的元素，两个容器必须有&lt;strong&gt;相同的&lt;/strong&gt;类型；&lt;/li&gt;
&lt;li&gt;通常来说&lt;code&gt;swap&lt;/code&gt;只是交换了容器内部的数据结构，但也有例外，对array进行操作时，会真正交换它们的元素；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;完成以后，&lt;strong&gt;除string外&lt;/strong&gt;，指向容器的迭代器、引用和指针都不会失效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;assign&quot;&gt;&lt;a href=&quot;#assign&quot; class=&quot;headerlink&quot; title=&quot;assign&quot;&gt;&lt;/a&gt;assign&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seq.assign(b, e)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq.assign(il)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seq.assign(n, t)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要注意的有，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数非常像初始化的；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assign&lt;/code&gt;不适用于关联容器的array；&lt;/li&gt;
&lt;li&gt;可以从一个&lt;strong&gt;不相同但相容的&lt;/strong&gt;类型assign。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;大小&quot;&gt;&lt;a href=&quot;#大小&quot; class=&quot;headerlink&quot; title=&quot;大小&quot;&gt;&lt;/a&gt;大小&lt;/h1&gt;&lt;p&gt;除了forward_list，每个容器都支持&lt;code&gt;size()&lt;/code&gt;、&lt;code&gt;empty()&lt;/code&gt;和&lt;code&gt;max_size()&lt;/code&gt;；forward_list只支持&lt;code&gt;empty()&lt;/code&gt;和&lt;code&gt;max_size()&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h1&gt;&lt;p&gt;每种容器都支持&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;!=&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;除了无序关联容器，所有容器都支持&lt;code&gt;&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;gt;=&lt;/code&gt;，&lt;code&gt;&amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;lt;=&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;操作&quot;&gt;&lt;a href=&quot;#操作&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h1&gt;&lt;h2 id=&quot;push…和insert&quot;&gt;&lt;a href=&quot;#push…和insert&quot; class=&quot;headerlink&quot; title=&quot;push…和insert&quot;&gt;&lt;/a&gt;push…和insert&lt;/h2&gt;&lt;p&gt;&lt;code&gt;push_back&lt;/code&gt;，&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;push_front&lt;/code&gt;放入容器的是元素的copy。&lt;/p&gt;
&lt;h2 id=&quot;emplace…&quot;&gt;&lt;a href=&quot;#emplace…&quot; class=&quot;headerlink&quot; title=&quot;emplace…&quot;&gt;&lt;/a&gt;emplace…&lt;/h2&gt;&lt;p&gt;&lt;code&gt;emplace_front&lt;/code&gt;，&lt;code&gt;emplace&lt;/code&gt;和&lt;code&gt;emplace_back&lt;/code&gt;分别对应&lt;code&gt;push_back&lt;/code&gt;，&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;push_front&lt;/code&gt;。不支持push…或insert的容器，也不支持相应的&lt;code&gt;emplace&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;与&lt;code&gt;push_back&lt;/code&gt;，&lt;code&gt;push_front&lt;/code&gt;和&lt;code&gt;insert&lt;/code&gt;放入元素的copy不同，&lt;code&gt;emplace&lt;/code&gt;会见参数传递给元素类型的构造函数。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class C2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  C2() = default;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  explicit C2(int a) : a_(a) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  C2(int a, int b) : a_(a), b_(b) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  int a_ = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  int b_ = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;C2&amp;gt; cs2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 由于是explicit，不存在从int到C2的隐式转换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// cs2.push_back(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// cs2.push_back(); // 错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// cs2.push_back(1, 2); // 错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cs2.push_back(C2());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cs2.push_back(C2(1));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cs2.push_back(C2(1, 2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 调用了C2的构造函数，对应以三个push_back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cs2.emplace_back();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cs2.emplace_back(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cs2.emplace_back(1, 2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;emplace&lt;/code&gt;在容器中直接构造元素，由于参数是传递给元素的构造函数，因此实参的类型必须和构造函数匹配。&lt;/p&gt;
&lt;h2 id=&quot;访问元素&quot;&gt;&lt;a href=&quot;#访问元素&quot; class=&quot;headerlink&quot; title=&quot;访问元素&quot;&gt;&lt;/a&gt;访问元素&lt;/h2&gt;&lt;p&gt;可用以下方法访问顺序容器的元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c.back()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.front()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c[n]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.at(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下标操作和at实际上就是进行随机访问，因而只能用于支持随机访问的顺序容器（string、vector、deque和array）。两个随机访问中，只有at能够保证安全的随机访问，下标越界时，会抛出out_of_range异常。&lt;/p&gt;
&lt;h2 id=&quot;删除元素&quot;&gt;&lt;a href=&quot;#删除元素&quot; class=&quot;headerlink&quot; title=&quot;删除元素&quot;&gt;&lt;/a&gt;删除元素&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c.pop_back()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.pop_front()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.erase(p)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.erase(b, e)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.clear()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pop_back&lt;/code&gt;和&lt;code&gt;pop_front&lt;/code&gt;返回&lt;code&gt;void&lt;/code&gt;，&lt;code&gt;erase&lt;/code&gt;返回一个迭代器，位置为最后一个被删除元素的下一个。&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;相等（即使都为&lt;code&gt;c.end()&lt;/code&gt;），那么不会删除任何元素。&lt;/p&gt;
&lt;h1 id=&quot;容器适配器&quot;&gt;&lt;a href=&quot;#容器适配器&quot; class=&quot;headerlink&quot; title=&quot;容器适配器&quot;&gt;&lt;/a&gt;容器适配器&lt;/h1&gt;&lt;p&gt;适配器是一种机制，使得某种事物的行为看起来像另外一个事物。容器、迭代器和函数都有适配器。&lt;/p&gt;
&lt;p&gt;每个适配器有两个构造函数，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A a(c)&lt;/code&gt;，拷贝容器c来初始化a&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顺序容器适配器有，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack，默认情况下基于queue实现；&lt;/li&gt;
&lt;li&gt;queue，默认情况下基于queue实现；&lt;/li&gt;
&lt;li&gt;priority_queue，默认情况下基于vector实现；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，用于构造适配器的容器是有限制的，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能添加和删除元素；&lt;/li&gt;
&lt;li&gt;访问尾元素；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体到每个适配器，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack&lt;br&gt; &lt;code&gt;push_back&lt;/code&gt;，&lt;code&gt;pop_back&lt;/code&gt;，&lt;code&gt;back&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;queue&lt;br&gt;  &lt;code&gt;push_back&lt;/code&gt;，&lt;code&gt;push_front&lt;/code&gt;，&lt;code&gt;back&lt;/code&gt;，&lt;code&gt;front&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;priority_queue&lt;br&gt;  &lt;code&gt;front&lt;/code&gt;，&lt;code&gt;push_back&lt;/code&gt;，&lt;code&gt;pop_back&lt;/code&gt;，随机访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;vector&quot;&gt;&lt;a href=&quot;#vector&quot; class=&quot;headerlink&quot; title=&quot;vector&quot;&gt;&lt;/a&gt;vector&lt;/h1&gt;&lt;h2 id=&quot;capacity和size&quot;&gt;&lt;a href=&quot;#capacity和size&quot; class=&quot;headerlink&quot; title=&quot;capacity和size&quot;&gt;&lt;/a&gt;capacity和size&lt;/h2&gt;&lt;p&gt;vector支持快速随机访问，元素是连续存储的。这意味着添加元素时，需要移动已有的元素，以保证连续的存储。如果没有空间容纳新元素，则需要分配新的内存，并把已有元素从旧的位置移动到新的位置。为了减少内存的分配和释放的代价，分配策略一般为实在是没法存时，才获取新的内存。只要没有操作使得vector的capacity不够，就不会重新分配内存。&lt;/p&gt;
&lt;p&gt;以下几个操作是管理容器大小的，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c.shrink_to_fit()&lt;/code&gt;&lt;br&gt;  请求把capacity减少为size。这里仅仅是一个请求，shrink_to_fit&lt;strong&gt;不保证&lt;/strong&gt;退还内存。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.capacity()&lt;/code&gt;&lt;br&gt;  在不重新分配内存的情况下，最多能存储的元素数目。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.reserve(n)&lt;/code&gt;&lt;br&gt;  分配至少能容纳n个元素的内存。n如果小于等于当前capacity，那么什么都不发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要注意的是，reserve和resize不同，reserve改变（至少是变大）的是capacity，size并未变化；而resize改变了size的同时，capacity（如果n大于当前的capacity）也有可能改变。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;t23&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; v1(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// size: 10 capacity: 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; v2(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// size: 10 capacity: 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v1.resize(&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// size: 15 capacity: 20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v2.reserve(&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// size: 10 capacity: 15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h2&gt;&lt;p&gt;添加元素的情况下，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果添加前&lt;code&gt;capacit = size&lt;/code&gt;，那么会导致内存重新分配，从而vector相关的迭代器、引用或指针都会失效；&lt;br&gt;如果不发生内存分配，有可能会发生元素移动（插入中间位置），插入位置之后的迭代器、引用或指针都会失效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于删除元素，不会发生内存重新分配，被删除元素前的迭代器、引用或指针都还有效。&lt;/p&gt;
&lt;h1 id=&quot;deque&quot;&gt;&lt;a href=&quot;#deque&quot; class=&quot;headerlink&quot; title=&quot;deque&quot;&gt;&lt;/a&gt;deque&lt;/h1&gt;&lt;h2 id=&quot;迭代器-1&quot;&gt;&lt;a href=&quot;#迭代器-1&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h2&gt;&lt;p&gt;添加元素的情况下，&lt;br&gt;如果插入到&lt;strong&gt;首尾&lt;/strong&gt;之外的位置，都会导致迭代器、引用或指针失效；&lt;/p&gt;
&lt;p&gt;删除元素的情况下，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在&lt;strong&gt;首尾&lt;/strong&gt;之外的位置删除，都会导致迭代器、引用或指针失效；&lt;/li&gt;
&lt;li&gt;如果删除了&lt;strong&gt;尾元素&lt;/strong&gt;，&lt;strong&gt;尾后迭代器也会失效&lt;/strong&gt;，但其他的迭代器、引用或指针不受影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;string&quot;&gt;&lt;a href=&quot;#string&quot; class=&quot;headerlink&quot; title=&quot;string&quot;&gt;&lt;/a&gt;string&lt;/h1&gt;&lt;h2 id=&quot;操作-1&quot;&gt;&lt;a href=&quot;#操作-1&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h2&gt;&lt;p&gt;string也支持上述提及的大部分操作，但同样有例外，且某些操作有特殊局限，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt;会导致相关的迭代器、引用或指针失效；&lt;/li&gt;
&lt;li&gt;与vector一样，front相关的操作不支持；&lt;ul&gt;
&lt;li&gt;不支持&lt;code&gt;push_front&lt;/code&gt;和&lt;code&gt;emplace_front&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;不支持&lt;code&gt;pop_front&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;erase&lt;/code&gt;、&lt;code&gt;assign&lt;/code&gt;和&lt;code&gt;replace&lt;/code&gt;重载函数，p323和p324；&lt;ul&gt;
&lt;li&gt;额外的&lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;erase&lt;/code&gt;、&lt;code&gt;assign&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt;在末尾插入；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace&lt;/code&gt;，等价于&lt;code&gt;erase&lt;/code&gt;+&lt;code&gt;insert&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;搜索，p325和p326；&lt;ul&gt;
&lt;li&gt;返回值均为&lt;code&gt;string::size_type()&lt;/code&gt;，是一个&lt;code&gt;unsigned&lt;/code&gt;类型，如果找不到，这返回&lt;code&gt;string::npos&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.find(args)&lt;/code&gt;，返回第一个匹配args的下标；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.rfind(args)&lt;/code&gt;，返回最后一个匹配args的下标；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.find_first_of(args)&lt;/code&gt;，返回args中任何一个字符&lt;strong&gt;首次出现在args中&lt;/strong&gt;的下标；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.find_last_of(args)&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.find_first_not_of(args)&lt;/code&gt;，返回首个&lt;strong&gt;不在args中&lt;/strong&gt;字符的下标；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.find_last_not_of()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;compare同样有多个重载，p327；&lt;/li&gt;
&lt;li&gt;数值转换，p328；&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_string(val)&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sto...&lt;/code&gt;；&lt;ul&gt;
&lt;li&gt;string中的第一个非空白字符必须是数值中可能出现的字符，即+或-，或数字，数字可以是0x或0X开头表示的十六进制数；&lt;/li&gt;
&lt;li&gt;如果是转换为浮点数的，开头可以为.，且包含e或E表示指数；&lt;/li&gt;
&lt;li&gt;如果是转换为整型的，根据不同的基数，可以有字母；&lt;/li&gt;
&lt;li&gt;如果不能转换，则抛出&lt;code&gt;invallid_argument&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;如果得到的数值无法用任何类型表示，则抛出&lt;code&gt;out_of_range&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先介绍顺序容器操作基本相同的部分，然后分别是每种容器要注意的地方。&lt;/p&gt;
&lt;h1 id=&quot;定义和初始化&quot;&gt;&lt;a href=&quot;#定义和初始化&quot; class=&quot;headerlink&quot; title=&quot;定义和初始化&quot;&gt;&lt;/a&gt;定义和初始化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++泛型算法</title>
    <link href="http://chaomai.github.io/2014/02/23/2014-2014-02-23-cpp-generic-algorithm/"/>
    <id>http://chaomai.github.io/2014/02/23/2014-2014-02-23-cpp-generic-algorithm/</id>
    <published>2014-02-23T06:10:17.000Z</published>
    <updated>2016-02-23T06:17:02.466Z</updated>
    
    <content type="html">&lt;h1 id=&quot;泛型算法&quot;&gt;&lt;a href=&quot;#泛型算法&quot; class=&quot;headerlink&quot; title=&quot;泛型算法&quot;&gt;&lt;/a&gt;泛型算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一般泛型算法不直接操作容器，而是运行于迭代器之上，由迭代器来进行操作；&lt;/li&gt;
&lt;li&gt;迭代器令算法不依赖于容器，但是某些算法使用的操作需要元素的类型；&lt;/li&gt;
&lt;li&gt;算法不会直接改变底层容器的大小；&lt;/li&gt;
&lt;li&gt;算法可能改变元素的值或移动元素，但不会直接添加或删除元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;按使用元素的方式分类&quot;&gt;&lt;a href=&quot;#按使用元素的方式分类&quot; class=&quot;headerlink&quot; title=&quot;按使用元素的方式分类&quot;&gt;&lt;/a&gt;按使用元素的方式分类&lt;/h1&gt;&lt;h2 id=&quot;只读算法&quot;&gt;&lt;a href=&quot;#只读算法&quot; class=&quot;headerlink&quot; title=&quot;只读算法&quot;&gt;&lt;/a&gt;只读算法&lt;/h2&gt;&lt;h3 id=&quot;accumulate&quot;&gt;&lt;a href=&quot;#accumulate&quot; class=&quot;headerlink&quot; title=&quot;accumulate&quot;&gt;&lt;/a&gt;accumulate&lt;/h3&gt;&lt;p&gt;&lt;code&gt;accumulate&lt;/code&gt;的第三个参数类型决定了函数中使用那个加法运算符以及返回值的类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这个类型不支持+运算符，则会发生编译错误；&lt;/li&gt;
&lt;li&gt;如果元素类型与这个类型不匹配，且能够类型转换，无论哪个类型宽窄，只会发生&lt;strong&gt;元素类型-&amp;gt;第三个参数类型&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;equal&quot;&gt;&lt;a href=&quot;#equal&quot; class=&quot;headerlink&quot; title=&quot;equal&quot;&gt;&lt;/a&gt;equal&lt;/h3&gt;&lt;p&gt;按元素比较，第二个序列&lt;strong&gt;至少与第一个序列一样长&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果两个序列类型分别为，&lt;code&gt;vector&amp;lt;const char*&amp;gt;&lt;/code&gt;和&lt;code&gt;list&amp;lt;const char*&amp;gt;&lt;/code&gt;，则比较的是地址，不是字符串的内容。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&amp;gt; vcc&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;ab&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bc&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;cd&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&amp;gt; lcc&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;ab&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bc&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;cd&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 由于编译器优化，vcc和lcc实际上共享了字面值常量，故下面的地址相同。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; equal(vcc.begin(), vcc.end(), lcc.begin()) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;const_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&amp;gt;(vcc.front())) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0x40c951&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;const_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&amp;gt;(lcc.front())) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0x40c951&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;ab&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bc&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;cd&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;ab&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bc&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;cd&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&amp;gt; vcc1&amp;#123;begin(a), end(a)&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&amp;gt; lcc1&amp;#123;begin(b), end(b)&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; equal(vcc1.begin(), vcc1.end(), lcc1.begin()) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;const_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&amp;gt;(vcc1.front())) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0x40c908&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;const_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&amp;gt;(lcc1.front())) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0x40c911&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;写容器元素的算法&quot;&gt;&lt;a href=&quot;#写容器元素的算法&quot; class=&quot;headerlink&quot; title=&quot;写容器元素的算法&quot;&gt;&lt;/a&gt;写容器元素的算法&lt;/h2&gt;&lt;p&gt;这类算法并不检查写操作。由于算法不会改变底层容器的大小，因此必须保证&lt;strong&gt;目的位置迭代器开始&lt;/strong&gt;序列足够容纳要写入的元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;copy&lt;/code&gt;返回的是目的位置迭代器递增后的值。&lt;/p&gt;
&lt;h2 id=&quot;重排容器元素的算法&quot;&gt;&lt;a href=&quot;#重排容器元素的算法&quot; class=&quot;headerlink&quot; title=&quot;重排容器元素的算法&quot;&gt;&lt;/a&gt;重排容器元素的算法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;unique&lt;/code&gt;“移除”了&lt;strong&gt;相邻重复&lt;/strong&gt;元素，把不重复的元素移动到了序列前面，并非删除。返回不重复元素范围末尾的下一个迭代器。&lt;/p&gt;
&lt;h1 id=&quot;定制操作&quot;&gt;&lt;a href=&quot;#定制操作&quot; class=&quot;headerlink&quot; title=&quot;定制操作&quot;&gt;&lt;/a&gt;定制操作&lt;/h1&gt;&lt;h2 id=&quot;谓词&quot;&gt;&lt;a href=&quot;#谓词&quot; class=&quot;headerlink&quot; title=&quot;谓词&quot;&gt;&lt;/a&gt;谓词&lt;/h2&gt;&lt;p&gt;某些算法需要进行元素间的比较，如果需要使用与定义行为不同的比较，或者元素类型未定义&lt;code&gt;&amp;lt;&lt;/code&gt;运算符，则需要通过提供谓词，重载算法的默认行为。&lt;/p&gt;
&lt;p&gt;谓词是可调用的表达式，返回结果是一个能用着条件的值，分为，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一元谓词；&lt;/li&gt;
&lt;li&gt;二元谓词。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;序列中的元素作为实参传入谓词，因此需要满足函数匹配规则。&lt;/p&gt;
&lt;h2 id=&quot;lambda表达式&quot;&gt;&lt;a href=&quot;#lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;lambda表达式&quot;&gt;&lt;/a&gt;lambda表达式&lt;/h2&gt;&lt;p&gt;是可调用对象，callable object有，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;函数指针&lt;/li&gt;
&lt;li&gt;重载了函数调用运算符的类&lt;/li&gt;
&lt;li&gt;lambda表达式&lt;/li&gt;
&lt;li&gt;bind创建的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用lambda，要注意的是，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;lambda必须使用尾置返回，可以忽略参数列表和返回类型（忽略时，从代码中推断）；&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f = []&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;lambda不能有默认参数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;对于lambda所在函数体的&lt;strong&gt;非static局部变量&lt;/strong&gt;，只能使用在&lt;strong&gt;捕获列表&lt;/strong&gt;中捕获后，才能使用；&lt;/li&gt;
&lt;li&gt;对于&lt;strong&gt;局部static变量和lambda所在函数体之外声明的名字&lt;/strong&gt;，可以&lt;strong&gt;直接使用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果lambda捕获列表为空，那么lambda可以转换为函数指针。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// f自动转换为pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*pf)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; pf(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;lambda捕获和返回&quot;&gt;&lt;a href=&quot;#lambda捕获和返回&quot; class=&quot;headerlink&quot; title=&quot;lambda捕获和返回&quot;&gt;&lt;/a&gt;lambda捕获和返回&lt;/h3&gt;&lt;p&gt;定义lambda时，编译器生成一个与lambda对应的未命名类类型。用auto定义一个用lambda初始化的变量时，就定义了一个相应的未命名类类型的对象。lambda的数据成员在lambda对象创建时被初始化。&lt;/p&gt;
&lt;p&gt;类似函数的参数传递，捕获方式有，&lt;/p&gt;
&lt;p&gt;每种方式都可以进行，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;值捕获&lt;/p&gt;
&lt;p&gt;  被捕或的变量的值是在lambda创建时拷贝，而不是像函数调用时才拷贝。能使用值捕获的前提是&lt;strong&gt;变量可拷贝&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引用捕获&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;&amp;amp;&lt;/code&gt;表示以引用的方式捕获。&lt;br&gt;  引用捕获与返回引用有相同的问题和限制，必须保证引用的对象在&lt;strong&gt;lambda执行时存在&lt;/strong&gt;，且在执行时是所期望的（可能在被捕或后和执行前，引用的对象的值改变了）。如果函数返回lambda，则不能包含局部非static变量的捕获。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按是否显示列出希望使用的变量，可分为，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;显式捕获&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;[v1, ...]&lt;/code&gt;或&lt;code&gt;[&amp;amp;v1, ...]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隐式捕获&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值捕获，&lt;code&gt;[&amp;amp;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用捕获，&lt;code&gt;[=]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;混合使用显式和隐式捕获&lt;/p&gt;
&lt;p&gt;  当混合使用显式和隐式捕获时，显示捕获的变量必须使用&lt;strong&gt;与隐式捕获不&lt;/strong&gt;同的方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[&amp;amp;, identifier_list]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  任何&lt;strong&gt;隐式捕获&lt;/strong&gt;的变量都采用&lt;strong&gt;引用捕获&lt;/strong&gt;，&lt;strong&gt;identifier_list&lt;/strong&gt;采用&lt;strong&gt;值捕获&lt;/strong&gt;的方式，且identifier_list中的名字&lt;strong&gt;不能使用&lt;code&gt;=&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[=, identifier_list]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  任何&lt;strong&gt;隐式捕获&lt;/strong&gt;的变量都采用&lt;strong&gt;值捕获&lt;/strong&gt;，&lt;strong&gt;identifier_list&lt;/strong&gt;采用&lt;strong&gt;引用捕获&lt;/strong&gt;的方式，且identifier_list中的名字&lt;strong&gt;必须使用&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; l = [=, &amp;amp;c]()&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// auto l = [=, c]()&amp;#123;&amp;#125;; 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;可变lambda&quot;&gt;&lt;a href=&quot;#可变lambda&quot; class=&quot;headerlink&quot; title=&quot;可变lambda&quot;&gt;&lt;/a&gt;可变lambda&lt;/h3&gt;&lt;p&gt; 默认情况下，&lt;strong&gt;值捕获的变量&lt;/strong&gt;，lambda不会改变被捕获变量的值（并非改变原始变量），如果需要改变，加入&lt;code&gt;mutable&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; l2 = [a]() &lt;span class=&quot;keyword&quot;&gt;mutable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ++a; &lt;span class=&quot;comment&quot;&gt;// 如果无mutable，则错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 1， 并非改变原始变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; l2() &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引用捕获无此限制，能够更改依赖于被引用变量是否为&lt;code&gt;const&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;lambda的返回值&quot;&gt;&lt;a href=&quot;#lambda的返回值&quot; class=&quot;headerlink&quot; title=&quot;lambda的返回值&quot;&gt;&lt;/a&gt;lambda的返回值&lt;/h3&gt;&lt;p&gt;默认情况下，如果一个lambda包含return之外的任何语句，编译器假定此lambda返回void。&lt;/p&gt;
&lt;h2 id=&quot;bind&quot;&gt;&lt;a href=&quot;#bind&quot; class=&quot;headerlink&quot; title=&quot;bind&quot;&gt;&lt;/a&gt;bind&lt;/h2&gt;&lt;p&gt;由于&lt;code&gt;find_if&lt;/code&gt;接受的是一个一元谓词，因此含有两个形参的函数是不可用的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt;生成一个新的可调用对象，可看做一个通用的函数适配器。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; newCallable = bind(callable, arg_list)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;arg_list可包含&lt;code&gt;_n&lt;/code&gt;，表示&lt;code&gt;newCallable&lt;/code&gt;的参数，参数的类型就是callable中&lt;code&gt;_n&lt;/code&gt;处的类型。其中n代表了占位符&lt;code&gt;_n&lt;/code&gt;在&lt;code&gt;newCallable&lt;/code&gt;的位置，调用&lt;code&gt;newCallable&lt;/code&gt;时，&lt;code&gt;_n&lt;/code&gt;处的参数最终会传递到callable中&lt;code&gt;_n&lt;/code&gt;相应的位置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_n&lt;/code&gt;定义在&lt;code&gt;placeholders&lt;/code&gt;的namespace中，使用时需，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::placeholders::_1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::placeholders;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下，&lt;strong&gt;不是占位符的参数&lt;/strong&gt;是被&lt;strong&gt;拷贝&lt;/strong&gt;到bind返回的可调用对象中的。如果想传递引用，就必须显式的指明，使用&lt;code&gt;ref&lt;/code&gt;。&lt;code&gt;ref&lt;/code&gt;返回的对象包含给定的引用，是&lt;strong&gt;可拷贝&lt;/strong&gt;的。类似的还有&lt;code&gt;cref&lt;/code&gt;，返回&lt;code&gt;const&lt;/code&gt;引用。&lt;/p&gt;
&lt;h1 id=&quot;额外的迭代器&quot;&gt;&lt;a href=&quot;#额外的迭代器&quot; class=&quot;headerlink&quot; title=&quot;额外的迭代器&quot;&gt;&lt;/a&gt;额外的迭代器&lt;/h1&gt;&lt;p&gt;除每个容器的定义的迭代器外，还有以下几种，&lt;/p&gt;
&lt;h2 id=&quot;插入迭代器&quot;&gt;&lt;a href=&quot;#插入迭代器&quot; class=&quot;headerlink&quot; title=&quot;插入迭代器&quot;&gt;&lt;/a&gt;插入迭代器&lt;/h2&gt;&lt;p&gt;是一种迭代器适配器，对插入迭代器赋值时，该迭代器&lt;strong&gt;调用容器的操作&lt;/strong&gt;来进行插入。&lt;code&gt;*&lt;/code&gt;和前置后置&lt;code&gt;++&lt;/code&gt;会直接返回迭代器，&lt;strong&gt;并不会修改&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;插入迭代器有以下几种，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;back_inserter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  创建使用&lt;code&gt;push_back&lt;/code&gt;的迭代器，始终在尾部插入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;front_inserter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  创建使用&lt;code&gt;push_front&lt;/code&gt;的迭代器，始终在首部插入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;inserter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  创建使用&lt;code&gt;insert&lt;/code&gt;的迭代器，始终在迭代器it指定位置前插入。插入后it还是指向一开始指定的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;流迭代器&quot;&gt;&lt;a href=&quot;#流迭代器&quot; class=&quot;headerlink&quot; title=&quot;流迭代器&quot;&gt;&lt;/a&gt;流迭代器&lt;/h2&gt;&lt;h3 id=&quot;istream-iterator&quot;&gt;&lt;a href=&quot;#istream-iterator&quot; class=&quot;headerlink&quot; title=&quot;istream_iterator&quot;&gt;&lt;/a&gt;&lt;code&gt;istream_iterator&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;读取输入流，必须指定迭代器将要读写的对象类型，且要读取的类型必须支持&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;（由于是调用&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;来读取）。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;istream_iterator&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; int_it(&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;istream_iterator&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; int_eof; &lt;span class=&quot;comment&quot;&gt;// 默认初始化，尾后迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (int_it != eof) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; v(int_it, eof);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当绑定到流时，标准库并不保证迭代器立即从流中读取数据，而是&lt;strong&gt;保证在首次解引用前，完成了数据的读取&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;ostream-iterator&quot;&gt;&lt;a href=&quot;#ostream-iterator&quot; class=&quot;headerlink&quot; title=&quot;ostream_iterator&quot;&gt;&lt;/a&gt;&lt;code&gt;ostream_iterator&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;类似&lt;code&gt;istream_iterator&lt;/code&gt;，使用&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;写入输出流（类型必须支持&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;）。&lt;strong&gt;必须&lt;/strong&gt;绑定到一个输入流，可指定一个每次写入时都输出的字符。&lt;code&gt;*&lt;/code&gt;和前置后置&lt;code&gt;++&lt;/code&gt;会直接返回迭代器，&lt;strong&gt;并不会修改&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ostream_iterator&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; out(&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ostream_iterator&amp;lt;int&amp;gt; out(cout, &quot; &quot;); 字面值常量或指向C风格的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 类型必须与out定义的类型兼容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;反向迭代器&quot;&gt;&lt;a href=&quot;#反向迭代器&quot; class=&quot;headerlink&quot; title=&quot;反向迭代器&quot;&gt;&lt;/a&gt;反向迭代器&lt;/h2&gt;&lt;p&gt;也是一种迭代器适配器。只能从一个支持++和–的迭代器来定义反向迭代器。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    cbegin()                                     cend()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |                                            |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [], [], [], [], [], [], [], [], [], [], [], []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   |                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;crend()                                         crbegin()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cbegin()                 rit.base()         cend()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |                           |                |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[], [], [], [], [], [], [], [], [], [], [], []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         |                   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        rit               crbegin()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [crbegin(), rit)和[rit.base(), cend())指向相同的范围。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以对反向迭代器调用&lt;code&gt;base()&lt;/code&gt;来得到普通的迭代器。&lt;code&gt;base()&lt;/code&gt;得到的是相邻的位置。&lt;/p&gt;
&lt;h2 id=&quot;移动迭代器&quot;&gt;&lt;a href=&quot;#移动迭代器&quot; class=&quot;headerlink&quot; title=&quot;移动迭代器&quot;&gt;&lt;/a&gt;移动迭代器&lt;/h2&gt;&lt;p&gt;p480&lt;/p&gt;
&lt;h1 id=&quot;泛型算法的结构&quot;&gt;&lt;a href=&quot;#泛型算法的结构&quot; class=&quot;headerlink&quot; title=&quot;泛型算法的结构&quot;&gt;&lt;/a&gt;泛型算法的结构&lt;/h1&gt;&lt;h2 id=&quot;迭代器分类&quot;&gt;&lt;a href=&quot;#迭代器分类&quot; class=&quot;headerlink&quot; title=&quot;迭代器分类&quot;&gt;&lt;/a&gt;迭代器分类&lt;/h2&gt;&lt;p&gt;按算法所要求的迭代器操作，可将迭代器分为下面几类，&lt;strong&gt;除了输出迭代器外&lt;/strong&gt;，高层类别的迭代器支持低层类别迭代器的所有操作。C++标准指明了泛型和数值算法的每个迭代器参数的&lt;strong&gt;最小类别&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;输入迭代器&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;只读，不写；单遍扫描，只能递增&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 支持，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;，&lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前置后置&lt;code&gt;++&lt;/code&gt;，可能导致所有其他指向流的迭代器&lt;strong&gt;失效&lt;/strong&gt;，不能保证输入迭代器的状态可以保存下来，即只能单遍扫描&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;，只能在赋值运算的&lt;strong&gt;右侧&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;code&gt;find&lt;/code&gt;，&lt;code&gt;accumulate&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输出迭代器&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;只写，不读；单遍扫描，只能递增&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 支持，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前置后置&lt;code&gt;++&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;，只能在赋值运算的&lt;strong&gt;左侧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例子：用作目的位置的迭代器，如&lt;code&gt;copy&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前向迭代器&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;可读写；多遍扫描，只能递增&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 支持，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所有输入和输出迭代器的操作&lt;/p&gt;
&lt;p&gt;例子：&lt;code&gt;replace&lt;/code&gt;，&lt;code&gt;forward_list&lt;/code&gt;的迭代器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双向迭代器&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;可读写；多遍扫描，可递增递减&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 支持，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有前向迭代器的操作&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前置后置&lt;code&gt;--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;code&gt;reverse&lt;/code&gt;，除了&lt;code&gt;forward_list&lt;/code&gt;的迭代器，其他标准库容器的迭代器都符合双向迭代器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;随机访问迭代器&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;可读写；多遍扫描，支持全部迭代器的运算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 支持，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;，&lt;code&gt;&amp;lt;=&lt;/code&gt;，&lt;code&gt;&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;和整数的&lt;code&gt;+&lt;/code&gt;，&lt;code&gt;-&lt;/code&gt;，&lt;code&gt;+=&lt;/code&gt;，&lt;code&gt;-=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;两个迭代器的&lt;code&gt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;iter[n]&lt;/code&gt;，等价于&lt;code&gt;*(iter[n])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;code&gt;sort&lt;/code&gt;，&lt;code&gt;array&lt;/code&gt;、&lt;code&gt;deque&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt;和&lt;code&gt;vector&lt;/code&gt;的迭代器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;算法形参模式&quot;&gt;&lt;a href=&quot;#算法形参模式&quot; class=&quot;headerlink&quot; title=&quot;算法形参模式&quot;&gt;&lt;/a&gt;算法形参模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alg(beg, end, other, args);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alg(beg, end, dest, other, args);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alg(beg, end, beg2, other, args);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alg(beg, end, beg2, end2, other, args);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;向输出迭代器&lt;code&gt;dest&lt;/code&gt;写入数据的算法都假设，目标位置有足够的空间。&lt;br&gt;接受单独&lt;code&gt;beg2&lt;/code&gt;的算法假定从&lt;code&gt;beg2&lt;/code&gt;开始的序列与&lt;code&gt;[beg, end)&lt;/code&gt;所表示的范围至少一样大。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;泛型算法&quot;&gt;&lt;a href=&quot;#泛型算法&quot; class=&quot;headerlink&quot; title=&quot;泛型算法&quot;&gt;&lt;/a&gt;泛型算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一般泛型算法不直接操作容器，而是运行于迭代器之上，由迭代器来进行操作；&lt;/li&gt;
&lt;li&gt;迭代器令算法不依赖于容
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++ 初始化</title>
    <link href="http://chaomai.github.io/2014/02/17/2014-2014-02-17-cpp-initialization/"/>
    <id>http://chaomai.github.io/2014/02/17/2014-2014-02-17-cpp-initialization/</id>
    <published>2014-02-17T12:56:12.000Z</published>
    <updated>2016-02-23T06:17:08.753Z</updated>
    
    <content type="html">&lt;h1 id=&quot;列表初始化（list-initialization）&quot;&gt;&lt;a href=&quot;#列表初始化（list-initialization）&quot; class=&quot;headerlink&quot; title=&quot;列表初始化（list initialization）&quot;&gt;&lt;/a&gt;列表初始化（list initialization）&lt;/h1&gt;&lt;p&gt;注：对于内置类型的变量，如果使用列表初始化且初始化存在丢失信息的风险，则编译器将报错。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; d = &lt;span class=&quot;number&quot;&gt;3.14&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i&amp;#123;d&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;默认初始化（default-initialization）&quot;&gt;&lt;a href=&quot;#默认初始化（default-initialization）&quot; class=&quot;headerlink&quot; title=&quot;默认初始化（default initialization）&quot;&gt;&lt;/a&gt;默认初始化（default initialization）&lt;/h1&gt;&lt;p&gt;如果定义变量时没有指定初值，则变量被默认初始化，具体值由变量类型决定。对象被默认初始化时自动执行默认构造函数。&lt;/p&gt;
&lt;h2 id=&quot;何时发生&quot;&gt;&lt;a href=&quot;#何时发生&quot; class=&quot;headerlink&quot; title=&quot;何时发生&quot;&gt;&lt;/a&gt;何时发生&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当在块作用域中不使用任何初始值定义一个非静态变量或者数组时；&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; b[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当一个类本身含有类类型的成员且使用合成的默认构造函数时；&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; B &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当类类型的成员没有在构造函数初始值列表中显示地初始化时。&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a) : a_(a) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;值初始化&quot;&gt;&lt;a href=&quot;#值初始化&quot; class=&quot;headerlink&quot; title=&quot;值初始化&quot;&gt;&lt;/a&gt;值初始化&lt;/h1&gt;&lt;p&gt;对于内置类型，则元素初始值自动设为0；如果是类类型，则由类来默认初始化。&lt;/p&gt;
&lt;h2 id=&quot;何时发生-1&quot;&gt;&lt;a href=&quot;#何时发生-1&quot; class=&quot;headerlink&quot; title=&quot;何时发生&quot;&gt;&lt;/a&gt;何时发生&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在数组初始化时，提供的初始值的数量少于数组的大小；&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// a[] = &amp;#123;1, 2, 3, 0, 0&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不使用初始值定义一个局部静态变量时；&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s; &lt;span class=&quot;comment&quot;&gt;// s值为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;T()&lt;/code&gt;来显示地请求值初始化时;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;使用列表初始化来初始化聚合类，列表中元素数量少于类的成员数量时，后续成员被值初始化。&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Aggre &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Aggre aggre = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// d和c都是0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/36735960&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++值初始化，默认初始化，以及其他初始化类型的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;列表初始化（list-initialization）&quot;&gt;&lt;a href=&quot;#列表初始化（list-initialization）&quot; class=&quot;headerlink&quot; title=&quot;列表初始化（list initialization）&quot;&gt;&lt;/a&gt;列表初始化（li
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++IO库</title>
    <link href="http://chaomai.github.io/2014/02/16/2014-2014-02-16-cpp-io-library/"/>
    <id>http://chaomai.github.io/2014/02/16/2014-2014-02-16-cpp-io-library/</id>
    <published>2014-02-16T14:10:25.000Z</published>
    <updated>2016-02-23T06:17:07.433Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iostream&quot;&gt;&lt;a href=&quot;#iostream&quot; class=&quot;headerlink&quot; title=&quot;iostream&quot;&gt;&lt;/a&gt;&lt;code&gt;iostream&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;条件状态&quot;&gt;&lt;a href=&quot;#条件状态&quot; class=&quot;headerlink&quot; title=&quot;条件状态&quot;&gt;&lt;/a&gt;条件状态&lt;/h2&gt;&lt;p&gt;&lt;code&gt;strm::iostate&lt;/code&gt;是&lt;strong&gt;机器相关&lt;/strong&gt;的位类型，用来标识流错误状态，有4个值，&lt;code&gt;strm::badbit&lt;/code&gt;，&lt;code&gt;strm::failbit&lt;/code&gt;，&lt;code&gt;strm::eofbit&lt;/code&gt;和&lt;code&gt;strm::goodbit&lt;/code&gt;。可用&lt;code&gt;ios::bad()&lt;/code&gt;，&lt;code&gt;ios::fail()&lt;/code&gt;，&lt;code&gt;ios::eof()&lt;/code&gt;和&lt;code&gt;ios::good()&lt;/code&gt;来得知各个flag是否置位；用&lt;code&gt;ios::rdstate()&lt;/code&gt;来获取流的当前状态。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;badbit: 0001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;failbit: 0100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eofbit: 0010&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;goodbit: 0000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同的错误会导致不同的flag被置位，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eof -&amp;gt; eofbit，failbit&lt;/li&gt;
&lt;li&gt;fail -&amp;gt; failbit&lt;/li&gt;
&lt;li&gt;bad -&amp;gt; badbit，且fail()返回true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用&lt;code&gt;ios::clear()&lt;/code&gt;和&lt;code&gt;ios::setstate()&lt;/code&gt;可以对flag进行置位，两者区别在于，&lt;code&gt;ios::clear()&lt;/code&gt;会先将原先的所有flag先复位，而后者不会，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; ios::setstate (iostate state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  clear(rdstate() | state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;输出缓冲&quot;&gt;&lt;a href=&quot;#输出缓冲&quot; class=&quot;headerlink&quot; title=&quot;输出缓冲&quot;&gt;&lt;/a&gt;输出缓冲&lt;/h2&gt;&lt;p&gt;每个输出流都管理一个缓冲区。&lt;/p&gt;
&lt;h3 id=&quot;缓冲刷新&quot;&gt;&lt;a href=&quot;#缓冲刷新&quot; class=&quot;headerlink&quot; title=&quot;缓冲刷新&quot;&gt;&lt;/a&gt;缓冲刷新&lt;/h3&gt;&lt;p&gt;即数据真正写到输出设备或文件，会有以下原因，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序正常结束，main函数return；&lt;/li&gt;
&lt;li&gt;缓冲区满，需要刷新才能写入后续数据；&lt;/li&gt;
&lt;li&gt;使用操纵符；&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endl&lt;/code&gt;：换行并刷新缓冲区；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush&lt;/code&gt;：刷新缓冲区，不附加任何额外字符；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ends&lt;/code&gt;：附加一个空字符，刷新缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unitbuf&lt;/code&gt;和&lt;code&gt;nounitbuf&lt;/code&gt;；&lt;br&gt;  使用&lt;code&gt;unitbuf&lt;/code&gt;后，接下来的每次写操作都进行一次flush；使用&lt;code&gt;nounitbuf&lt;/code&gt;返回正常的缓冲方式。&lt;/li&gt;
&lt;li&gt;关联输入流和输出流。&lt;br&gt;  关联一个输入流到输出流时，从输入流读取数据，会先刷新关联的输出流，&lt;code&gt;cin&lt;/code&gt;和&lt;code&gt;cout&lt;/code&gt;是被关联的。使用&lt;code&gt;tie&lt;/code&gt;进行关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// tie的两个重载版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 两个版本都返回已经tied ostream，如果没有，则返回nullptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ostream* os = &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.tie();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(*os) &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;tie version 1&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ostream* old_os = &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.tie(&lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ostream* null_os = &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.tie();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(*old_os) &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;tie version 2&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; (old_os == &amp;amp;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt; &amp;lt;&amp;lt; (null_os == &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// true true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 此时上面的两个true并不会输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; ch &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;fstream&quot;&gt;&lt;a href=&quot;#fstream&quot; class=&quot;headerlink&quot; title=&quot;fstream&quot;&gt;&lt;/a&gt;&lt;code&gt;fstream&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;op1=&amp;gt;operation: iostream&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;op2=&amp;gt;operation: fstream&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;op2(right)-&amp;gt;op1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;继承自&lt;code&gt;iostream&lt;/code&gt;，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接受一个&lt;code&gt;iostream&lt;/code&gt;类型引用或指针参数的函数，可用一个对应的&lt;code&gt;fstream&lt;/code&gt;类型来调用；&lt;/li&gt;
&lt;li&gt;支持&lt;code&gt;iostream&lt;/code&gt;的所有操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;fstream&lt;/code&gt;也有自己特有的行为和操作，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fstream::fstream(s)&lt;/code&gt;：创建对象并打开文件&lt;code&gt;s&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream::open()&lt;/code&gt;：打开文件，并与&lt;code&gt;fstream&lt;/code&gt;对象关联；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream::close()&lt;/code&gt;：关闭与&lt;code&gt;fstream&lt;/code&gt;对象关联的文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream::is_open()&lt;/code&gt;：与&lt;code&gt;fstream&lt;/code&gt;对象关联的文件是否成功打开，且未关闭；&lt;/li&gt;
&lt;li&gt;对于已打开的&lt;code&gt;fstream&lt;/code&gt;对象，再次&lt;code&gt;open()&lt;/code&gt;会失败；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;open()&lt;/code&gt;失败-&amp;gt;failbit；&lt;/p&gt;
  &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;ifstream &lt;span class=&quot;title&quot;&gt;ifs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ifs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当&lt;code&gt;fstream&lt;/code&gt;对象被销毁，&lt;code&gt;close()&lt;/code&gt;会被自动调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;文件模式&quot;&gt;&lt;a href=&quot;#文件模式&quot; class=&quot;headerlink&quot; title=&quot;文件模式&quot;&gt;&lt;/a&gt;文件模式&lt;/h2&gt;&lt;p&gt;对于&lt;code&gt;ofstream&lt;/code&gt;，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未指定打开模式时，以&lt;code&gt;out&lt;/code&gt;打开；&lt;/li&gt;
&lt;li&gt;通常&lt;code&gt;out&lt;/code&gt;意味着同时使用&lt;code&gt;trunc&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app&lt;/code&gt;不能与&lt;code&gt;trunc&lt;/code&gt;同时设置；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app&lt;/code&gt;和&lt;code&gt;ate&lt;/code&gt;；&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app&lt;/code&gt;，所有的输出操作都在文件末尾，不能seek around；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ate&lt;/code&gt;，初始位置在文件末尾，可以seed around。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;sstream&quot;&gt;&lt;a href=&quot;#sstream&quot; class=&quot;headerlink&quot; title=&quot;sstream&quot;&gt;&lt;/a&gt;&lt;code&gt;sstream&lt;/code&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;op1=&amp;gt;operation: iostream&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;op2=&amp;gt;operation: sstream&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;op2(right)-&amp;gt;op1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类似&lt;code&gt;fstream&lt;/code&gt;，&lt;code&gt;sstream&lt;/code&gt;也包含特有的操作，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sstream::sstream(s)&lt;/code&gt;：创建对象，并保存&lt;code&gt;s&lt;/code&gt;的copy；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sstream::str()&lt;/code&gt;：返回保存的string的copy；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sstream::str(s)&lt;/code&gt;：copy&lt;code&gt;s&lt;/code&gt;到对象中。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iostream&quot;&gt;&lt;a href=&quot;#iostream&quot; class=&quot;headerlink&quot; title=&quot;iostream&quot;&gt;&lt;/a&gt;&lt;code&gt;iostream&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;条件状态&quot;&gt;&lt;a href=&quot;#条件状态&quot; class=
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++Primer - 第1章 开始</title>
    <link href="http://chaomai.github.io/2014/02/06/2014-2014-02-06-cpp-primer-ch1/"/>
    <id>http://chaomai.github.io/2014/02/06/2014-2014-02-06-cpp-primer-ch1/</id>
    <published>2014-02-06T15:06:00.000Z</published>
    <updated>2016-02-23T06:17:05.406Z</updated>
    
    <content type="html">&lt;h1 id=&quot;缓冲区（bufer）&quot;&gt;&lt;a href=&quot;#缓冲区（bufer）&quot; class=&quot;headerlink&quot; title=&quot;缓冲区（bufer）&quot;&gt;&lt;/a&gt;缓冲区（bufer）&lt;/h1&gt;&lt;p&gt;一个存储区域，用于保存数据。IO设施通常将输入（或输出）数据保存在一个缓冲区中，读写缓冲区的动作与程序中的动作是无关的。我们可以显式地刷新输出缓冲，以便强制将缓冲区中的数据写入输出设备。默认情况下，读cin会刷新cout；程序非正常终止时也会刷新cout。&lt;/p&gt;
&lt;h1 id=&quot;cerr&quot;&gt;&lt;a href=&quot;#cerr&quot; class=&quot;headerlink&quot; title=&quot;cerr&quot;&gt;&lt;/a&gt;cerr&lt;/h1&gt;&lt;p&gt;一个ostream对象，关联到标准错误，通常写入到与标准输出相同的设备。默认情况下，写到cerr的数据是不缓冲的。cerr通常用于输出错误信息或其他不属于程序正常逻辑的输出内容。&lt;/p&gt;
&lt;h1 id=&quot;类（class）&quot;&gt;&lt;a href=&quot;#类（class）&quot; class=&quot;headerlink&quot; title=&quot;类（class）&quot;&gt;&lt;/a&gt;类（class）&lt;/h1&gt;&lt;p&gt;一种定义自己的数据结构及其相关操作的机制。&lt;/p&gt;
&lt;h1 id=&quot;类类型（class-type）&quot;&gt;&lt;a href=&quot;#类类型（class-type）&quot; class=&quot;headerlink&quot; title=&quot;类类型（class type）&quot;&gt;&lt;/a&gt;类类型（class type）&lt;/h1&gt;&lt;p&gt;类定义的类型。类名即为类型名。&lt;/p&gt;
&lt;h1 id=&quot;clog&quot;&gt;&lt;a href=&quot;#clog&quot; class=&quot;headerlink&quot; title=&quot;clog&quot;&gt;&lt;/a&gt;clog&lt;/h1&gt;&lt;p&gt;一个ostream对象，关联到标准错误。默认情况下，写到clog的数据是被缓冲的。clog通常用于报告称程序的执行信息，存入一个日志文件中。&lt;/p&gt;
&lt;p&gt;未初始化的变量（uninitialized variable）&lt;/p&gt;
&lt;p&gt;未赋予初值的变量。类类型的变量如果未指定初值，则按类定义指定的方式进行初始化。定义在函数内部的内置类型变量默认是不初始化的，除非有显式的初始化语句。&lt;/p&gt;
&lt;h1 id=&quot;变量（variable）&quot;&gt;&lt;a href=&quot;#变量（variable）&quot; class=&quot;headerlink&quot; title=&quot;变量（variable）&quot;&gt;&lt;/a&gt;变量（variable）&lt;/h1&gt;&lt;p&gt;具名对象。&lt;/p&gt;
&lt;h1 id=&quot;运算符（-opeartor）&quot;&gt;&lt;a href=&quot;#运算符（-opeartor）&quot; class=&quot;headerlink&quot; title=&quot;()运算符（()opeartor）&quot;&gt;&lt;/a&gt;()运算符（()opeartor）&lt;/h1&gt;&lt;p&gt;调用运算符。跟随在函数名字之后的一对括号“()”，起到调用函数的效果，传递给函数的实参放置在括号内。&lt;/p&gt;
&lt;h1 id=&quot;运算符（-operator）&quot;&gt;&lt;a href=&quot;#运算符（-operator）&quot; class=&quot;headerlink&quot; title=&quot;.运算符（.operator）&quot;&gt;&lt;/a&gt;.运算符（.operator）&lt;/h1&gt;&lt;p&gt;点运算符。左侧运算符必须是一个类类型对象，右侧运算对象必须是此对象的一个成员的名字。运算结果即为该对象的这个成员。&lt;/p&gt;
&lt;h1 id=&quot;运算符（-operator）-1&quot;&gt;&lt;a href=&quot;#运算符（-operator）-1&quot; class=&quot;headerlink&quot; title=&quot;::运算符（::operator）&quot;&gt;&lt;/a&gt;::运算符（::operator）&lt;/h1&gt;&lt;p&gt;作用域运算符。其用处之一是访问命名空间中的名字。&lt;/p&gt;
&lt;h1 id=&quot;lt-lt-和-gt-gt-运算符（-lt-gt-operator）&quot;&gt;&lt;a href=&quot;#lt-lt-和-gt-gt-运算符（-lt-gt-operator）&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;&amp;lt;和&amp;gt;&amp;gt;运算符（&amp;lt;&amp;gt;operator）&quot;&gt;&lt;/a&gt;&amp;lt;&amp;lt;和&amp;gt;&amp;gt;运算符（&amp;lt;&lt;operator,&gt;&amp;gt;operator）&lt;/operator,&gt;&lt;/h1&gt;&lt;p&gt;输出和输入运算符。它们的计算结果均是其左侧的运算对象。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缓冲区（bufer）&quot;&gt;&lt;a href=&quot;#缓冲区（bufer）&quot; class=&quot;headerlink&quot; title=&quot;缓冲区（bufer）&quot;&gt;&lt;/a&gt;缓冲区（bufer）&lt;/h1&gt;&lt;p&gt;一个存储区域，用于保存数据。IO设施通常将输入（或输出）数据保存在一个缓冲区
    
    </summary>
    
      <category term="programming" scheme="http://chaomai.github.io/categories/programming/"/>
    
    
      <category term="cpp" scheme="http://chaomai.github.io/tags/cpp/"/>
    
  </entry>
  
</feed>
